{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started with DDEV","text":"<p>DDEV is an open source tool for launching local web development environments in minutes. It supports PHP and Node.js.</p> <p>These environments can be extended, version controlled, and shared, so you can take advantage of a Docker workflow without Docker experience or bespoke configuration. Projects can be changed, powered down, or removed as easily as they\u2019re started.</p>"},{"location":"#system-requirements","title":"System Requirements","text":"macOSWindows WSL2Traditional WindowsLinuxGitHub Codespaces"},{"location":"#macos","title":"macOS","text":"<p>Runs natively on ARM64 (Apple Silicon) and AMD64 machines.</p> <ul> <li>macOS Sonoma (14) or higher. This is primarily driven by the available Docker providers.</li> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>OrbStack or Lima or Docker Desktop or Rancher Desktop or Colima</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for macOS.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#windows-wsl2","title":"Windows WSL2","text":"<ul> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>Docker CE inside WSL2 or Docker Desktop on the Windows side.</li> <li>Ubuntu or an Ubuntu-derived distro is recommended, though others may work fine</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install DDEV for Windows.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol> <p>WSL2 in Mirrored Mode</p> <p>If you\u2019re using Windows WSL2 with \u201cMirrored\u201d networking mode, enable the experimental <code>hostAddressLoopback=true</code> setting.</p> <p>You can do this using the \u201cWSL Settings\u201d app:</p> <ul> <li>Networking &gt; Networking mode: set to Mirrored</li> <li>Networking &gt; Host Address Loopback: turn On.</li> </ul> <p>Or by creating/editing the file at <code>C:\\Users\\&lt;you&gt;\\.wslconfig</code>:</p> <pre><code>[wsl2]\nnetworkingMode=Mirrored\n\n[experimental]\nhostAddressLoopback=true\n</code></pre>"},{"location":"#traditional-windows","title":"Traditional Windows","text":"<ul> <li>Any recent edition of Windows Home or Windows Pro.</li> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>Docker Desktop using the WSL2 backend</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for Windows.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#linux","title":"Linux","text":"<p>Most distros and most versions work fine, on both AMD64 and ARM64 architectures.</p> <ul> <li>RAM: 8GB</li> <li>Storage: 256GB</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for Linux.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#github-codespaces","title":"GitHub Codespaces","text":"<p>With GitHub Codespaces you don\u2019t install anything; you only need a browser and an internet connection.</p> <p>Next steps:</p> <ol> <li>Install DDEV within GitHub Codespaces.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"developers/","title":"Developing and Improving DDEV","text":"<p>This section is for folks making contributions to DDEV. It covers how to build and release Docker images, and contribute documentation.</p>","boost":0.5},{"location":"developers/brand-guide/","title":"Brand Guide","text":"","boost":0.5},{"location":"developers/brand-guide/#logos","title":"Logos","text":"Figurative Mark Word/Figurative Mark <p>You can find a set of DDEV logos on GitHub.</p> <p>If possible, use the SVG version of the logo, as a vector graphic is independent of the resolution and gives the best results regardless of the pixel density of the display.</p> <p>If the SVG format is not supported, you can use the exported PNG versions of the logo. Use @2x, @3x, and @4x for high pixel density displays. Many applications support @2x annotations in the image path and automatically choose the correct image for the display in use.</p> <p>PNG variants are generated using this script executed from the <code>ddev/ddev</code> repository root:</p> <pre><code># brew install --cask inkscape\n# brew install oxipng\nsvg_dir=\"docs/content/developers/logos/SVG\"\noutput_dirs=(\"1x\" \"2x\" \"3x\" \"4x\")\ndpis=(96 192 288 384)\nfor file in \"$svg_dir\"/*.svg; do\n  base_name=$(basename \"${file%.svg}\")\n  for i in \"${!dpis[@]}\"; do\n    dpi=\"${dpis[$i]}\"\n    output_dir=\"${svg_dir}/../${output_dirs[$i]}\"\n    mkdir -p \"$output_dir\"\n    if [[ \"${dpi}\" == \"96\" ]]; then\n      # No @1x for 1x resolution\n      output_filename=\"$output_dir/${base_name}.png\"\n    else\n      output_filename=\"$output_dir/${base_name}@${output_dirs[$i]}.png\"\n    fi\n    # Export PNG at the specified DPI\n    inkscape \"$file\" --export-dpi \"$dpi\" --export-filename \"$output_filename\"\n    # Optimize the PNG file (lossless)\n    oxipng -o max --strip safe --alpha \"$output_filename\"\n  done\ndone\n</code></pre>","boost":0.5},{"location":"developers/brand-guide/#color-plate","title":"Color Plate","text":"DDEV Blue DDEV Black DDEV White <code>#02a8e2</code> <code>#1e2127</code> <code>#e1ded8</code>","boost":0.5},{"location":"developers/brand-guide/#use-of-the-word-mark-ddev","title":"Use of the Word Mark DDEV","text":"<p>The product DDEV is always referenced in capital letters.</p> <p>When referring to the binary <code>ddev</code>, lowercase letters are preferred.</p>","boost":0.5},{"location":"developers/building-contributing/","title":"Building, Testing, and Contributing","text":"","boost":0.5},{"location":"developers/building-contributing/#testing-latest-commits-on-head","title":"Testing Latest Commits on HEAD","text":"<p>There are several ways to use DDEV\u2019s latest-committed HEAD version:</p> <ul> <li>Download the latest <code>main</code> branch artifacts from nightly.link. Each of these is built by the CI system, signed, and notarized. Get the one you need and place it in your <code>$PATH</code>.</li> <li>Homebrew install HEAD: On macOS and Linux, run <code>brew unlink ddev &amp;&amp; brew install ddev/ddev/ddev --HEAD --fetch-HEAD</code> to get the latest DDEV commit, even if it\u2019s unreleased.</li> <li> <p>Install via script: You can download and run the install_ddev_head.sh  script, or run it automatically:</p> <pre><code># Download and run the install script\ncurl -fsSL https://raw.githubusercontent.com/ddev/ddev/main/scripts/install_ddev_head.sh | bash\n</code></pre> </li> <li> <p>Build manually: If you have normal build tools like <code>make</code> and <code>go</code> installed, you can check out the code and run <code>make</code>.</p> </li> </ul>","boost":0.5},{"location":"developers/building-contributing/#testing-a-pr","title":"Testing a PR","text":"<p>Each PR build creates GitHub artifacts you can use for testing, so you can download the one you need from the PR page, install it locally, and test using that build.</p> <p>You can also downgrade to an older version of DDEV (perform a rollback).</p> <p>Normally, you can put any executable in your path, and it takes precedence, so you don\u2019t need to remove or disable an already installed DDEV instance, which we will use here. This example uses <code>~/bin</code>. Since not every OS has <code>$HOME/bin</code> in <code>$PATH</code>, you can create the folder and add it to your path by updating <code>~/.bashrc</code>, <code>~/.zshrc</code>, or another relevant shell configuration file with these commands:</p> <pre><code>mkdir ~/bin\necho 'export PATH=\"$HOME/bin:$PATH\"' &gt;&gt;~/.bashrc\nsource ~/.bashrc\n# Verify that `$HOME/bin` is the first entry in your `$PATH`\necho $PATH\n</code></pre> <p>Download a ZIP file for your OS and architecture by clicking the link (the result is something like <code>ddev-macos-arm64.zip</code>) or using <code>wget</code>, <code>curl</code>, <code>dl</code> and unzip it, make it executable, and move it to the <code>~/bin</code> folder:</p> macOS Apple SiliconmacOS IntelLinux and WSL2Linux and WSL2 ARM64 <pre><code># Example for macOS Apple Silicon:\nunzip ddev-macos-arm64.zip\nchmod +x ddev &amp;&amp; mv ddev ~/bin/ddev\nrm -f ddev-macos-arm64.zip\n</code></pre> <pre><code># Example for macOS Intel:\nunzip ddev-macos-amd64.zip\nchmod +x ddev &amp;&amp; mv ddev ~/bin/ddev\nrm -f ddev-macos-amd64.zip\n</code></pre> <pre><code># Example for Linux and WSL2:\nunzip ddev-linux-amd64.zip\nchmod +x ddev &amp;&amp; mv ddev ~/bin/ddev\nrm -f ddev-linux-amd64.zip\n</code></pre> <pre><code># Example for Linux and WSL2 ARM64:\nunzip ddev-linux-arm64.zip\nchmod +x ddev &amp;&amp; mv ddev ~/bin/ddev\nrm -f ddev-linux-arm64.zip\n</code></pre> <p></p> <p>Tip: If you need a zip-file to try out the \u201cTesting a PR\u201d process, see the nightly builds.</p> macOS and Unsigned Binaries (click me) <p>macOS doesn\u2019t like these downloaded binaries, so you\u2019ll need to bypass the automatic quarantine to use them:</p> <pre><code>xattr -r -d com.apple.quarantine ~/bin/ddev\n</code></pre> <p>(The binaries on the <code>main</code> branch and the final release binaries are signed.)</p> <p>Verify the replacement worked by running <code>ddev -v</code>. The output should be something like <code>ddev version v1.23.5-98-g3c93ae87e</code>, instead of the regular <code>ddev version v1.23.5</code>. Valuable commands for debugging are <code>which -a ddev</code> and <code>echo $PATH</code>.</p> <p>When DDEV detects a version change, it recommends powering down all running containers. Then, it will download the new images, if required.</p> <p>After you\u2019re done testing, you can delete your downloaded executable, restart your terminal, and again use the standard DDEV:</p> <pre><code>rm ~/bin/ddev\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#making-changes-to-ddev-images","title":"Making Changes to DDEV Images","text":"<p>If you need to make a change to one of the DDEV images, it will need to be built with a specific tag that\u2019s updated in <code>pkg/versionconstants/versionconstants.go</code>.</p> <p>For example, make a change to <code>containers/ddev-webserver/Dockerfile</code>, then build it:</p> <pre><code>cd containers/ddev-webserver\nmake VERSION=20210424_fix_dockerfile\n</code></pre> <p>Then edit <code>pkg/versionconstants/versionconstants.go</code> to set <code>var WebTag = \"20210424_fix_dockerfile\"</code> and</p> <pre><code>cd /workspace/ddev\nmake\n</code></pre> <p><code>ddev version</code> should show you that you are using the correct webtag, and <code>ddev start</code> will show it.</p>","boost":0.5},{"location":"developers/building-contributing/#docker-image-changes","title":"Docker Image Changes","text":"<p>If you make changes to a Docker image (like <code>ddev-webserver</code>), it won\u2019t have any effect unless you:</p> <ul> <li>Push an image with a specific tag by navigating to the image directory (like <code>containers/ddev-webserver</code>), and running <code>make push DOCKER_REPO=youruser/yourimage VERSION=&lt;branchname&gt;</code>.</li> <li>Multi-arch images require you to have a Buildx builder, so <code>docker buildx use multi-arch-builder || docker buildx create --name multi-arch-builder --use</code>.</li> <li>You can\u2019t push until you <code>docker login</code>.</li> <li>Push a container to hub.docker.com. Push with the tag that matches your branch. Push to <code>&lt;yourorg&gt;/ddev-webserver</code> repository with <code>make push DOCKER_ORG=&lt;yourorg&gt; VERSION=&lt;branchname&gt;</code> in the container directory. You might have to use other techniques to push to another repository.</li> <li>Update <code>pkg/versionconstants/versionconstants.go</code> with the <code>WebImg</code> and <code>WebTag</code> that relate to the Docker image you pushed.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#local-builds-and-pushes","title":"Local Builds and Pushes","text":"<p>To use <code>buildx</code> successfully you have to have the <code>buildx</code> Docker plugin, which is in many environments by default.</p> <p>To build multi-platform images you must <code>docker buildx use multi-arch-builder || docker buildx create --name multi-arch-builder --use</code> as a one-time initialization.</p> <ul> <li> <p>If you want to work locally with a quick build for your architecture, you can:</p> <ul> <li><code>make VERSION=&lt;version&gt;</code></li> <li>for <code>ddev-dbserver</code>: <code>make mariadb_10.3 VERSION=&lt;version&gt;</code> etc.</li> </ul> </li> <li> <p>To push manually:</p> </li> </ul> <pre><code>cd containers/ddev-webserver\nmake push VERSION=&lt;tag&gt;\n</code></pre> <p>If you\u2019re pushing to a repository other than the one wired into the Makefile (like <code>ddev/ddev-webserver</code>):</p> <pre><code>cd containers/ddev-webserver\nmake push VERSION=&lt;tag&gt; DOCKER_REPO=your/dockerrepo\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#pushes-using-github-actions","title":"Pushes Using GitHub Actions","text":"<p>To manually push using GitHub Actions,</p>","boost":0.5},{"location":"developers/building-contributing/#for-most-images","title":"For Most Images","text":"<ul> <li>Visit Actions \u2192 Push tagged image</li> <li>Click \u201cRun workflow\u201d in the blue band near the top.</li> <li>Choose the branch, usually <code>main</code> and then the image to be pushed, <code>ddev-webserver</code>, <code>ddev-dbserver</code>, etc.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#for-ddev-dbserver","title":"For <code>ddev-dbserver</code>","text":"<ul> <li>Visit Actions \u2192 Push tagged db image</li> <li>Click \u201cRun workflow\u201d in the blue band near the top.</li> <li>Choose the branch, usually <code>main</code>. Include a tag for the pushed image and GitHub will do all the work.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#instrumentation","title":"Instrumentation","text":"<p>The instrumentation implementation is generated using the Ampli Codegen.</p> <p>To synchronize the implementation with the latest changes at Amplitude, the CLI tool has to be installed locally:</p> <pre><code>npm install -g @amplitude/ampli\n</code></pre> <p>Make changes to the event definition using the GUI at https://data.amplitude.com/ddev/DDEV:</p> <ul> <li>create a new branch</li> <li>create or change events and properties</li> <li>save changes to the new branch</li> <li>update the implementation with <code>ampli checkout &lt;branch name&gt;</code></li> <li>make changes to the code</li> </ul> <p>Once finished, save the changes to publish a new version of the definitions.</p> <p>Afterwards the changes can be imported running the following command in the project root:</p> <pre><code>ampli pull\n</code></pre> <p>Once the changes are ready to be merged, merge the changes made in the new branch to the <code>main</code> branch in the Amplitude backend (the <code>Merge</code> button is on the <code>Activity</code> tab on the left) and switch back to the <code>main</code> branch:</p> <pre><code>ampli checkout main\n</code></pre> <p>Make sure the API keys are not included to the sources; they are linked during compilation using a GitHub secret.</p>","boost":0.5},{"location":"developers/building-contributing/#environments","title":"Environments","text":"<p>There are two environments defined, <code>DDEV - Production</code> and <code>DDEV - Development</code>. Master builds will deliver the data to production, PR builds to development.</p> <p>When working on Amplitude, please always make sure the correct environment is selected or you won\u2019t see any data. Selection is possible on most pages.</p>","boost":0.5},{"location":"developers/building-contributing/#user-and-event-data","title":"User and event data","text":"<p>The first step is always to identify the device, this includes data like OS, architecture, DDEV version, Docker, etc., details are visible in the User Properties. The devices are called Users in the Amplitude backend. So every user represents an unique device on which DDEV is installed.</p> <p>The second step is to collect data about the command which was called by the user and is delivered by a dedicated <code>Command</code> event.</p> <p>The <code>Project</code> event finally collects data about the loaded project(s) which includes important configuration details like PHP version, database, etc.</p>","boost":0.5},{"location":"developers/building-contributing/#debugging","title":"Debugging","text":"<p>Information about data debugging can be found at https://www.docs.developers.amplitude.com/data/debugger/. Ingestion debugger or via User lookup are the most useful options for DDEV.</p> <p>Don\u2019t forget to select the matching environment while debugging.</p>","boost":0.5},{"location":"developers/building-contributing/#examining-data-on-amplitudecom","title":"Examining data on Amplitude.com","text":"<p>First, local <code>ddev</code> binaries have to be built with <code>AmplitudeAPIKey</code> set. Visit <code>https://app.amplitude.com/data/ddev/DDEV/sources/production</code> and select either \u201cProduction\u201d or \u201cDevelopment\u201d, then click the \u201cGo SDK\u201d line to get the API key. Then set <code>export AmplitudeAPIKey=&lt;key&gt;</code> and build the binaries with <code>make</code>.</p> <p>Then run <code>ddev</code> commands as usual, and the data will be sent to Amplitude.</p> <ul> <li>You can examine data on the local side with <code>export DDEV_VERBOSE=true</code> but it\u2019s awkward. However, the actual data is always marked with <code>AMPLITUDE:</code> and the <code>EventType</code> will be <code>Command</code>, <code>Project</code>, or <code>$identify</code> (User data). For example, DDEV_VERBOSE=true ddev start 2&gt;&amp;1 | grep AMPLITUDE`</li> <li>To see the data show up on Amplitude, you\u2019ll need to <code>ddev utility instrumentation flush</code>.</li> <li>To make it easier to find your data, use the \u201cDevelopment\u201d key and set your <code>instrumentation_user</code> to a familiar value in <code>~/.ddev/global_config.yaml</code>. For example, <code>instrumentation_user: rfay</code> would make it so you can find the user <code>rfay</code>.</li> <li>To inspect data, visit \u201cUser Lookup\u201d, (<code>https://app.amplitude.com/analytics/ddev/activity</code>) and choose the correct source in the upper left (\u201cDDEV Production\u201d or \u201cDDEV Development\u201d). Then use \u201cSearch users\u201d in the upper right to find the user you are studying. If you\u2019ve used an <code>instrumentation_user</code> it will be searchable as \u201cUser\u201d.  (Advanced-&gt;where: \u201cUser\u201d = \u201crfay\u201d. for example). You\u2019ll then have a page devoted to the events of that user.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#building","title":"Building","text":"<ul> <li>You\u2019ll want both your fork/branch and the upstream as remotes in Git, so that tags can be determined. For example, the upstream Git remote can be <code>https://github.com/ddev/ddev</code> and your fork\u2019s remote can be <code>git@github.com:&lt;yourgithubuser&gt;/ddev</code>. Without the upstream, Git may not know about tags that it needs for tests to work.</li> <li>To run tests, you\u2019ll want <code>~/tmp</code> to be allowed in Docker. This is not normally an issue as the home directory is available by default in most Docker providers.</li> </ul> <p>Build the project with <code>make</code> and your resulting executable will end up in <code>.gotmp/bin/linux_amd64/ddev</code> or <code>.gotmp/bin/linux_arm64/ddev</code> (for Linux) or <code>.gotmp/bin/windows_amd64/ddev.exe</code> or <code>.gotmp/bin/windows_arm64/ddev.exe</code> (for Windows) or <code>.gotmp/bin/darwin_amd64/ddev</code> or <code>.gotmp/bin/darwin_arm64/ddev</code> (for macOS).</p> <p>You can add additional <code>go build</code> args with <code>make BUILDARGS=&lt;something&gt;</code>, for example, <code>make BUILDARGS=-race</code>.</p> <p>Build/test/check static analysis with:</p> <pre><code>make # Builds on current os/architecture\nmake BUILDARGS=-race\nmake linux_amd64\nmake linux_arm64\nmake darwin_amd64\nmake darwin_arm64\nmake windows_amd64\nmake windows_arm64\nmake test\nmake clean\nmake staticrequired\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#testing","title":"Testing","text":"<p>Normal test invocation is <code>make test</code>. Run a single test with an invocation like <code>go test -v -run TestDevAddSites ./pkg/...</code> or <code>make test TESTARGS=\"-run TestDevAddSites\"</code>. The easiest way to run tests is from inside the excellent Go IDE GoLand. Click the arrowhead to the left of the test name. This is also easy to do in Visual Studio Code.</p> <p>To test with race detection, <code>make test TESTARGS=\"-race\"</code> for example.</p> <p>To see which DDEV commands the tests are executing, set the environment variable <code>DDEV_DEBUG=true</code>.</p> <p>Use <code>GOTEST_SHORT=true</code> to run one CMS in each test, or <code>GOTEST_SHORT=&lt;integer&gt;</code> to run exactly one project type from the list of project types in the TestSites array. For example, <code>GOTEST_SHORT=5 make test TESTARGS=\"-run TestDdevFullSiteSetup\"</code> will run only <code>TestDdevFullSiteSetup</code> against TYPO3.</p> <p>To run a test (in the <code>cmd</code> package) against a individually-compiled DDEV binary, set the <code>DDEV_BINARY_FULLPATH</code> environment variable, for example <code>DDEV_BINARY_FULLPATH=$PWD/.gotmp/bin/linux_amd64/ddev make testcmd</code>.</p> <p>The easiest way to run tests is using GoLand (or VS Code) with their built-in test runners and debuggers. You can step through a specific test; you can stop at the point before the failure and experiment with the site that the test has set up.</p>","boost":0.5},{"location":"developers/building-contributing/#automated-testing","title":"Automated Testing","text":"<p>Anybody can view the CircleCI automated tests, and they usually show up any problems that are not OS-specific. Click through on the testing section of the PR to see them.</p> <p>The Buildkite automated tests require special access, which we typically grant to any PR contributor that asks for it.</p>","boost":0.5},{"location":"developers/building-contributing/#docker-image-development","title":"Docker Image Development","text":"<p>The Docker images that DDEV uses are included in the <code>containers/</code> directory:</p> <ul> <li><code>containers/ddev-php-base</code> the base build for <code>ddev-webserver</code>.</li> <li><code>containers/ddev-webserver</code> provides the web servers for per-project <code>web</code> containers.</li> <li><code>containers/ddev-dbserver</code> provides the <code>db</code> container for per-project databases.</li> <li><code>containers/ddev-ssh-agent</code> provides a single in-Docker-network SSH agent so projects can use your SSH keys.</li> <li><code>containers/ddev-traefik-router</code> is the current Traefik-based router image.</li> <li><code>containers/ddev-xhgui</code> provides a web interface to analyze performance profiles generated by xhprof.</li> </ul> <p>When changes are made to an image, they have to be temporarily pushed to a tag\u2014ideally with the same as the branch name of the PR\u2014and the tag updated in <code>pkg/versionconstants/versionconstants.go</code>. Please ask if you need a container pushed to support a pull request.</p>","boost":0.5},{"location":"developers/building-contributing/#pull-requests","title":"Pull Requests","text":"<p>To contribute your fixes or improvements to DDEV, make a pull request on GitHub. If you\u2019re undertaking a large change, create an issue first so it can be discussed before you invest a lot of time. When you\u2019re ready, create a pull request, and a discussion will start around your proposed changes. Other contributors and users may chime in, but ultimately the decision is made by the maintainer(s). You may be asked to make some changes to your pull request. If so, add more commits to your branch and push them. They\u2019ll automatically go into the existing pull request.</p> <p>If your pull request is merged, great! If not, no sweat; it may not be what the project maintainer had in mind, or they were already working on it. This happens, so our recommendation is to take any feedback you\u2019ve received and go forth and pull request again. Or create your own open source project.</p>","boost":0.5},{"location":"developers/building-contributing/#preparing-a-pull-request","title":"Preparing a pull request","text":"<ul> <li>Fork the repository and clone it locally. Connect your local to the original \u2018upstream\u2019 repository by adding it as a remote, and pull upstream changes often so you stay up to date and reduce the likelihood of conflicts when you submit your pull request. See more detailed instructions on GitHub.</li> <li>Create a branch for your edits. See below for DDEV\u2019s conventions for branch names.</li> <li>Be clear about the problem and how someone can recreate it, or why your feature will help. Be equally clear about the steps you took to make your changes.</li> <li>It\u2019s best to test. Run your changes against any existing tests and create new tests when needed. Whether tests exist or not, make sure your changes don\u2019t break the existing project.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#feature-branch-name","title":"Feature branch name","text":"<p>When preparing your pull request, please use a branch name like <code>YYYYMMDD_&lt;your_username&gt;_short_description</code> (like <code>20230901_rfay_short_description</code>) so it\u2019s easy to identify you as the author.</p>","boost":0.5},{"location":"developers/building-contributing/#pull-request-title-guidelines","title":"Pull Request Title Guidelines","text":"<p>We have very precise rules over how our PR titles (and thus main-branch commits) are to be formatted. This leads to more readable messages that are easy to follow when looking through the project history. But also, we use the main-branch Git commit messages to generate the changelog for the releases.</p> <p>The pull request title must follow this convention which is based on the Conventional Commits specification:</p> <p><code>&lt;type&gt;[optional scope][optional !]: &lt;description&gt;[, fixes #&lt;issue&gt;][, for #&lt;issue&gt;]</code></p>","boost":0.5},{"location":"developers/building-contributing/#examples","title":"Examples","text":"<ul> <li><code>build: update Makefile logic</code></li> <li><code>chore(deps): bump mutagen to 0.18.1</code></li> <li><code>ci(pr): enforce commit message convention, fixes #5037</code></li> <li><code>docs: change code refs of Mac M1 to Apple Silicon</code></li> <li><code>feat: allow multiple upload dirs, fixes #4190, fixes #4796</code></li> <li><code>feat(pantheon): use environment variables</code></li> <li><code>fix: create upload_dir if it doesn't exist in ddev composer create-project, fixes #5031</code></li> <li><code>fix(auth): resolve password reset bug, for #1234</code></li> <li><code>refactor: add new Amplitude Property DDEV-Environment</code></li> <li><code>perf(image-pull): use docker-compose for parallel downloads</code></li> <li><code>style(readme): improve formatting</code></li> <li><code>test: optimize caching of downloaded assets</code></li> </ul>","boost":0.5},{"location":"developers/building-contributing/#type","title":"Type","text":"<p>Must be one of the following:</p> <ul> <li>build: Changes that affect the build or external dependencies</li> <li>chore: Maintenance tasks, dependency updates, or other changes that don\u2019t modify src or test files</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>docs: Documentation only changes</li> <li>feat: A new feature</li> <li>fix: A bugfix</li> <li>perf: A code change that improves performance</li> <li>refactor: A code change that neither fixes a bug nor adds a feature</li> <li>style: Changes that do not affect the meaning of the code (whitespace, formatting, missing semi-colons, etc)</li> <li>test: Adding missing tests or correcting existing tests</li> </ul> <p>Regarding SemVer, all types above except <code>feat</code> increase the patch version, <code>feat</code> increases the minor version.</p>","boost":0.5},{"location":"developers/building-contributing/#scope","title":"Scope","text":"<p>An optional scope may be provided to add contextual information and is contained within parentheses, e.g., <code>feat(pantheon): add file uploads</code>. The scope should be a noun describing a section of the codebase surrounded by parentheses.</p>","boost":0.5},{"location":"developers/building-contributing/#breaking-changes","title":"Breaking Changes","text":"<p>Breaking changes must have a <code>!</code> appended after type/scope.</p> <p>Regarding SemVer, breaking changes increase the major version.</p>","boost":0.5},{"location":"developers/building-contributing/#subject-description","title":"Subject / Description","text":"<p>The subject contains a succinct description of the change:</p> <ul> <li>use the imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d</li> <li>don\u2019t capitalize the first letter</li> <li>no dot (.) at the end</li> </ul> <p>If an issue exists for the change, <code>, fixes #&lt;issue number&gt;</code> must be appended to the subject.</p>","boost":0.5},{"location":"developers/building-contributing/#revert","title":"Revert","text":"<p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>","boost":0.5},{"location":"developers/building-contributing/#coding-style","title":"Coding Style","text":"<p>Unless explicitly stated, we follow all coding guidelines from the Go community. While some of these standards may seem arbitrary, they somehow seem to result in a solid, consistent codebase.</p> <p>It is possible that the codebase does not currently comply with these guidelines. We are not looking for a massive PR that fixes this since that goes against the spirit of the guidelines. All new contributions should make a best effort to clean up and make the codebase better than they left it. Obviously, apply your best judgment. Remember, the goal here is to make the codebase easier for humans to navigate and understand. Always keep that in mind when nudging others to comply.</p> <p>Use <code>make staticrequired</code> to ensure that your code can pass the required static analysis tests.</p> <p>The rules:</p> <ol> <li>All code should be formatted with <code>gofmt -s</code>.</li> <li>All code should pass the default levels of <code>golint</code>.</li> <li>All code should follow the guidelines covered in Effective Go and Go Code Review Comments.</li> <li>Comment the code. Tell us the why, the history and the context.</li> <li>Document all declarations and methods, even private ones. Declare expectations, caveats and anything else that may be important. If a type gets exported, having the comments already there will ensure it\u2019s ready.</li> <li>Variable name length should be proportional to its context and no longer. <code>noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo</code>. In practice, short methods will have short variable names and globals will have longer names.</li> <li>No underscores in package names. If you need a compound name, step back, and re-examine why you need a compound name. If you still think you need a compound name, lose the underscore.</li> <li>All tests should run with <code>go test</code> and outside tooling should not be required. No, we don\u2019t need another unit testing framework. Assertion packages are acceptable if they provide real incremental value.</li> <li>Even though we call these \u201crules\u201d above, they are guidelines. Since you\u2019ve read all the rules, you now know that.</li> </ol> <p>If you are having trouble getting into the mood of idiomatic Go, we recommend reading through Effective Go. The Go Blog is also a great resource. Drinking the kool-aid is a lot easier than going thirsty.</p>","boost":0.5},{"location":"developers/building-contributing/#contributor-live-training","title":"Contributor Live Training","text":"<p>We\u2019re actively trying to increase the DDEV community of contributors and maintainers. To do that, we regularly do contributor training, and we\u2019d love to have you come. The trainings are recorded for everybody\u2019s benefit. The recordings and upcoming session dates can be found here: DDEV Contributor Live Training.</p>","boost":0.5},{"location":"developers/buildkite-testmachine-setup/","title":"Buildkite Test Agent Setup","text":"<p>We are using Buildkite for Windows and macOS testing. The build machines and <code>buildkite-agent</code> must be set up before use.</p>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#windows-test-agent-setup","title":"Windows Test Agent Setup","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>In admin PowerShell, <code>wsl --install</code>.</li> <li>(WSL2/Docker Desktop and traditional Windows only): Install either Docker Desktop for Windows (from the release notes page, which is best maintained) or Rancher Desktop. With Rancher Desktop, turn off Kubernetes. (Rancher Desktop on Windows appears to be too unreliable to use at this point in its history.)</li> <li>In admin PowerShell, <code>Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"Unrestricted\"</code>.</li> <li>In admin PowerShell, download and run windows_buildkite_start.ps1 with <code>curl &lt;url&gt; -O windows_buildkite_start.ps1</code>.</li> <li>Install items as needed; <code>git</code>, <code>jq</code>, <code>mysql-cli</code>, <code>golang</code>, <code>make</code> are only required for a traditional Windows test machine. <code>choco install -y git jq  mysql-cli golang make mkcert netcat zip</code>.</li> <li>After restart, in administrative Git Bash window, <code>Rename-Computer &lt;testbot-win10(home|pro)-&lt;description&gt;-1</code> and then <code>export BUILDKITE_AGENT_TOKEN=&lt;token&gt;</code>.</li> <li>(Traditional Windows test runner only): Download and run windows_buildkite_setup.sh.</li> <li>If using Rancher Desktop, adjust the /c/buildkite-agent/buildkite-agent.cfg file to set <code>rancher-desktop=true</code> in the tags instead of <code>docker-desktop</code>. If using Docker Desktop, set <code>docker-desktop=true</code>.</li> <li>(Traditional Windows test runner only): Download and run windows_postinstall.sh.</li> <li>(Traditional Windows or Docker Desktop WSL2 Only) Launch Docker. It may require you to take further actions.<ul> <li>Check \u201cStart Docker Desktop when you sign in\u201d or the equivalent with Rancher Desktop.</li> <li>Check \u201cAdd the *.docker.internal names to the host\u2019s /etc/hosts file\u201d</li> <li>Uncheck \u201cSBOM Indexing\u201d</li> <li>Under \u201cResources\u201d uncheck \u201cResource Saver\u201d</li> </ul> </li> <li>After starting Docker Desktop or Rancher Desktop, set the correct Docker context in the Git Bash window with <code>docker context use desktop-linux</code> (Docker Desktop) or <code>docker context use default</code> (Rancher Desktop).</li> <li>Log into Chrome with the user <code>ddevtestbot@gmail.com</code> and enable Chrome Remote Desktop.</li> <li>(Traditional Windows test runner only): Enable <code>gd</code>, <code>fileinfo</code>, and <code>curl</code> extensions in <code>/c/tools/php*/php.ini</code>.</li> <li>Set the \u201cSleep after time\u201d setting in settings to never.</li> <li>Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot.  Then run netplwiz, provide the password for the main user, uncheck \u201crequire a password to log in\u201d.</li> <li>(Traditional Windows test runner only): Set the <code>buildkite-agent</code> service to run as the testbot user and use delayed start: Choose \u201cAutomatic, delayed start\u201d and on the \u201cLog On\u201d tab in the services widget it must be set up to log in as the testbot user, so it inherits environment variables and home directory (and can access NFS, has testbot Git config, etc).</li> <li>(Traditional Windows test runner only): <code>git config --global --add safe.directory '*'</code>.</li> <li>(Traditional Windows test runner only): Manually run <code>testbot_maintenance.sh</code>, <code>curl -sL -O https://raw.githubusercontent.com/ddev/ddev/main/.buildkite/testbot_maintenance.sh &amp;&amp; bash testbot_maintenance.sh</code>.</li> <li>(Traditional Windows test runner only): Run <code>.buildkite/sanetestbot.sh</code> to check your work.</li> <li>(Traditional Windows test runner only): Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)</li> <li>(Traditional Windows test runner only): Verify that <code>go</code>, <code>ddev</code>, <code>git-bash</code> are in the path.</li> <li>In \u201cAdvanced Windows Update Settings\u201d enable \u201cReceive updates for other Microsoft products\u201d to make sure you get WSL2 kernel upgrades. Make sure to run Windows Update to get the latest kernel.</li> <li>Turn off the settings that cause the \u201cwindows experience\u201d prompts after new upgrades: </li> <li>In PowerShell: <code>wsl.exe --update</code>. Watch for the elevation to complete, it may require elevation.</li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#both-docker-desktopwsl2-and-docker-cewsl2","title":"Both Docker Desktop/WSL2 and Docker-ce/WSL2","text":"<ol> <li>The Ubuntu distro should be set up with the user <code>buildkite-agent</code> and the password used for <code>ddevtestbot@gmail.com</code>.</li> <li>Stop Docker Desktop if it is running.</li> <li> <p>(Optionally if hostname is not same as appropriate hostname for WSL2) set the hostname in <code>/etc/wsl.conf</code> in the network section, for example:</p> <pre><code>[network]\nhostname=tb-wsl-16-dockerce\n</code></pre> </li> <li> <p>Log into Chrome with the user <code>ddevtestbot@gmail.com</code> and enable Chrome Remote Desktop.</p> </li> <li>Windows Terminal should be installed. Set \u201cUbuntu\u201d (or this distro) as the default and have it start on Windows startup. Enable \u201ccopy on select\u201d in behaviors.</li> <li><code>nc.exe -L -p 9003</code> on Windows to trigger and allow Windows Defender.</li> <li> <p>Optionally edit the <code>~/.wslconfig</code> on Windows to add appropriate WSL2 memory allocation and <code>autoMemoryReclaim</code></p> <pre><code>memory=12GB\n[experimental]\nautoMemoryReclaim=dropcache\n</code></pre> </li> <li> <p>In the Ubuntu distro:</p> <ol> <li><code>export BUILDKITE_AGENT_TOKEN=&lt;token&gt;</code> with the token from 1Password <code>BUILDKITE_AGENT_TOKEN</code>.</li> <li><code>export BUILDKITE_DOCKER_TYPE=dockerforwindows</code> or <code>export BUILDKITE_DOCKER_TYPE=wsl2</code></li> <li>Optionally <code>export NGROK_TOKEN=&lt;token&gt;</code> with the <code>NGROK_TOKEN</code> from 1Password ngrok.com <code>nopaid</code> account.</li> <li>Run the script wsl2-test-runner-setup.sh in the Ubuntu distro.</li> </ol> </li> <li>Restart the distro with <code>wsl.exe -t Ubuntu</code> and then restart it by opening the Ubuntu window.</li> <li>If using Docker Desktop, start Docker Desktop.</li> <li>In <code>~/workspace/ddev/.buildkite</code>, run <code>./testbot_maintenance.sh</code>.</li> <li>In <code>~/workspace/ddev/.buildkite</code>, run <code>./sanetestbot.sh</code> to check your work.</li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#icinga2-monitoring-setup-for-wsl2-instances","title":"Icinga2 monitoring setup for WSL2 instances","text":"<ol> <li>Icinga Director web UI, configure the host on <code>newmonitor.thefays.us</code>, normally making a copy of an existing identical item.</li> <li>Deploy the new host using Icinga Director.</li> <li><code>sudo icinga2 node wizard</code> to configure the agent, see docs</li> <li>Restart <code>sudo systemctl restart icinga2</code></li> <li>On <code>newmonitor.thefays.us</code> edit <code>/usr/local/bin/check_buildkite_agents.sh</code> to include the hostname of the new instance.</li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#macos-docker-desktop-test-agent-setup-intel-and-apple-silicon","title":"macOS Docker Desktop Test Agent Setup (Intel and Apple Silicon)","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>Change the name of the machine to something in keeping with current style, perhaps <code>testbot-macos-arm64-8</code>. This is done in Settings \u2192 General \u2192 About \u2192 Name and in Sharing \u2192 Computer Name and in Sharing \u2192 Local Hostname.</li> <li>Download and install Chrome and log the browser into the account used for test runners. It will pick up the Chrome Remote Desktop setup as a result. Configure Chrome Remote Desktop to serve. When this is done, the machine will be available for remote access and most other tasks can be done using Chrome Remote Desktop.</li> <li>The machine should be on the correct network and have a static IP handed out by DHCP. IP addresses are listed in /etc/hosts on <code>pi.ddev.site</code>, so this one should be added.</li> <li>Power should be set up as in .</li> <li>Auto login should be set up as in , see automatically log in on boot.</li> <li>Remote login should be enabled as in .</li> <li>Automatic updates should be set to mostly security only as in .</li> <li>Set the time zone to US MT (nearest city: Denver, Colorado).</li> <li><code>sudo mkdir -p /usr/local/bin &amp;&amp; sudo chown -R testbot /usr/local/bin</code></li> <li>Install Homebrew <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></li> <li>After installing Homebrew follow the instructions it gives you at the end to add brew to your PATH.</li> <li>Install everything you\u2019ll need with <code>brew install buildkite/buildkite/buildkite-agent bats-core composer ddev/ddev/ddev git golang jq mysql-client@8.0 mkcert netcat p7zip  &amp;&amp; brew install --cask docker iterm2 ngrok &amp;&amp; brew link --force mysql-client</code>.</li> <li>Run <code>ngrok authtoken &lt;token&gt;</code> with token for free account from 1Password.</li> <li>Run <code>mkcert -install</code>.</li> <li>If Docker Desktop will be deployed, run Docker manually and go through its configuration routine.</li> <li>If OrbStack will be deployed, install it from orbstack.dev.<ul> <li>Install with Docker only.</li> <li>Click \u201cSign in\u201d in the lower left to sign in with OrbStack credentials (normal test runner gmail address; it will receive an email with a login code).</li> <li>Configure it to automatically start and download updates, see .</li> </ul> </li> <li>If Rancher Desktop will be deployed, install it.<ul> <li>Turn off kubernetes.</li> <li>Set virtualization to VZ</li> <li>Set mount type to VirtioFS</li> </ul> </li> <li>Run iTerm. You may need to allow full disk access permissions.</li> <li>Run <code>mkdir ~/workspace &amp;&amp; cd ~/workspace &amp;&amp; git clone https://github.com/ddev/ddev</code>.</li> <li>Set up <code>nfsd</code> by running <code>bash ~/workspace/ddev/scripts/macos_ddev_nfs_setup.sh</code>.</li> <li><code>git config --global --add safe.directory '*'</code>.</li> <li>Edit <code>/usr/local/etc/buildkite-agent/buildkite-agent.cfg</code> or <code>/opt/homebrew/etc/buildkite-agent/buildkite-agent.cfg</code> to add<ul> <li>the agent <code>token</code> (from agents tab, \u201cReveal Agent Token\u201d).</li> <li>the agent <code>name</code> (the name of the machine).</li> <li><code>tags</code>, like <code>\"os=macos,architecture=arm64,osvariant=sonoma,dockertype=dockerformac,rancher-desktop=true,orbstack=true,docker-desktop=true\"</code></li> <li><code>build-path=\"~/tmp/buildkite-agent/builds\"</code></li> </ul> </li> <li>Run <code>brew services start buildkite-agent</code>.</li> <li>Run <code>bash ~/workspace/ddev/.buildkite/testbot_maintenance.sh</code>.</li> <li>Run <code>bash ~/workspace/ddev/.buildkite/sanetestbot.sh</code> to check your work.</li> <li>The <code>testbot</code> user\u2019s SSH account is used for monitoring, so <code>ssh-keygen</code> and then add the public key <code>id_testbot</code> from 1Password to <code>~/.ssh/authorized_keys</code> and <code>chmod 600 ~/.ssh/authorized_keys</code>.</li> <li>Add the new machine to Icinga by copying an existing Icinga service to the new one. This is done in Icinga Director \u2192 Services \u2192 Single Services \u2192 Select a Service \u2192 Clone \u2192 Deploy. The new service has to have <code>by-ssh-address</code> set to the name of the test runner, and that address needs to be added to <code>pi.ddev.site</code>\u2019s <code>/etc/hosts</code> file.</li> <li> <p>If <code>zsh</code> is the shell configured, add <code>/etc/zshenv</code> so that <code>/usr/local/bin/docker</code> will be picked up:</p> <pre><code>PATH=$PATH:/usr/local/bin:/opt/homebrew/bin\n</code></pre> </li> <li> <p>In macOS Settings visit \u201cfull disk access\u201d and grant access to <code>buildkite-agent</code>, <code>docker</code>, <code>iterm</code>, <code>orbstack</code>. This may prevent startup modal dialogs that prevent <code>buildkite-agent</code> or <code>docker</code> from continuing properly.</p> </li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#additional-colima-macos-setup","title":"Additional Colima macOS setup","text":"<ol> <li><code>brew install colima</code></li> <li><code>colima start vz --cpu 4 --memory 6 --disk 60 --vm-type=vz --mount-type=virtiofs --dns=1.1.1.1</code></li> <li><code>colima stop vz</code></li> </ol> <p>Then the Buildkite agent must be configured with tags <code>colima_vz=true</code>.</p>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#additional-lima-macos-setup","title":"Additional Lima macOS setup","text":"<ol> <li><code>limactl create --name=lima-vz --vm-type=vz --mount-type=virtiofs --mount-writable --mount=\"~/:w\" --memory=6 --cpus=4 --disk=60 template://docker</code></li> <li><code>limactl start lima-vz</code></li> <li><code>docker context use lima-lima-vz</code></li> </ol> <p>Then the Buildkite agent must be configured with tags <code>lima=true</code>.</p>","boost":0.2},{"location":"developers/github-selfhosted-setup/","title":"GitHub Self-Hosted Agent Setup","text":"<p>We are using GitHub Self-Hosted Agents for Windows and macOS testing. The build machines and agents must be set up before use.</p>","boost":0.2},{"location":"developers/github-selfhosted-setup/#windows-agent-setup","title":"Windows Agent Setup","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>In admin PowerShell, <code>Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\"</code>.</li> <li>In admin PowerShell, download and run windows_buildkite_start.ps1 with <code>curl &lt;url&gt; -O windows_buildkite_start.ps1</code>.</li> <li>After restart, in administrative Git Bash window, <code>Rename-Computer &lt;testbot-win10(home|pro)-&lt;description&gt;-1</code>.</li> <li>Now download and run windows_github_agent_setup.sh.</li> <li>Launch Docker. It may require you to take further actions.</li> <li>Log into Chrome with the user <code>ddevtestbot</code> and enable Chrome Remote Desktop.</li> <li>Enable <code>gd</code>, <code>fileinfo</code>, and <code>curl</code> extensions in <code>/c/tools/php*/php.ini</code>.</li> <li>If a laptop, set the \u201clid closing\u201d setting in settings to do nothing.</li> <li>Set the \u201cSleep after time\u201d setting in settings to never.</li> <li>Install <code>winaero tweaker</code> and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot.  Then run <code>netplwiz</code>, provide the password for the main user, uncheck the \u201crequire a password to log in\u201d.</li> <li>Add the path <code>C:\\Program Files\\git\\bin</code> to the very front of the system environment variables. Otherwise Windows will try to use its own <code>bash.exe</code> or PowerShell.</li> <li>Install the GitHub self-hosted runner software using the \u201cAdd New\u201d instructions on https://github.com/organizations/ddev/settings/actions. When it asks if you want it as a service: yes, you do.</li> <li>Run <code>.buildkite/sanetestbot.sh</code> to check your work.</li> <li>Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)</li> </ol>","boost":0.2},{"location":"developers/http-proxy-test-environments/","title":"HTTP Proxy Test Environments","text":"<p>Related Testing</p> <p>For testing SSL interception scenarios, see Network Test Environments: Packet-Inspection VPN Simulation.</p> <p>For testing network bandwidth constraints, see Network Bandwidth Testing Environments.</p> <p>This guide demonstrates how to set up HTTP proxy environments for testing DDEV behavior with proxy servers. This is useful for testing corporate environments that route traffic through HTTP proxies, simulating real-world network configurations where all traffic must pass through proxy servers.</p>","boost":0.1},{"location":"developers/http-proxy-test-environments/#setup-overview","title":"Setup Overview","text":"<p>The setup involves:</p> <ul> <li>Running a SOCKS5 proxy (Tor or Cloudflare WARP)</li> <li>Converting SOCKS5 to HTTP using Privoxy</li> <li>Configuring Docker to use the HTTP proxy</li> <li>Testing Docker pulls and container network access</li> </ul>","boost":0.1},{"location":"developers/http-proxy-test-environments/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"","boost":0.1},{"location":"developers/http-proxy-test-environments/#1-install-and-run-socks5-proxy","title":"1. Install and Run SOCKS5 Proxy","text":"<p>Simple Testing Option</p> <p>For basic HTTP proxy testing without SOCKS5 forwarding, you can skip this step and go directly to Step 2 to run Privoxy without any actual proxy behind it.</p> <p>Choose one of the following options:</p>","boost":0.1},{"location":"developers/http-proxy-test-environments/#option-a-using-tor","title":"Option A: Using Tor","text":"<p>Install Tor:</p> <pre><code># macOS\nbrew install tor\n\n# Ubuntu/Debian\nsudo apt-get install tor\n\n# CentOS/RHEL/Fedora\nsudo dnf install tor\n</code></pre> <p>Run Tor in the foreground:</p> <pre><code>sudo tor --SocksPort 127.0.0.1:9050\n</code></pre> <p>Verify Tor is running:</p> <pre><code># Test SOCKS5 connection\ncurl --socks5 127.0.0.1:9050 https://httpbin.org/ip\n</code></pre>","boost":0.1},{"location":"developers/http-proxy-test-environments/#option-b-using-cloudflare-warp","title":"Option B: Using Cloudflare WARP","text":"<p>Install Cloudflare WARP:</p> <pre><code># macOS\nbrew install --cask cloudflare-warp\n\n# Linux\n# See https://pkg.cloudflareclient.com/\n</code></pre> <p>Configure for proxy mode:</p> <p>macOS/Windows (GUI):</p> <p>Configure proxy mode and port through the GUI interface.</p> <p>Linux (CLI):</p> <pre><code>sudo systemctl enable --now warp-svc.service\nwarp-cli registration new\nwarp-cli mode proxy\nwarp-cli proxy port 9050\nwarp-cli connect\n\n# Verify WARP is running\nwarp-cli status\n\n# Test SOCKS5 connection\ncurl --socks5 127.0.0.1:9050 https://httpbin.org/ip\n\n# When testing is done, disconnect\nwarp-cli disconnect\n</code></pre>","boost":0.1},{"location":"developers/http-proxy-test-environments/#2-forward-socks5-to-http-with-privoxy","title":"2. Forward SOCKS5 to HTTP with Privoxy","text":"<p>Install Privoxy:</p> <pre><code># macOS\nbrew install privoxy\n\n# Ubuntu/Debian\nsudo apt-get install privoxy\n\n# CentOS/RHEL/Fedora\nsudo dnf install privoxy\n</code></pre> <p>Run Privoxy in the foreground:</p> <p>Direct HTTP Proxy Testing</p> <p>For simple testing without SOCKS5 forwarding, you can run Privoxy without any actual proxy behind it:</p> <pre><code>privoxy --no-daemon &lt;(echo -e \"listen-address 0.0.0.0:8118\\ndebug 1\\n\")\n</code></pre> <p>This creates an HTTP proxy at <code>0.0.0.0:8118</code> without forwarding to Tor/WARP, useful for testing Docker proxy configuration alone.</p> <p>With SOCKS5 forwarding (for full proxy chain):</p> <pre><code>privoxy --no-daemon &lt;(echo -e \"listen-address 0.0.0.0:8118\\nforward-socks5 / 127.0.0.1:9050 .\\ndebug 1\\n\")\n</code></pre> <p>Alternative - Using temporary config file:</p> <pre><code># Create temporary config\ncat &gt; /tmp/privoxy.conf &lt;&lt; EOF\nlisten-address 0.0.0.0:8118\nforward-socks5 / 127.0.0.1:9050 .\ndebug 1\nEOF\n\n# Run Privoxy\nprivoxy --no-daemon /tmp/privoxy.conf\n</code></pre> <p>This configures Privoxy to:</p> <ul> <li>Listen on all interfaces port <code>8118</code> for HTTP proxy requests</li> <li>Forward all traffic to the SOCKS5 proxy at <code>127.0.0.1:9050</code></li> <li>Enable debug logging to monitor connections</li> </ul>","boost":0.1},{"location":"developers/http-proxy-test-environments/#3-configure-docker-daemon-proxy","title":"3. Configure Docker Daemon Proxy","text":"<p>Create or edit <code>/etc/docker/daemon.json</code> (requires sudo):</p> <pre><code>{\n    \"proxies\": {\n        \"http-proxy\": \"http://127.0.0.1:8118\",\n        \"https-proxy\": \"http://127.0.0.1:8118\",\n        \"no-proxy\": \"localhost,127.0.0.0/8\"\n    }\n}\n</code></pre> <p>Restart Docker daemon:</p> <pre><code>sudo systemctl restart docker\n</code></pre>","boost":0.1},{"location":"developers/http-proxy-test-environments/#4-configure-docker-client-proxy","title":"4. Configure Docker Client Proxy","text":"<p>Create or edit <code>~/.docker/config.json</code> (user-level configuration):</p> <pre><code>{\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://host.docker.internal:8118\",\n            \"httpsProxy\": \"http://host.docker.internal:8118\",\n            \"noProxy\": \"localhost,127.0.0.1/8,::1,*.ddev.site\"\n        }\n    }\n}\n</code></pre> <p>Docker Network Access</p> <p>Using <code>host.docker.internal:8118</code> allows containers to reach the proxy running on the host system.</p>","boost":0.1},{"location":"developers/http-proxy-test-environments/#5-test-the-proxy-setup","title":"5. Test the Proxy Setup","text":"<p>Monitoring Connections</p> <p>Keep the Privoxy terminal window visible to monitor proxy connections and debug any issues.</p> <p>Test Docker daemon proxy:</p> <pre><code># Test Docker registry access\ndocker pull ddev/ddev-utilities:latest\n\n# Check Docker info for proxy configuration\ndocker info | grep -i proxy\n</code></pre> <p>Test container proxy access:</p> <pre><code># Initialize and start a DDEV project if needed\n# ddev config --auto\n# ddev start\n\n# Test container network access\nddev exec curl -v https://httpbin.org/ip\n\n# Test package updates\nddev exec sudo apt-get update\n</code></pre> <p>Verify proxy chain:</p> <p>You should see new connections appear in the Privoxy debug output, confirming that traffic is being routed through the proxy chain.</p>","boost":0.1},{"location":"developers/http-proxy-test-environments/#troubleshooting","title":"Troubleshooting","text":"","boost":0.1},{"location":"developers/http-proxy-test-environments/#connection-issues","title":"Connection Issues","text":"<p>If containers cannot reach the proxy:</p> <p>Verify Privoxy configuration:</p> <pre><code># Check if Privoxy is listening\nnetstat -an | grep 8118\n# or\nss -tlnp | grep 8118\n</code></pre> <p>Test host connectivity from container:</p> <pre><code># Check if host.docker.internal resolves\nddev exec nslookup host.docker.internal\n\n# Test direct connection to proxy\nddev exec curl -v --connect-timeout 5 http://host.docker.internal:8118\n</code></pre> <p>Check firewall and networking:</p> <ul> <li>Ensure firewall rules allow traffic on port <code>8118</code></li> <li>Verify Docker network configuration: <code>docker network inspect bridge</code></li> <li>Check if SELinux/AppArmor is blocking connections</li> </ul>","boost":0.1},{"location":"developers/http-proxy-test-environments/#proxy-chain-issues","title":"Proxy Chain Issues","text":"<p>If the proxy chain is broken:</p> <p>Verify SOCKS5 proxy:</p> <pre><code># Check if SOCKS5 proxy is listening\nnetstat -an | grep 9050\n\n# Test SOCKS5 proxy directly\ncurl --socks5 127.0.0.1:9050 https://httpbin.org/ip\n\n# For WARP, check status\nwarp-cli status\n</code></pre> <p>Debug Privoxy forwarding:</p> <pre><code># Test HTTP proxy directly\ncurl --proxy http://127.0.0.1:8118 https://httpbin.org/ip\n\n# Check Privoxy logs for error messages\n# Look for \"forward-socks5\" errors in the terminal output\n</code></pre> <p>Common fixes:</p> <ul> <li>Restart Privoxy with fresh configuration</li> <li>Verify SOCKS5 proxy port matches Privoxy forward configuration</li> <li>Check for conflicting proxy settings in environment variables</li> </ul>","boost":0.1},{"location":"developers/http-proxy-test-environments/#use-cases","title":"Use Cases","text":"<p>This setup is valuable for testing:</p> <ul> <li>Corporate proxy environments - Simulate enterprise networks with mandatory proxy usage</li> <li>Proxy authentication scenarios - With additional Privoxy configuration for username/password auth</li> </ul>","boost":0.1},{"location":"developers/http-proxy-test-environments/#cleanup","title":"Cleanup","text":"<p>When finished testing:</p> <pre><code># Stop DDEV if running\nddev poweroff\n\n# Remove Docker proxy configuration from\n# /etc/docker/daemon.json\n# ~/.docker/config.json\n\n# Restart Docker\nsudo systemctl restart docker\n\n# Stop proxy services\n# Ctrl+C in Privoxy terminal\n# For WARP: warp-cli disconnect\n# For Tor: Ctrl+C in Tor terminal\n</code></pre> <p>This HTTP proxy setup provides a realistic simulation of corporate network environments where all traffic must route through proxy servers, helping ensure DDEV works reliably in such configurations.</p>","boost":0.1},{"location":"developers/maintainers/","title":"Maintainer Tasks, Privileges, Resources","text":""},{"location":"developers/maintainers/#thank-you","title":"THANK YOU","text":"<p>We so appreciate our amazing maintainers. There are so many things to keep track of, including support, testing, test runners, improvements, and a thousand other things. This section attempts to document some of the things that maintainers need to know and do.</p>"},{"location":"developers/maintainers/#maintainer-responsibilities","title":"Maintainer Responsibilities","text":"<p>Not all maintainers can do all these things at any given time, but these are the things that we hope get done in the DDEV project:</p> <ul> <li>Support: We try to give friendly, accurate, and timely responses to those who need help in:<ul> <li>Issue queue (and discussions, etc). Please follow all in at least the ddev/ddev project. On the Watch/Unwatch button at the top of the repository, consider selecting \u201cAll Activity\u201d. Also consider this on other projects in the <code>ddev</code> organization or other projects that are in your interest area.</li> <li>Discord: Please read everything that happens in the DDEV Discord and respond to questions that you can help with.</li> <li>Stack Overflow. You can subscribe to the ddev tag on Stack Overflow using the email filter and answer or comment on questions there.</li> <li>Often in Drupal Slack #ddev channel. We have tried and tried to get people over to Discord, but it\u2019s still pretty active there.</li> <li>Other add-on repositories or related repos where we can help.</li> </ul> </li> <li>Test Runner and Test System Maintenance: The testing system is complex, and most tests are end-to-end tests, which can be fragile due to design, internet problems, changes upstream, etc. When something goes wrong, we want to figure out what it is and make it better. This can include debugging or rebooting Buildkite-runners, etc.</li> <li>Test Maintenance: Getting great tests that tell us what we need to know without taking forever and without being fragile is a never-ending battle. Improvements are always a goal. But it\u2019s fundamental that we be able to pass tests before we add new PRs in.</li> <li>Improve the DDEV codebase with fixes and features: We try to listen to the community and improve based on their needs.</li> <li>Security Best Practices: Please make sure to remain current on all security best practices. Your GitHub login and 1Password access absolutely must be managed with 2FA. Be aware of the fact that someone who compromises your privileges could attack our entire user base. If you have any questions about best practices, let\u2019s talk and make sure we all understand what\u2019s going on.</li> </ul>"},{"location":"developers/maintainers/#appropriate-use-of-privileges","title":"Appropriate Use of Privileges","text":"<ul> <li>We prefer the forked-PR workflow for all code changes. There are a few cases where a branch-PR on <code>ddev/ddev</code>, but in general, to do a fix or a feature, do it on a branch on your fork, and submit it as a forked PR.</li> <li>Even though you may have privileges to do things like push directly to the default branch of a repository, it doesn\u2019t mean you should use them. The vast majority of the time you\u2019ll use the codebase the same as any other contributor. PRs make it clear both now and in the future why changes were made.</li> <li>Use clear PRs and write great issues even though you yourself may understand exactly what\u2019s going on. Remember that you may need a refresher course in what you did in a month or a year, so write a great PR description and fill in the form.</li> <li>Remember to talk about configuration changes you make with other maintainers. Don\u2019t waste their time by changing things they\u2019ll then have to discover and debug.</li> </ul>"},{"location":"developers/maintainers/#maintainer-documentation-resources","title":"Maintainer Documentation Resources","text":"<ul> <li>DDEV Developer Documentation</li> <li>Maintainer Private Repository. This has information that may be sensitive, with screencasts and tips.</li> <li>DDEV Contributor Training, a series of training sessions that were recorded.</li> <li>DDEV blog</li> <li>1Password passwords and tokens: Maintainers should be added to the DDEV team in 1Password. This gives access to the DDEV team vault, which has tokens and passwords that are needed for various things. Please try to maintain things like tokens in there.</li> </ul>"},{"location":"developers/maintainers/#privileges-required-for-maintainers","title":"Privileges Required for Maintainers","text":"<p>Most privileges should be granted per-developer as separate accounts. In general, we don\u2019t want to share a common login. So for example, instead of sharing a login to developer.apple.com or buildkite.com each maintainer should have their own login.</p> <p>There are cases like access to hosting provider integrations that have essentially no value upstream where a shared login is acceptable. And of course, tokens listed in 1Password are a type of shared login. Our hosting integrations like Acquia, Upsun, etc. should never have any valuable things to attack anyway, so these should be very low risk. However, the bad guys are always trying new things\u2026</p> <ul> <li>GitHub: Maintainers should usually be added to the DDEV organization, usually was \u201cowner\u201d, but lesser privileges are possible, and some maintainers may want only access to the DDEV project, etc.</li> <li>Buildkite: Maintainers should be added to the DDEV Buildkite organization with \u201cmaintainer\u201d privileges. This gives access to the Buildkite pipelines and the ability to add new pipelines. Do not require \u201cSSO\u201d or people won\u2019t be able to get in.</li> <li>Google Workspace: Maintainers should usually be added to the Admin Console, have their own email <code>@ddev.com</code>, and be added to various email groups.</li> <li>YouTube: Channel credentials are stored in 1Password.</li> <li>Chrome Remote Desktop: This is the test runner login (\u201cDDEV buildkite test-runners - remotedesktop.google.com\u201d) from 1Password, but it will need to be authorized via 2FA or a backup code from 1Password.</li> <li>CircleCI: Maintainers automatically have some access via their GitHub team membership, but should probably get more.</li> <li>developer.apple.com: Add to the DDEV team there so certificates can be managed.</li> <li>hub.docker.com: Add user to owners team in DDEV org.</li> <li>AUR: Add user to Co-maintainers (account should be created first) for <code>ddev-bin</code> and <code>ddev-edge-bin</code>.</li> <li>Packagist: Add user to Maintainers (login with GitHub) for <code>ddev/ddev-test-composer-create</code>.</li> <li>Chocolatey: Add user to Manage maintainers.</li> <li>Read the Docs: Add user to Maintainers.</li> <li>Icinga monitoring system: This is documented in maintainer-info.</li> <li>Discord: Make admin in Discord.</li> <li>LinkedIn: Add to the DDEV Foundation company page.</li> <li>Bluesky: Posting is enabled by login in 1Password.</li> <li>Mastodon: Posting is enabled by login in 1Password.</li> <li>Zoho Mail is how <code>ddev.com</code> mail is routed; currently only Randy has an account, but we should consider adding others and making sure that more than one person can maintain it.</li> <li>Zoho CRM is how we track contacts and send monthly emails or announcements. People involved in marketing will want to have access to this, but it will cost for additional users.</li> <li>1Password. Maintainers should be added to the DDEV team in 1Password. This gives access to the DDEV team vault, which has tokens and passwords that are needed for various things. Please try to maintain things like tokens in there.</li> <li>Acquia Cloud test account</li> <li>Upsun test accounts</li> <li>Pantheon test account</li> <li>Lagoon test account</li> <li>Newmonitor.thefays.us (Test runner monitoring).</li> <li>SSH (and sudo) access to <code>newmonitor.thefays.us</code></li> <li>developer.apple.com - Maintainers should be added to the DDEV team in the Apple Developer program, so that they can create new certificates.</li> <li>SSH access to newmonitor.thefays.us.</li> <li>Account on pi.ddev.site.</li> <li>Notifications from newmonitor.thefays.us.</li> <li>Web access to newmonitor.thefays.us.</li> <li>SSH access to behind-firewall monitoring proxy.</li> <li>Amplitude: Invite new user at team management.</li> <li>Stack Overflow: Follow the ddev tag on Stack Overflow and answer or comment on questions there when possible.</li> </ul>"},{"location":"developers/maintainers/#github-notifications-for-organization","title":"GitHub Notifications for Organization","text":"<p>To receive emails from DDEV org to a specific email such as <code>@ddev.com</code>, maintainers should add it to <code>Settings &gt; Emails</code> in their GitHub account and create routing for organization and email in <code>Settings &gt; Notifications &gt; Custom routing</code>.</p> <p>GitHub doesn\u2019t automatically send activity notifications for the entire organization, maintainers need to <code>Watch &gt; All Activity</code> for each repository. It\u2019s also helpful to subscribe to other repositories outside the organization by asking the colleagues what they have in their Watched repositories.</p>"},{"location":"developers/maintainers/#github-notifications-for-scheduled-workflow-runs","title":"GitHub Notifications for Scheduled Workflow Runs","text":"<p>From GitHub documentation:</p> <p>Notifications for scheduled workflows are sent to the user who initially created the workflow. If a different user updates the cron syntax in the workflow file, subsequent notifications will be sent to that user instead. If a scheduled workflow is disabled and then re-enabled, notifications will be sent to the user who re-enabled the workflow rather than the user who last modified the cron syntax.</p> <p>DDEV has a separate user for such scheduled workflows named <code>ddevactions</code> (credentials are stored in 1Password), which has the <code>member</code> role with <code>All-repository write</code> access to be able to manage GitHub Actions. Notifications from this account are forwarded to the team via an email group in Google Workspace.</p> <p>To make the user receive notifications about scheduled events:</p> <ol> <li>Go to the Actions tab of the GitHub repository.</li> <li>Filter by Event: select <code>schedule</code>. (If there are none, skip this repository.)</li> <li>Go through all the workflows and turn them off and on if they have scheduled events.</li> <li>Repeat the same with other repositories in the organization.</li> </ol> <p>How to understand who receives notifications about scheduled events:</p> <ol> <li>Go to the Actions tab of the GitHub repository.</li> <li>Filter by Event: select <code>schedule</code>. (If there are none, skip this repository.)</li> <li>Go through all the workflows and open the last workflow log for the job, it will show which user triggered the event.</li> </ol>"},{"location":"developers/maintainers/#newmonitorthefaysus-use-and-maintenance","title":"Newmonitor.thefays.us Use and Maintenance","text":"<p>Newmonitor.thefays.us is an Icinga instance that monitors our Buildkite test runners and a few other things like ddev.com, etc. It also monitors some of Randy\u2019s small sites, but those can be ignored.</p> <p>Maintainers have a login to the dashboard and should receive emails when problems are discovered.</p> <p>You can quickly check the dashboard to see the current status if you get an email notification. Sometimes the tests are flaky, and of course during power outages or internet outages there may be un-resolvable items.</p>"},{"location":"developers/maintainers/#test-runner-maintenance","title":"Test Runner Maintenance","text":"<ul> <li>When you change things on a test runner, or you solve a problem, or reboot it, add a comment to ddev/maintainer-info/issues/1 so others will know what\u2019s going on.</li> </ul>"},{"location":"developers/network-bandwidth-testing/","title":"Network Bandwidth Testing Environments","text":"<p>Related Testing</p> <p>For testing HTTP proxies, see HTTP Proxy Test Environments.</p> <p>For testing SSL interception scenarios, see Network Test Environments: Packet-Inspection VPN Simulation.</p> <p>This guide demonstrates how to simulate slow network connections for testing DDEV behavior under bandwidth-constrained conditions. This is useful for testing how DDEV performs in environments with limited internet connectivity, such as rural areas, mobile connections, or congested networks.</p> <p>The setup involves:</p> <ul> <li>Identifying your network interface</li> <li>Installing network bandwidth limiting tools</li> <li>Applying bandwidth restrictions</li> <li>Testing DDEV operations under constrained conditions</li> <li>Removing bandwidth limitations when testing is complete</li> </ul>","boost":0.1},{"location":"developers/network-bandwidth-testing/#identify-your-network-interface","title":"Identify Your Network Interface","text":"<p>First, you need to identify which network interface you want to limit:</p> <pre><code># List all network interfaces\nip link show\n\n# Or use the older ifconfig command (if installed)\nifconfig -a\n\n# Look for interfaces like:\n# - eth0, enp7s0f1 (Ethernet)\n# - wlan0, wlp3s0 (Wi-Fi)\n# - docker0 (Docker bridge - avoid limiting this)\n</code></pre> <p>Common interface naming patterns:</p> <ul> <li>Ethernet: <code>eth0</code>, <code>enp7s0f1</code>, <code>eno1</code></li> <li>Wi-Fi: <code>wlan0</code>, <code>wlp3s0</code>, <code>wlo1</code></li> <li>USB/Mobile: <code>usb0</code>, <code>wwan0</code></li> </ul>","boost":0.1},{"location":"developers/network-bandwidth-testing/#install-bandwidth-limiting-tools","title":"Install Bandwidth Limiting Tools","text":"","boost":0.1},{"location":"developers/network-bandwidth-testing/#wondershaper-installation","title":"Wondershaper Installation","text":"<p>Wondershaper is a simple bandwidth limiting tool that\u2019s easy to use on Linux:</p> <pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install wondershaper\n\n# CentOS/RHEL/Fedora\nsudo dnf install wondershaper\n\n# Arch Linux\nyay -S wondershaper-git\n</code></pre>","boost":0.1},{"location":"developers/network-bandwidth-testing/#apply-bandwidth-limitations","title":"Apply Bandwidth Limitations","text":"","boost":0.1},{"location":"developers/network-bandwidth-testing/#wondershaper-limits","title":"Wondershaper Limits","text":"<p>Apply download and upload limits (values in kilobits per second):</p> <pre><code># Basic usage: wondershaper -a &lt;interface&gt; -d &lt;download_kbps&gt; -u &lt;upload_kbps&gt;\n\n# Simulate very slow connection (1 Mbps download)\nsudo wondershaper -a enp7s0f1 -d 1024\n\n# Simulate slow broadband (5 Mbps download)\nsudo wondershaper -a enp7s0f1 -d 5120\n\n# Simulate mobile connection (10 Mbps download)\nsudo wondershaper -a enp7s0f1 -d 10240\n\n# Remove all limitations\nsudo wondershaper -a enp7s0f1 -c\n</code></pre> <p>Replace <code>enp7s0f1</code> with your actual network interface name from step 1.</p> <p>Remember to Remove Limits</p> <p>Remember to remove bandwidth limitations after testing with <code>sudo wondershaper -a &lt;interface&gt; -c</code> to restore normal network performance.</p>","boost":0.1},{"location":"developers/network-bandwidth-testing/#test-ddev-operations","title":"Test DDEV Operations","text":"<p>With bandwidth limitations in place, test various DDEV operations:</p> <pre><code># Cleanup before testing\nddev poweroff\nddev delete --omit-snapshot\ndocker builder prune\ndocker volume rm ddev-global-cache\n\n# Test fresh DDEV startup\nddev config --webimage-extra-packages=htop --nodejs-version=18\nDDEV_VERBOSE=true ddev start\n# Open the logs to watch in another terminal:\nddev logs -f\n\n# Force download of docker-compose binary\nrm -f ~/.ddev/bin/docker-compose &amp;&amp; DDEV_DEBUG=true ddev version\n\n# Test composer operations\nddev composer install\n</code></pre>","boost":0.1},{"location":"developers/network-test-environments/","title":"Network Test Environments: Packet-Inspection VPN Simulation","text":"<p>Related Testing</p> <p>For testing HTTP proxies, see HTTP Proxy Test Environments.</p> <p>For testing network bandwidth constraints, see Network Bandwidth Testing Environments.</p> <p>Basic HTTP Proxy Testing</p> <p>For simpler HTTP proxy testing without SSL interception, see HTTP Proxy Test Environments. Start there for basic proxy scenarios before moving to SSL interception testing.</p>","boost":0.1},{"location":"developers/network-test-environments/#simulating-ssl-interception-with-squid-simplified-via-https_proxy","title":"Simulating SSL Interception with Squid (Simplified via <code>HTTPS_PROXY</code>)","text":"<p>A straightforward way to simulate a packet-inspecting VPN is by using Squid with SSL bumping and configuring your environment to use it via <code>HTTPS_PROXY</code>. While it\u2019s less transparent than a full MITM router setup, it closely replicates the behavior of Zscaler and similar tools from the perspective of apps like Docker and <code>curl</code>.</p>","boost":0.1},{"location":"developers/network-test-environments/#setup-overview","title":"Setup Overview","text":"<ul> <li>Squid listens on port 3128.</li> <li>HTTPS traffic routed via the proxy is intercepted and re-signed with a custom CA.</li> <li>Clients that trust this CA will succeed; others will fail SSL validation.</li> <li>You simulate VPN-like interception by exporting <code>HTTPS_PROXY=http://localhost:3128</code>.</li> </ul>","boost":0.1},{"location":"developers/network-test-environments/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<p>These instructions are for Debian/Ubuntu but can be adapted for container-based setup or for another environment.</p> <ol> <li> <p>Install Squid</p> <pre><code>sudo apt-get install squid-openssl ssl-cert\n</code></pre> </li> <li> <p>Generate a Root CA for Signing   This <code>mitm.crt</code> is the CA certificate used by Squid to re-sign intercepted traffic, and it must be trusted by any client interacting through the proxy (e.g., Docker, cURL, system-wide tools).</p> <pre><code>sudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 \\\n  -keyout /etc/squid/mitm.key \\\n  -out /etc/squid/mitm.crt \\\n  -subj \"/CN=SquidMITMTest\"\n</code></pre> </li> <li> <p>Configure Squid for SSL Bumping</p> <p>Edit <code>/etc/squid/squid.conf</code>, replacing or appending the following:</p> <pre><code>http_port 3128 ssl-bump cert=/etc/squid/mitm.crt key=/etc/squid/mitm.key generate-host-certificates=on dynamic_cert_mem_cache_size=4MB\n\nsslcrtd_program /usr/lib/squid/security_file_certgen -s /var/lib/ssl_db -M 4MB\nsslcrtd_children 5\n\nssl_bump server-first all\n\nhttp_access allow all\n</code></pre> </li> <li> <p>Initialize Squid\u2019s SSL Certificate Store</p> <pre><code>sudo /usr/lib/squid/security_file_certgen -c -s /var/lib/ssl_db -M 4MB\nsudo chown -R proxy: /var/lib/ssl_db\n</code></pre> </li> <li> <p>Restart Squid</p> <pre><code>sudo systemctl restart squid\n</code></pre> </li> <li> <p>Export HTTPS Proxy for Testing</p> <pre><code>export HTTPS_PROXY=http://squid.host-only:3128\n</code></pre> </li> </ol>","boost":0.1},{"location":"developers/network-test-environments/#testing-proxy-behavior","title":"Testing Proxy Behavior","text":"<p>Once the proxy is running and your environment is configured, test both Docker registry access and in-container HTTPS access.</p>","boost":0.1},{"location":"developers/network-test-environments/#test-docker-pull","title":"Test Docker Pull","text":"<pre><code>export HTTPS_PROXY=http://squid.host-only:3128\ndocker pull alpine\n</code></pre> <ul> <li>If Docker trusts the Squid CA, the pull will succeed.</li> <li>If not, you\u2019ll see x509 or certificate verification errors.</li> </ul>","boost":0.1},{"location":"developers/network-test-environments/#trusting-the-ca-for-docker-pulls","title":"Trusting the CA for Docker Pulls","text":"<p>Docker does not use the system trust store. To allow <code>docker pull</code> to work when HTTPS is intercepted by Squid, you must explicitly trust the Squid CA by placing it in Docker\u2019s certificate directory:</p> <pre><code>sudo mkdir -p /etc/docker/certs.d/\nsudo cp /etc/squid/mitm.crt /etc/docker/certs.d/\nsudo systemctl restart docker\n</code></pre> <p>You can confirm Docker is using the proxy by watching the Squid logs while pulling:</p> <pre><code>docker pull alpine\n</code></pre> <pre><code>sudo tail -f /var/log/squid/access.log | grep docker\n</code></pre> <p>This setup is sufficient for testing purposes. Docker will then trust any server certificates signed by the Squid CA.</p>","boost":0.1},{"location":"developers/network-test-environments/#test-with-openssl-raw-certificate-check","title":"Test with OpenSSL (Raw Certificate Check)","text":"<pre><code>openssl s_client -connect www.google.com:443 -proxy squid.host-only:3128 -CAfile /etc/squid/mitm.crt\n</code></pre>","boost":0.1},{"location":"developers/network-test-environments/#test-from-another-host-linux-or-macos","title":"Test from Another Host (Linux or macOS)","text":"<p>You can verify Squid\u2019s behavior from a different host using <code>curl</code>. These examples test HTTPS interception and validate that your CA is trusted.</p>","boost":0.1},{"location":"developers/network-test-environments/#option-1-explicit-proxy-with-curl","title":"Option 1: Explicit Proxy with <code>curl</code>","text":"<pre><code>curl -I https://www.google.com --proxy http://squid.host-only:3128\n</code></pre> <ul> <li>Replace <code>squid.host-only</code> with the IP address or hostname of your Squid proxy host.</li> <li>You should receive a <code>200 OK</code> response if the CA is trusted. Otherwise, you\u2019ll get a certificate error.</li> </ul>","boost":0.1},{"location":"developers/network-test-environments/#option-2-using-https_proxy-environment-variable","title":"Option 2: Using <code>HTTPS_PROXY</code> Environment Variable","text":"<pre><code>export HTTPS_PROXY=http://squid.host-only:3128\ncurl -I https://www.google.com\n</code></pre> <p>This has the same effect as <code>--proxy</code> but applies to all tools that honor <code>HTTPS_PROXY</code>.</p>","boost":0.1},{"location":"developers/network-test-environments/#trusting-the-ca-certificate","title":"Trusting the CA Certificate","text":"<p>If you receive certificate errors, install the Squid CA (<code>mitm.crt</code>) on the client system:</p>","boost":0.1},{"location":"developers/network-test-environments/#on-linux","title":"On Linux","text":"<pre><code>sudo cp mitm.crt /usr/local/share/ca-certificates/\nsudo update-ca-certificates\n</code></pre>","boost":0.1},{"location":"developers/network-test-environments/#on-macos","title":"On macOS","text":"<ol> <li>Copy <code>mitm.crt</code> to your local system.</li> <li>Open Keychain Access.</li> <li>Select System in the sidebar.</li> <li>Drag <code>mitm.crt</code> into the window.</li> <li>Double-click the cert \u2192 expand Trust \u2192 set \u201cWhen using this certificate\u201d to Always Trust.</li> <li>Close and enter your password when prompted.</li> </ol>","boost":0.1},{"location":"developers/network-test-environments/#on-wsl2","title":"On WSL2","text":"<p>WSL2 behaves like native Linux. Use the same instructions as for Linux to trust the CA inside your WSL2 distro.</p> <p>After installing the cert, re-run the <code>curl</code> test \u2014 you should no longer see SSL errors.</p>","boost":0.1},{"location":"developers/network-test-environments/#converting-exported-pem-or-cer-files-to-crt","title":"Converting Exported PEM or CER Files to CRT","text":"<p>When exporting a CA certificate from your browser or OS, it might have a <code>.pem</code> or <code>.cer</code> extension. These formats are usually identical to <code>.crt</code>. You can rename them safely:</p> <pre><code>mv my-cert.pem my-cert.crt\nmv my-cert.cer my-cert.crt\n</code></pre> <p>Just ensure the file begins with:</p> <pre><code>-----BEGIN CERTIFICATE-----\n</code></pre> <p>If so, it can be used with <code>update-ca-certificates</code>, Docker, or as a trusted CA in testing.</p>","boost":0.1},{"location":"developers/network-test-environments/#optional-verify-ca-without-installing-it","title":"Optional: Verify CA Without Installing It","text":"<p>To test the Squid CA without installing it, you can use:</p> <pre><code>curl -I https://www.google.com --proxy http://squid.host-only:3128 --cacert /etc/squid/mitm.crt\n</code></pre> <p>This helps confirm that the proxy and CA work before trusting the cert system-wide.</p>","boost":0.1},{"location":"developers/network-test-environments/#quick-recap","title":"Quick Recap","text":"Environment Where to install CA Trust command or method Linux (host) <code>/usr/local/share/ca-certificates</code> <code>update-ca-certificates</code> macOS System Keychain Keychain Access \u2192 \u201cAlways Trust\u201d Docker Engine <code>/etc/docker/certs.d/ca.crt</code> <code>systemctl restart docker</code> Inside container <code>/usr/local/share/ca-certificates</code> <code>update-ca-certificates</code> inside container WSL2 Same as Linux <code>update-ca-certificates</code>","boost":0.1},{"location":"developers/network-test-environments/#monitoring-squid-logs-to-verify-traffic-path","title":"Monitoring Squid Logs to Verify Traffic Path","text":"<p>You can monitor the Squid log in another terminal to confirm proxy use:</p> <pre><code>sudo tail -f /var/log/squid/access.log\n</code></pre> <p>or for example</p> <pre><code>sudo tail -f /var/log/squid/access.log | grep docker\n</code></pre> <p>This <code>HTTPS_PROXY</code>-based setup is simpler and provides a very effective way to simulate real-world TLS inspection without needing DNS or firewall redirection.</p>","boost":0.1},{"location":"developers/project-types/","title":"Adding New Project Types","text":"<p>Adding and maintaining project types (like <code>typo3</code>, <code>magento2</code>, etc.) is not too hard. Please update and add to this doc when you find things that have been missed.</p> <p>To add a new project type:</p> <ul> <li>Add the new type to the list in <code>nodeps/values.go</code></li> <li>Add to <code>appTypeMatrix</code> in <code>apptypes.go</code></li> <li>Add to <code>properties.type</code> in <code>ddevapp/schema.json</code></li> <li>Add to <code>project_type</code> test loop in <code>ddev-webserver/test.sh</code></li> <li>Add to <code>type</code> in <code>templates.go</code> comments</li> <li>Create a new go file for your project type, like <code>mytype.go</code>.</li> <li>Implement the functions that you think are needed for your project type and add references to them in your <code>appTypeMatrix</code> stanza. There are lots of examples that you can start with in places like <code>drupal.go</code> and <code>typo3.go</code>, <code>shopware6.go</code>, etc. The comments in the code in <code>apptypes.go</code> for the <code>appTypeFuncs</code> for each type of action tell what these are for, but here\u2019s a quick summary.<ul> <li><code>settingsCreator</code> is the function that will create a main settings file if none exists.</li> <li><code>uploadDir</code> returns the filepath of the user-uploaded files directory for the project type, like <code>sites/default/files</code> for Drupal or <code>pub/media</code> for magento2.</li> <li><code>hookDefaultComments</code> adds comments to <code>config.yaml</code> about hooks with an example for that project type. It\u2019s probably not useful at all.</li> <li><code>apptypeSettingsPaths</code> returns the paths for the main settings file and the extra settings file that DDEV may create (like <code>settings.ddev.php</code> for Drupal).</li> <li><code>appTypeDetect</code> is a function that determines whether the project is of the type you\u2019re implementing.</li> <li><code>postImportDBAction</code> can do something after db import. I don\u2019t see it implemented anywhere.</li> <li><code>configOverrideAction</code> can change default config for your project type. For example, your CMS may require <code>php8.3</code>, so a <code>configOverrideAction</code> can change the php version.</li> <li><code>postConfigAction</code> gives a chance to do something at the end of config, but it doesn\u2019t seem to be used anywhere.</li> <li><code>postStartAction</code> adds actions at the end of <code>ddev start</code>. You\u2019ll see several implementations of this, for things like creating needed default directories, or setting permissions on files, etc.</li> <li><code>importFilesAction</code> defines how <code>ddev import-files</code> works for this project type.</li> <li><code>defaultWorkingDirMap</code> allows the project type to override the project\u2019s <code>working_dir</code> (where <code>ddev ssh</code> and <code>ddev exec</code> start by default). This is mostly not done anymore, as the <code>working_dir</code> is typically the project root.</li> <li><code>composerCreateAllowedPaths</code> specifies the paths that can exist in a directory when <code>ddev composer create-project</code> is being used.</li> </ul> </li> <li>You\u2019ll likely need templates for settings files, use the Drupal or TYPO3 templates as examples, for example <code>pkg/ddevapp/drupal</code> and <code>pkg/ddevapp/typo3</code>. Those templates have to be loaded at runtime as well.</li> <li>Implement <code>nginx-site-&lt;project-type&gt;.conf</code> in <code>webserver_config_assets</code>. You can use <code>webserver_config_assets/nginx-site-php.conf</code> as a pattern, or something from the upstream project.</li> <li>Upload the project detection file stubs to the <code>testdata/TestDetectAppType</code> folder.</li> <li>Add to <code>appTypes</code> test slice for <code>TestConfigOverrideAction</code> in <code>ddevapp/apptypes_test.go</code>.</li> <li>If the project type has a custom command, add it to <code>global_dotddev_assets/commands/web</code> folder.</li> <li>Once your project type starts working and behaving as you\u2019d like, you\u2019ll need to add test artifacts for it and try testing it (locally first).<ul> <li>Add your project to <code>TestSites</code> in <code>ddevapp_test.go</code>.</li> <li>Create a DDEV project named <code>testpkg&lt;projectype&gt;</code> somewhere and get it going and working with a database and files you can export.</li> <li>Export the database, files, and (optionally) code to tarballs or <code>.sql.gz</code>. Put them somewhere on the internet\u2014they\u2019ll end up in <code>ddev/test-&lt;projectype&gt;</code>. We will give you permissions on that if you like. The <code>magento2</code> project has descriptions explaining how each tarball gets created. Do that for yours as well.</li> <li>Run the test and get it working. I usually use the trick of setting <code>GOTEST_SHORT=&lt;element_in_TestSites&gt;</code>, like <code>GOTEST_SHORT=7</code>. Then set that environment variable in the GoLand profile or your environment. <code>export GOTEST_SHORT=7 &amp;&amp; make testpkg TEST_ARGS=\"-run TestDdevFullsiteSetup\"</code></li> </ul> </li> <li>(We can assist you with this step if needed) Upload your project to GitHub or create an upstream fork (example for Laravel):<ul> <li>Create a <code>ddev-automated-test</code> branch, set it as the default.</li> <li>Commit all vendor dependencies, but don\u2019t commit the <code>.ddev</code> directory.</li> <li>Update the <code>README.md</code> instructions.</li> <li>Create a new release and attach the database and file artifacts.</li> <li>Transfer the repository to DDEV, we will maintain your access. (Ask us to do this after opening the PR.)</li> </ul> </li> <li>Update the documentation:<ul> <li>If it doesn\u2019t pass our spell check, add the word to <code>.spellcheckwordlist.txt</code></li> <li>Add the new type to <code>users/configuration/config.md</code></li> <li>Update the <code>users/quickstart.md</code></li> <li>If there is a new command, add it to <code>users/usage/commands.md</code> and <code>users/usage/cli.md</code></li> </ul> </li> </ul>","boost":0.5},{"location":"developers/quickstart-maintenance/","title":"Contributing a Quickstart Guide","text":"<p>A quickstart guide is a teaching tool that helps new users get started with a specific project type in DDEV. This document explains how to create and contribute a new quickstart guide.</p> <p>Project Type quickstarts are pretty easy to add as just docs in quickstarts,</p> <ul> <li>We want to keep them consistent.</li> <li>To make them maintainable, we need automated tests.</li> </ul>","boost":0.2},{"location":"developers/quickstart-maintenance/#before-you-begin","title":"Before You Begin","text":"<ul> <li>Review existing quickstarts in the DDEV documentation for reference.</li> <li>Review existing automated tests to see how the tests work.</li> </ul>","boost":0.2},{"location":"developers/quickstart-maintenance/#creating-a-quickstart","title":"Creating a Quickstart","text":"<p>The quickstart can be based on one of the existing quickstarts.</p> <p>The general intention is that it should be a teaching tool. It will not cover all the complexities of the project type being discussed. Try for the most straightforward, repeatable, testable approach so that a naive person with no experience on the project type can walk through it. People with more experience with the project type should be able to adapt the provided instructions to meet their needs.</p> <p>In general:</p> <ol> <li>Add a link to the upstream installation or \u201cGetting Started\u201d web page, so people can know where the instructions are coming from.</li> <li>Use <code>mkdir my-&lt;projecttype&gt;-site &amp;&amp; cd my-&lt;projecttype&gt;-site</code> as the opener. (There are places like Magento 2 where the project name must be used later in the recipe, in those cases, use an environment variable, like <code>PROJECT_NAME=my-&lt;projecttype&gt;-site</code>.)</li> <li>Composer-based recipes are preferable, unless the project does not use or prefer composer.</li> <li>If your project type does not yet appear in the DDEV documentation, your PR should add the name to the .spellcheckwordlist.txt so it can pass the spell check test.</li> <li>If your project installation requires providing an administrative username and/or password, make sure to indicate clearly in the instructions what it is.</li> <li> <p>If your project type includes folders that accept public files (such as images), for example, <code>public/media</code>, make sure to add them to the config command:</p> <pre><code>ddev config ... --upload-dirs=public/media\n</code></pre> </li> </ol>","boost":0.2},{"location":"developers/quickstart-maintenance/#automated-tests","title":"Automated Tests","text":"<ol> <li>Each new quickstart needs to have automated tests.</li> <li>You can base your test on an example like the Backdrop test and adapt to cover the steps in your quickstart.</li> <li> <p>You can run <code>bats</code> locally.</p> <ul> <li>See <code>bats-core</code> documentation.</li> <li>See <code>bats-assert</code>, <code>bats-file</code>, and <code>bats-support</code> libraries documentation.</li> <li> <p>If you install <code>bats</code> libraries manually (without package managers), make sure to set the <code>BATS_LIB_PATH</code> environment variable to the appropriate path. For example:</p> <pre><code>export BATS_LIB_PATH=/path/to/bats\n</code></pre> </li> <li> <p>To run the docs tests, <code>cd docs &amp;&amp; bats tests</code> or <code>bats tests/backdrop.bats</code> for example.</p> </li> </ul> </li> </ol>","boost":0.2},{"location":"developers/quickstart-maintenance/#final-note","title":"Final Note","text":"<p>THANK YOU FOR CONTRIBUTING! \u2764\ufe0f</p>","boost":0.2},{"location":"developers/release-management/","title":"Release Management &amp; Docker Images","text":"","boost":0.5},{"location":"developers/release-management/#release-process-and-tools","title":"Release process and tools","text":"<ul> <li>GoReleaser Pro is used to do the actual releasing using .goreleaser.yml. GoReleaser Pro is a licensed product that requires separate installation and a license key, which is in the GitHub Workflow configuration and is available in 1Password to DDEV maintainers who need it.</li> <li>The Main Build/Release GitHub Action does the actual running of the GoReleaser actions and provides the needed secrets.</li> </ul>","boost":0.5},{"location":"developers/release-management/#github-actions-required-secrets","title":"GitHub Actions Required Secrets","text":"","boost":0.5},{"location":"developers/release-management/#how-to-add-new-people-to-these-accounts","title":"How to add new people to these accounts","text":"<ul> <li>AUR is Arch Linux User Repository. <code>ddev-bin</code> is at <code>https://aur.archlinux.org/packages/ddev-bin</code>. The current maintainer of this is @rfay, who can add co-maintainers.</li> <li>The chocolatey package. Additional maintainers can be added at (login required) <code>https://community.chocolatey.org/packages/ddev/ManagePackageOwners</code>; they could then create tokens to push it.</li> <li>GitHub requires write access to this repository, either via permissions on the repository or on the org.</li> <li>Apple signing and notarization requires access to the DDEV Foundation group on <code>https://developer.apple.com</code>. It\u2019s easy enough to add additional people.</li> <li>Windows signing is an awkward process that requires a dongle. When the current signing certificate expires we definitely want the simpler approach.</li> <li>Discord</li> <li>Docker</li> </ul>","boost":0.5},{"location":"developers/release-management/#environment-variables-required","title":"Environment variables required","text":"<p>These are normally configured in the repository environment variables.</p> <ul> <li><code>AUR_EDGE_GIT_URL</code>: The Git URL for AUR edge (normally <code>ddev-edge-bin</code>), for example <code>ssh://aur@aur.archlinux.org/ddev-edge-bin.git</code>.</li> <li><code>AUR_PACKAGE_NAME</code>: The base name of the AUR package. Normally <code>ddev</code> for production, but <code>ddev-test</code> for testing repository.</li> <li><code>AUR_STABLE_GIT_URL</code>: The Git URL for AUR stable (normally <code>ddev-bin</code>), for example <code>ssh://aur@aur.archlinux.org/ddev-bin.git</code>.</li> <li><code>DDEV_WINDOWS_SIGN</code>: If the value is <code>\"true\"</code> then <code>make</code> will attempt to sign the Windows executables, which requires building on our self-hosted Windows runner.</li> <li><code>DOCKER_ORG</code>: the organization on <code>hub.docker.org</code> to push to. Currently <code>ddev</code> on <code>ddev/ddev</code> and <code>ddevhq</code> on <code>ddev-test/ddev</code>.</li> <li><code>DOCKERHUB_USERNAME</code>: Username for pushing to <code>hub.docker.com</code> or updating image descriptions. Usually <code>ddevmachinepush</code>.</li> <li><code>FURY_ACCOUNT</code>: Gemfury account that receives package pushes. <code>drud</code> on <code>ddev/ddev</code> for historical reasons, and <code>rfay</code> on <code>ddev-test/ddev</code> because that\u2019s a spare account there.</li> <li><code>HOMEBREW_EDGE_REPOSITORY</code>: Like <code>ddev/homebrew-ddev-edge</code> but might be another repository like be <code>ddev-test/homebrew-ddev-edge</code>.</li> <li><code>HOMEBREW_STABLE_REPOSITORY</code>: Like <code>ddev/homebrew-ddev</code> but might be another repository like <code>ddev-test/homebrew-ddev</code>.</li> </ul>","boost":0.5},{"location":"developers/release-management/#github-actions-secrets-required","title":"GitHub Actions Secrets Required","text":"<ul> <li><code>AMPLITUDE_API_KEY</code>: Key that enables Amplitude reporting. Environment variable for Make is <code>AmplitudeAPIKey</code>. Unfortunately, the <code>1password/load-secrets-action</code> does not work with Windows (see issue).</li> <li><code>AMPLITUDE_API_KEY_DEV</code>: Key that enables Amplitude reporting for development versions e.g. a PR build. Environment variable for Make is <code>AmplitudeAPIKey</code>.</li> </ul>","boost":0.5},{"location":"developers/release-management/#1password-secrets-required","title":"1Password secrets required","text":"<p>The following \u201cRepository secret\u201d environment variables must be configured in 1Password:</p> <ul> <li><code>AUR_SSH_PRIVATE_KEY</code>: Private SSH key for the <code>ddev-releaser</code> user. This must be processed into a single line, for example, <code>perl -p -e 's/\\n/&lt;SPLIT&gt;/' ~/.ssh/id_rsa_ddev_releaser| pbcopy</code>.</li> <li><code>CHOCOLATEY_API_KEY</code>: API key for Chocolatey.</li> <li><code>DDEV_GITHUB_TOKEN</code>: GitHub personal token (<code>repo</code> scope, classic PAT) that gives access to create releases and push to the Homebrew repositories.</li> <li><code>DDEV_MACOS_APP_PASSWORD</code>: Password used for notarization, see signing_tools.</li> <li><code>DDEV_MACOS_SIGNING_PASSWORD</code>: Password for the macOS signing key, see signing_tools.</li> <li><code>DDEV_WINDOWS_SIGNING_PASSWORD</code>: Windows signing password.</li> <li><code>DOCKERHUB_TOKEN</code>: Token for pushing to <code>hub.docker.com</code>. or updating image descriptions.</li> <li><code>FURY_TOKEN</code>: Push token assigned to the above Gemfury account.</li> <li><code>GORELEASER_KEY</code>: License key for GoReleaser Pro.</li> </ul>","boost":0.5},{"location":"developers/release-management/#creating-a-release","title":"Creating a Release","text":"<p>This is completely automated now, so nothing needs to be done unless something goes wrong.</p>","boost":0.5},{"location":"developers/release-management/#prerelease-tasks","title":"Prerelease Tasks","text":"<ul> <li>Create and execute a test plan.</li> <li>Make sure <code>version-history.md</code> is up to date.</li> <li>Push the new version of <code>ddev/ddev-php-base</code>.</li> <li>Update <code>ddev/ddev-webserver</code> to use the new version of <code>ddev/ddev-php-base</code> and push it with the proper tag.</li> <li>Make sure the Docker images are all tagged and pushed.</li> <li>Make sure <code>pkg/versionconstants/versionconstants.go</code> is all set to point to the new images and tests have been run.</li> </ul>","boost":0.5},{"location":"developers/release-management/#actual-release-creation","title":"Actual Release Creation","text":"<ol> <li>Create a release for the new version using the GitHub UI. It should be \u201cprerelease\u201d if it\u2019s an edge release.</li> <li>Make sure you\u2019re about to create the right release tag.</li> <li>Use the \u201cAuto-generate release notes\u201d option to get the commit list, then edit to add all the other necessary info.</li> </ol>","boost":0.5},{"location":"developers/release-management/#pushing-docker-images-with-the-github-actions-workflow","title":"Pushing Docker Images with the GitHub Actions Workflow","text":"<p>The easiest way to push Docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the ddev/ddev repository.</p>","boost":0.5},{"location":"developers/release-management/#actual-release-creation_1","title":"Actual release creation","text":"<ol> <li>Create a release for the new version using the GitHub UI. It should be \u201cprerelease\u201d if it\u2019s an edge release.</li> <li>Use the \u201cAuto-generate release notes\u201d option to get the commit list, then edit to add all the other necessary info.</li> <li>Verify that Homebrew (Linux and macOS) and Chocolatey and AUR are working correctly with the right versions.</li> </ol> <p>You can push all images besides <code>ddev-dbserver</code> at https://github.com/ddev/ddev/actions/workflows/push-tagged-image.yml</p> <p>You can push <code>ddev-dbserver</code> images at https://github.com/ddev/ddev/actions/workflows/push-tagged-dbimage.yml</p> <p>If you need to push from a forked PR, you\u2019ll have to do this from your fork (for example, <code>https://github.com/rfay/ddev/actions/workflows/push-tagged-image.yml</code>), and you\u2019ll have to specify the branch on the fork. This requires setting the <code>DOCKERHUB_TOKEN</code> and <code>DOCKERHUB_USERNAME</code> secrets on the forked PR, for example <code>https://github.com/rfay/ddev/settings/secrets/actions</code>. You can do the same with <code>ddev-dbserver</code> at <code>https://github.com/rfay/ddev/actions/workflows/push-tagged-dbimage.yml</code> for example.</p> <ul> <li>Visit <code>https://github.com/ddev/ddev/actions/workflows/push-tagged-image.yml</code>.</li> <li>Click the \u201cPush tagged image\u201d workflow on the left side of the page.</li> <li>Click the \u201cRun workflow\u201d button in the blue section above the workflow runs.</li> <li>Choose the branch to build from (usually <code>main</code>).</li> <li>Enter the image (<code>ddev-webserver</code>, <code>ddev-php-base</code>, etc.).</li> <li>Enter the tag that will be used in <code>pkg/version/version.go</code>.</li> </ul>","boost":0.5},{"location":"developers/release-management/#pushing-docker-images-manually","title":"Pushing Docker Images Manually","text":"<p>While it\u2019s more error-prone, images can be pushed from the command line:</p> <ol> <li><code>docker login</code> with a user that has push privileges.</li> <li><code>docker buildx use multi-arch-builder || docker buildx create --name multi-arch-builder --use</code>.</li> <li><code>cd containers/&lt;image&gt;</code>.</li> <li>Before pushing <code>ddev-webserver</code>, make sure you\u2019ve pushed a version of <code>ddev-php-base</code> and updated <code>ddev-webserver</code>\u2019s Dockerfile to use that as a base.</li> <li><code>make push VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code> for most of the images. For <code>ddev-dbserver</code> it\u2019s <code>make PUSH=true VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code>. There\u2019s a push-all.sh script to update all of them, but it takes forever.</li> <li><code>ddev-dbserver</code> images can be pushed with <code>make PUSH=true VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code> from the <code>containers/ddev-dbserver</code> directory.</li> </ol>","boost":0.5},{"location":"developers/release-management/#maintaining-ddev-dbserver-mysql-57-arm64-images","title":"Maintaining <code>ddev-dbserver</code> MySQL 5.7 ARM64 Images","text":"<p>We don\u2019t currently have a way to get <code>xtrabackup</code> for ARM64 Docker images for MySQL 5.7, so we have our own process to maintain ddev/mysql-arm64-images, which uses Ubuntu 18.04 Docker images, where <code>xtrabackup</code> was available.</p> <ul> <li><code>ddev/mysql:5.7</code> uses Ubuntu 18.04 as the base image, and Ubuntu 18.04 ARM64 has <code>mysql-server</code> 5.7 in it, so we can install.</li> <li>To build <code>ddev/mysql</code> (5.7) ARM64 images, follow the instructions on ddev/mysql-arm64-images. After the files, you can push a new release and the proper images will be pushed. Since MySQL 5.7 (and Ubuntu 18.04) are EOL, it\u2019s unlikely that there will be any new minor releases.</li> </ul>","boost":0.5},{"location":"developers/release-management/#actual-release-docker-image-updates","title":"Actual Release Docker Image Updates","text":"<p>We may not build every image for every point release. If there have been no changes to <code>ddev-traefik-router</code> or <code>ddev-ssh-agent</code>, for example, we may not push those and update <code>pkg/version/version.go</code> on major releases.</p> <p>But here are the steps for building:</p> <ol> <li>The <code>ddev/ddev-php-base</code> image must be updated as necessary with a new tag before pushing <code>ddev-webserver</code>. You can do this using the process above.</li> <li>The <code>ddev/ddev-webserver</code> Dockerfile must <code>FROM ddev/ddev-php-base:&lt;tag&gt;</code> before building/pushing <code>ddev-webserver</code>. But then it can be pushed using either the GitHub Actions or the manual technique.</li> <li>If you\u2019re bumping <code>ddev-dbserver</code> 8.0 minor release, follow the upstream Maintaining ddev-dbserver MySQL 5.7 instructions.</li> <li>Update <code>pkg/version/version.go</code> with the correct versions for the new images, and run all the tests.</li> </ol>","boost":0.5},{"location":"developers/release-management/#manually-updating-homebrew-formulas","title":"Manually Updating Homebrew Formulas","text":"<p>Homebrew formulas normally update with the release process, so nothing needs to be done.</p> <p>If you have to temporarily update the Homebrew formulas, you can do that with a commit to https://github.com/ddev/homebrew-ddev and https://github.com/ddev/homebrew-ddev-edge. The bottles and checksums for macOS (High Sierra) and x86_64_linux are built and pushed to the release page automatically by the release build process (see bump_homebrew.sh). Test <code>brew upgrade ddev</code> both on macOS and Linux and make sure DDEV is the right version and behaves well.</p>","boost":0.5},{"location":"developers/release-management/#manually-updating-chocolatey","title":"Manually Updating Chocolatey","text":"<p>Normally the release process does okay with pushing to Chocolatey, but at times a failure can happen and it\u2019s not worth doing the whole release process again.</p> <p>Note that if an existing approved release is being updated you have to have a new version. So for example, if <code>v1.21.3</code> failed, you\u2019ll need to work with <code>v1.21.3.1</code>, so <code>make chocolatey VERSION=v1.21.3.1</code> below.</p> <ul> <li>Open up GitHub Codespaces and</li> </ul> <pre><code>cd /workspace/ddev\ngit checkout &lt;tag&gt;\nsudo apt-get update &amp;&amp; sudo apt-get install -y nsis\nsudo .ci-scripts/nsis_setup.sh /usr/share/nsis\n</code></pre> <ul> <li>Edit the checksum in <code>tools/chocolateyinstall.ps1</code> to match the released checksum of the <code>ddev-windows-installer</code> in <code>checksums.txt</code> of the release that is being repaired, for example, for <code>v1.21.3</code> this would be the checksum for <code>ddev_windows_installer.v1.21.3.exe</code> in v1.21.3 checksums.txt.</li> <li>Edit <code>url64</code> in <code>tools/chocolateyinstall.ps1</code> to be the intended actual DDEV download version - edit the version where it appears and edit the GitHub org. For example, if the actual version of DDEV to be downloaded is <code>v1.21.3</code> then put that there.</li> </ul> <pre><code>make chocolatey VERSION=&lt;tag&gt;\nexport CHOCOLATEY_API_KEY=key33333\ncd .gotmp/bin/windows_amd64/chocolatey\ndocker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key \"${CHOCOLATEY_API_KEY}\"\n</code></pre>","boost":0.5},{"location":"developers/release-management/#manually-updating-aur-repository","title":"Manually Updating AUR Repository","text":"<p>The AUR repository normally updates with the release process, so nothing needs to be done.</p> <p>However, you can manually publish the release to the DDEV AUR repository. The README.md in the AUR Git repository (<code>https://aur.archlinux.org/ddev-bin.git</code>) has instructions on how to update, including how to do it with a Docker container, so it doesn\u2019t have to be done on an ArchLinux or Manjaro VM.</p>","boost":0.5},{"location":"developers/release-management/#manually-signing-the-windows-installer","title":"Manually Signing the Windows Installer","text":"<p>This is done by the release process, but the manual process is documented here.</p> <p>This is done automatically by the release build on a dedicated Windows test runner (GitHub Actions runner) named <code>testbot-asus-win10pro</code>. You would need to do this process manually on that build machine or install the fob on another machine.</p> <p>After rebooting this machine, sometimes an automated reboot, the password for the security fob has to be re-entered or Windows signing will fail. We do this by opening up <code>tb-win11-06</code> using Chrome Remote Desktop (or manually physically opening it), opening Git Bash, and <code>cd ~/tmp &amp;&amp; signtool sign gsudo.exe</code>. There happens to be a <code>gsudo.exe</code> there but it doesn\u2019t matter what you sign\u2014the idea is to pop up the GUI where you enter the password (which is in 1Password).</p>","boost":0.5},{"location":"developers/release-management/#basic-instructions","title":"Basic Instructions","text":"<ol> <li>Install the suggested Windows SDK. Only the signing component is required.</li> <li>Add the path of the kit binaries to the Windows system PATH, <code>C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/</code>.</li> <li>The keyfob and Safenet Authentication Client must be installed. The best documentation for the Safenet software is at https://support.globalsign.com/ssl/ssl-certificates-installation/safenet-drivers. You must configure the advanced client settings to \u201cEnable single logon\u201d or it will require the password on each run.</li> <li>After <code>make windows_amd64_install</code> the <code>ddev_windows_amd64_installer.exe</code> will be in <code>.ddev/bin/windows_amd64/ddev_windows_amd64_installer.exe</code> and you can sign it with <code>signtool sign ddev_windows_amd64_installer.exe</code>.</li> <li>If you need to install the GitHub self-hosted Windows runner, do it with the instructions in project settings \u2192 Actions \u2192 Runners.</li> <li>Currently the <code>actions/cache</code> runner does not work out of the box on Windows, so you have to install tar and zstd as described in this issue.</li> </ol> <p>We shouldn\u2019t use this high-security keyfob approach to signing on the next go-around with the certs.</p> <p>It\u2019s way too difficult to manage, and the Safenet software is atrocious.</p>","boost":0.5},{"location":"developers/release-management/#apt-and-yumrpm-package-management","title":"APT and YUM/RPM Package Management","text":"<p>The Linux <code>apt</code> and <code>yum</code>/<code>rpm</code> packages are built and pushed by the <code>nfpms</code> and <code>furies</code> sections of the .goreleaser.yml file.</p> <ul> <li>The actual packages are served by gemfury.com.</li> <li>The name of the organization in GemFury is <code>drud</code>, managed at <code>https://manage.fury.io/dashboard/drud</code>.</li> <li>Randy Fay, Matt Stein, and Simon Gillis are authorized as owners on this dashboard.</li> <li>The <code>pkg.ddev.com</code> domain name is set up as a custom alias for our package repositories; see <code>https://manage.fury.io/manage/drud/domains</code>. (Users do not see <code>drud</code> anywhere. Although we could have moved to a new organization for this, the existing repositories contain all the historical versions so it made sense to be less disruptive.)</li> <li>The <code>pkg.ddev.com</code> <code>CNAME</code> is managed in Cloudflare because <code>ddev.com</code> is managed there.</li> <li>The fury.io tokens are in DDEV\u2019s shared 1Password account.</li> </ul>","boost":0.5},{"location":"developers/release-management/#testing-release-creation","title":"Testing Release Creation","text":"<p>When significant changes are made to the <code>.goreleaser.yml</code> or related configuration, it\u2019s important to be able to test without actually deploying to <code>ddev/ddev/releases</code> of course. We have two ways to test the configuration; we can run <code>goreleaser</code> manually for simpler tests, or run a full release on <code>ddev-test/ddev</code> where needed.</p>","boost":0.5},{"location":"developers/release-management/#running-goreleaser-manually-to-create-test-packages-and-releases","title":"Running <code>goreleaser</code> manually to create test packages and releases","text":"<p>This approach is great for seeing what artifacts get created, without deploying them.</p> <p>Prerequisites:</p> <ul> <li>GoReleaser Pro must be installed, see GoReleaser installation instructions.</li> <li><code>export GORELEASER_KEY=&lt;key&gt;</code> (not needed for simple snapshot)</li> </ul> <p>You can test the GoReleaser configuration and package building locally without publishing:</p> <p>First, build all artifacts, as GoReleaser uses them as <code>prebuilt</code>.</p> <pre><code>make linux_amd64 linux_arm64 darwin_amd64 darwin_arm64 windows_amd64 windows_arm64 wsl_amd64 wsl_arm64\n</code></pre> <p>Then, you can use <code>goreleaser</code> to check the configuration and build packages. You must have GoReleaser Pro installed, as DDEV uses it for configuration. If you don\u2019t have it installed, see the GoReleaser installation instructions.</p> <pre><code># Check configuration syntax\nREPOSITORY_OWNER=ddev goreleaser check\n\n# Build packages in snapshot mode (no publishing)\ngit tag &lt;tagname&gt; # Try to include context like PR number, for example v1.24.7-PR5824\nREPOSITORY_OWNER=ddev goreleaser release --snapshot --clean\n</code></pre> <p>Built packages will appear in the <code>dist/</code> directory. You can examine package contents:</p> <pre><code># List created packages\nls -la dist/*.{deb,rpm}\n\n# Examine DEB package contents\ndpkg-deb -c dist/ddev_*_linux_amd64.deb\ndpkg-deb -c dist/ddev-wsl2_*_linux_amd64.deb  # WSL2 package\n\n# Examine RPM package contents\nrpm -qlp dist/ddev_*_linux_amd64.rpm\n</code></pre>","boost":0.5},{"location":"developers/release-management/#creating-a-test-release-on-ddev-testddev","title":"Creating a test release on <code>ddev-test/ddev</code>","text":"<p>ddev-test/ddev is now set up for actual release testing. It has all or most of the environment variables set up already. It also acts against <code>ddev-test/homebrew-ddev</code> and <code>ddev-test/homebrew-ddev-edge</code> so you can test Homebrew publishing.</p> <ol> <li>Create a branch on <code>ddev-test/ddev</code>.</li> <li>Using the web UI, create a release using that branch as base. The release tag must start with <code>v1.</code>. Where possible, please use a release tag that includes context about the PR you are working against, like <code>v1.28.8-PR2022FixStuff</code>, and include in the release notes a link to the issue. The tag must be a valid Semantic Version tag, so don\u2019t use underscores, etc.</li> <li>Test out the resulting artifacts that get published or deployed.</li> </ol>","boost":0.5},{"location":"developers/remote-config/","title":"Remote Config","text":"<p>DDEV supports downloading a <code>remote config</code> from the <code>ddev/remote-config</code> GitHub repository with messages that will be shown to the user as a \u201cTip of the Day\u201d. This feature may be enhanced later with more information and filtering.</p>","boost":0.5},{"location":"developers/remote-config/#overview","title":"Overview","text":"<p>DDEV\u2019s remote configuration system provides a way to deliver dynamic content to users, including:</p> <ul> <li>Ticker Messages: Rotating \u201ctip of the day\u201d messages shown during various DDEV operations</li> <li>Notifications: Important announcements and warnings displayed to users</li> <li>Sponsorship Data: Information about DDEV\u2019s financial sponsors (separate repository)</li> </ul> <p>The system is designed to be:</p> <ul> <li>Non-intrusive: Users can disable or configure intervals</li> <li>Version-aware: Messages can target specific DDEV versions</li> <li>Condition-based: Messages can be shown based on user environment (Docker provider, OS, etc.)</li> <li>Cached locally: Configuration is cached to minimize network requests</li> </ul>","boost":0.5},{"location":"developers/remote-config/#data-types","title":"Data Types","text":"","boost":0.5},{"location":"developers/remote-config/#remote-configuration","title":"Remote Configuration","text":"<p>The main configuration includes:</p> <ul> <li>Update intervals for automatic refreshing</li> <li>Notification messages (info and warning types)</li> <li>Ticker messages with optional titles and conditions</li> <li>Version constraints for message targeting</li> </ul>","boost":0.5},{"location":"developers/remote-config/#sponsorship-information","title":"Sponsorship Information","text":"<p>Separate from the main config, DDEV downloads sponsorship data from a JSON endpoint including:</p> <ul> <li>Monthly and annual sponsor information</li> <li>Sponsor counts and income totals</li> <li>GitHub sponsorship details</li> <li>Update timestamps</li> </ul>","boost":0.5},{"location":"developers/remote-config/#storage-format","title":"Storage Format","text":"<p>DDEV stores downloaded data locally using Go\u2019s <code>gob</code> binary encoding format in the user\u2019s global DDEV directory:</p> <ul> <li><code>~/.ddev/.remote-config</code>: Main remote configuration cache</li> <li><code>~/.ddev/.sponsorship-data</code>: Sponsorship information cache  </li> <li><code>~/.ddev/.amplitude.cache</code>: Analytics event cache (if enabled)</li> </ul>","boost":0.5},{"location":"developers/remote-config/#debugging-tools","title":"Debugging Tools","text":"<p>DDEV provides several debugging commands for working with remote configuration:</p>","boost":0.5},{"location":"developers/remote-config/#view-cached-data","title":"View Cached Data","text":"<pre><code># Decode and view cached remote config\nddev utility gob-decode ~/.ddev/.remote-config\n\n# Decode sponsorship data\nddev utility gob-decode ~/.ddev/.sponsorship-data\n\n# Decode analytics cache  \nddev utility gob-decode ~/.ddev/.amplitude.cache\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#download-fresh-data","title":"Download Fresh Data","text":"<pre><code># Download latest remote config (updates cache by default)\nddev utility remote-data --type=remote-config\n\n# Download sponsorship data without updating cache\nddev utility remote-data --type=sponsorship-data --update-storage=false\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#view-available-conditions","title":"View Available Conditions","text":"<pre><code># List all available message conditions\nddev utility message-conditions\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#messages","title":"Messages","text":"","boost":0.5},{"location":"developers/remote-config/#notifications","title":"Notifications","text":"<p>The defined messages are shown to the user every <code>interval</code> as long as not disabled (interval=-1). Supported message types are <code>infos</code> and <code>warnings</code> where <code>infos</code> are printed in a yellow box and <code>warnings</code> in a red box.</p> <p>Messages will be shown as configured in the <code>remote-config</code> repository and the user cannot influence them.</p>","boost":0.5},{"location":"developers/remote-config/#infos","title":"Infos","text":"<p><code>infos</code> and <code>warnings</code> (yellow and red) can be specified like this:</p> <pre><code>{\n  \"messages\": {\n    \"notifications\": {\n      \"interval\": 20,\n      \"infos\": [\n        {\n          \"message\": \"This is a message to users of DDEV before v1.22.7\",\n          \"versions\": \"&lt;=v1.22.6\"\n        }\n      ],\n      \"warnings\": []\n    }\n  }\n}\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#ticker","title":"Ticker","text":"<p>Messages rotate, with one shown to the user every <code>interval</code> as long as it\u2019s not disabled (interval=-1).</p> <p>The user can disable the ticker or change the interval in the global config.</p>","boost":0.5},{"location":"developers/remote-config/#conditions-and-versions","title":"Conditions and Versions","text":"<p>Every message can optionally include a condition and version constraint to limit the message to matching conditions and DDEV versions.</p> <p>Each element in the <code>conditions</code> array may contain a condition listed by <code>ddev utility message-conditions</code>. It may be prefixed by a <code>!</code> to negate the condition. All conditions must be met in order for a message to be displayed. Unknown conditions are always met.</p> <p>The field <code>versions</code> may contain a version constraint which must be met by the current version of DDEV. More information about the supported constraints can be found in the Masterminds SemVer repository.</p>","boost":0.5},{"location":"developers/remote-config/#configuration","title":"Configuration","text":"","boost":0.5},{"location":"developers/remote-config/#global-configuration","title":"Global Configuration","text":"<p>Users can configure remote config behavior in <code>~/.ddev/global_config.yaml</code>:</p> <pre><code>remote_config:\n  update_interval: 24  # Hours between updates\n  remote_config_url: \"https://raw.githubusercontent.com/ddev/remote-config/main/remote-config.jsonc\"\n  sponsorship_data_url: \"https://ddev.com/s/sponsorship-data.json\"\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#per-user-control","title":"Per-User Control","text":"<p>Users can disable features entirely:</p> <pre><code># Disable ticker messages (set in messages section)\nmessages:\n  ticker_interval: -1\n\n# Disable notifications and remote config updates\nremote_config:\n  update_interval: -1\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#architecture","title":"Architecture","text":"","boost":0.5},{"location":"developers/remote-config/#file-structure","title":"File Structure","text":"<p>The remote configuration system consists of several Go packages:</p> <ul> <li><code>pkg/config/remoteconfig/</code>: Main package with interfaces and logic</li> <li><code>pkg/config/remoteconfig/types/</code>: Public type definitions</li> <li><code>pkg/config/remoteconfig/storage/</code>: File storage implementations</li> <li><code>pkg/config/remoteconfig/downloader/</code>: JSONC download functionality</li> </ul>","boost":0.5},{"location":"developers/remote-config/#key-components","title":"Key Components","text":"<ul> <li>RemoteConfig Interface: Main interface for displaying messages</li> <li>Storage Interfaces: Abstract file storage</li> <li>Message Processing: Condition and version constraint evaluation</li> <li>State Management: Tracking update times and message rotations</li> </ul>","boost":0.5},{"location":"developers/remote-config/#testing-and-development","title":"Testing and Development","text":"","boost":0.5},{"location":"developers/remote-config/#testing-remote-config-changes","title":"Testing Remote Config Changes","text":"<p>To test changes to remote configuration:</p> <ol> <li> <p>Change the upstream configuration in ddev/remote-config or use a fork/branch.</p> </li> <li> <p>Set up test configuration in <code>~/.ddev/global_config.yaml</code>:</p> </li> </ol> <pre><code>remote_config:\n  update_interval: 1  # Update every hour for testing\n  remote_config_url: \"https://raw.githubusercontent.com/your-username/remote-config/your-test-branch/remote-config.jsonc\"\n  sponsorship_data_url: \"https://ddev.com/s/sponsorship-data.json\"  # Or your test URL\n</code></pre> <ol> <li>Clear or edit cached data:</li> </ol> <pre><code>rm ~/.ddev/.state.yaml ~/.ddev/.remote-config\n</code></pre> <ol> <li>Test with verbose output:</li> </ol> <pre><code>DDEV_VERBOSE=true ddev start &lt;project&gt;\n</code></pre>","boost":0.5},{"location":"developers/remote-config/#testing-with-debug-commands","title":"Testing with Debug Commands","text":"<p>Use the debug commands to validate your configuration:</p> <pre><code># Download and validate remote config (tests your configured URL from global config)\nddev utility remote-data --type=remote-config --update-storage=false\n\n# View the current cached config\nddev utility gob-decode ~/.ddev/.remote-config\n\n# Verify message conditions work\nddev utility message-conditions\n</code></pre>","boost":0.5},{"location":"developers/secret-management/","title":"Secret Management","text":"<p>Most secrets used in our build process are managed via 1Password. The technique is documented in developer.1password.com.</p>"},{"location":"developers/secret-management/#pull-and-push-secrets","title":"Pull and Push Secrets","text":"<p>Secrets for the TestPlatformPull, TestAcquiaPull, and similar tests are in the <code>test-secrets</code> vault in the DDEV 1Password instance. They can be rotated and otherwise managed there.</p> <p>The <code>test-secrets</code> vault allows access to the service account <code>tests</code> whose auth token is in \u201c1Password Service Account Auth Token: Tests\u201d</p>"},{"location":"developers/testing-docs/","title":"Working on the Docs","text":"<p>This page is about working with the DDEV documentation. See the Writing Style Guide for stylistic guidance.</p>","boost":0.5},{"location":"developers/testing-docs/#fix-docs-using-web-browser","title":"Fix Docs Using Web Browser","text":"<p>The documentation is built and checked automatically with various GitHub Actions workflows. While it may help to check your work locally for more involved PRs, you can more quickly make suggestions using GitHub in a browser:</p> <ol> <li>Click the pencil in the upper right. That will take you to the right page on GitHub.</li> <li>Click the pencil button on GitHub and follow the instructions to create your change.</li> <li>Save your changes and follow the prompts to create a PR.</li> <li>In the checks on your PR, click the \u201cdetails\u201d link by <code>docs/readthedocs.org:ddev</code> to browse the docs build created by your PR.</li> <li>Once the PR has run its checks, you\u2019ll see an item labeled <code>docs/readthedocs.org:ddev</code>. Click \u201cDetails\u201d to review a docs build that includes your changes:     </li> <li>Take a look at the \u201cCheck docs\u201d action to make sure there were no linting or spelling errors.</li> </ol>","boost":0.5},{"location":"developers/testing-docs/#fork-or-clone-the-ddev-repository","title":"Fork or Clone the DDEV Repository","text":"<p>To start making changes you\u2019ll need a local copy of the DDEV documentation, so fork the DDEV repository which includes the documentation.</p> <p>After forking the repository, you can clone it to your local machine.</p>","boost":0.5},{"location":"developers/testing-docs/#make-changes","title":"Make Changes","text":"<p>Now that you\u2019ve got a local copy, you can make your changes.</p> Action Path Documentation <code>./docs/content/users/*</code> <code>./docs/content/developers/*</code> MkDocs configuration <code>./mkdocs.yml</code> Front end <code>./docs/content/assets/extra.css</code> <code>./docs/content/assets/extra.js</code>","boost":0.5},{"location":"developers/testing-docs/#development-tools-installation","title":"Development Tools Installation","text":"<p>For documentation development and testing, install the required tools once using:</p> <pre><code>scripts/install-dev-tools.sh\n</code></pre> <p>This installs <code>mkdocs</code>, <code>pyspelling</code>, <code>markdownlint</code>, <code>textlint</code>, <code>linkspector</code>, and <code>aspell</code> to <code>~/.ddev-dev-tools/</code>.</p> <p>The project\u2019s <code>.envrc</code> automatically adds these tools to your PATH when you\u2019re in the DDEV directory. If you want the tools available globally, add this to your shell profile (<code>.bashrc</code>, <code>.bash_profile</code>, or <code>.zshrc</code>):</p> <pre><code>export PATH=\"$HOME/.ddev-dev-tools/python/bin:$HOME/.ddev-dev-tools/node/bin:$PATH\"\n</code></pre> <p>Alternatively, you can use the project-level <code>.envrc</code> installation method:</p> <ol> <li>Install <code>direnv</code> with <code>brew install direnv</code> or <code>sudo apt-get update &amp;&amp; sudo apt-get install -y direnv</code> or whatever technique is appropriate for your system.</li> <li>Hook <code>direnv</code> into your shell, see docs.</li> <li>Create global configuration for <code>direnv</code> in <code>~/.config/direnv/direnv.toml</code> allowing it to be loaded without the <code>direnv allow</code> command, see  docs, adjusting for your project path:</li> </ol> <pre><code>[global]\nstrict_env = true\n[whitelist]\nexact = [\"~/workspace/ddev/.envrc\"]\n</code></pre> <p>Recommended: Use the unified installation script for better performance and fewer per-project installations.</p>","boost":0.5},{"location":"developers/testing-docs/#preview-changes","title":"Preview Changes","text":"<p>Preview your changes locally by running <code>make mkdocs-serve</code>.</p> <p>This will launch a web server on port 8000 and automatically refresh pages as they\u2019re edited.</p> <p>Installing mkdocs locally on macOS</p> <p>On macOS with recent versions of Homebrew use this technique (or <code>direnv</code> above) to install <code>mkdocs</code>:</p> <pre><code>brew install pipx\nexport PIPX_BIN_DIR=/usr/local/bin\npipx install mkdocs\npipx runpip mkdocs install -r docs/mkdocs-pip-requirements\npipx ensurepath\n</code></pre> <p>Installing mkdocs locally on Debian/Ubuntu Linux or WSL2 with Ubuntu</p> <p>On Debian/Ubuntu Linux or WSL2 with Ubuntu, use this technique (or <code>direnv</code> above) to install <code>mkdocs</code>:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install python3-full python-is-python3 pipx\nexport PIPX_BIN_DIR=/usr/local/bin\nexport PIPX_HOME=/usr/local/pipx\nsudo --preserve-env pipx install mkdocs --pip-args \"-r docs/mkdocs-pip-requirements\"\n</code></pre>","boost":0.5},{"location":"developers/testing-docs/#check-markdown-for-errors","title":"Check Markdown for Errors","text":"<p>Run <code>make markdownlint</code> before you publish changes to quickly check your files for errors or inconsistencies.</p> <p><code>markdownlint-cli</code> required!</p> <p>The <code>make markdownlint</code> command requires you to have <code>markdownlint-cli</code> installed, which you can do by executing <code>npm install -g markdownlint-cli</code> or by using the <code>direnv</code> method above.</p>","boost":0.5},{"location":"developers/testing-docs/#check-for-spelling-errors","title":"Check for Spelling Errors","text":"<p>Run <code>make pyspelling</code> to check for spelling errors. Output will be brief if all goes well:</p> <pre><code>\u279c  make pyspelling\npyspelling:\nSpelling check passed :)\n</code></pre> <p>If you\u2019ve added a correctly-spelled word that gets flagged, like \u201cSymfony\u201d for example, you\u2019ll need to add it to <code>.spellcheckwordlist.txt</code> in the root of DDEV\u2019s repository.</p> <p><code>pyspelling</code> and <code>aspell</code> required!</p> <p>It\u2019s probably best to install packages locally before attempting to run <code>make pyspelling</code>:</p> <pre><code>sudo -H pip3 install pyspelling pymdown-extensions\nsudo apt-get install aspell\n</code></pre>","boost":0.5},{"location":"developers/testing-docs/#check-for-link-errors","title":"Check for Link Errors","text":"<p>Check external links using <code>make linkspector</code>.</p>","boost":0.5},{"location":"developers/testing-docs/#publish-changes","title":"Publish Changes","text":"<p>If all looks good, it\u2019s time to commit your changes and make a pull request back into the official DDEV repository.</p> <p>When you make a pull request, several tasks and test actions will be run. One of those is a task named <code>docs/readthedocs.org:ddev</code>, which builds a version of the docs containing all the changes from your pull request. You can use that to confirm the final result is exactly what you\u2019d expect.</p>","boost":0.5},{"location":"developers/writing-style-guide/","title":"Writing Style Guide","text":"<p>This page formalizes the writing conventions we aspire to use in the documentation. It\u2019s a living statement of intent and a reference for all contributors.</p>","boost":0.5},{"location":"developers/writing-style-guide/#voice-and-tone","title":"Voice and Tone","text":"<p>In the spirit of the Code of Conduct, we want to be clear and encouraging for everyone that bothers to read DDEV\u2019s documentation, rewarding the time and attention they choose to give to it.</p>","boost":0.5},{"location":"developers/writing-style-guide/#beginner-friendly-expert-compatible","title":"Beginner-Friendly, Expert-Compatible","text":"<p>Write so a DDEV beginner can follow your guidance and a DDEV veteran could use the same content as a reference.</p> Write This \ud83d\udc4d Not This \u274c You can run <code>ddev restart</code> to apply changes you\u2019ve made to your global <code>~/.ddev/global_config.yaml</code> or per-project <code>.ddev/config.yaml</code>. Just <code>ddev restart</code> to apply YAML config changes.","boost":0.5},{"location":"developers/writing-style-guide/#be-efficient-and-direct","title":"Be Efficient and Direct","text":"<p>Brevity makes for good documentation!</p> <p>Few read the docs from start to finish like a book, and explanation can be a barrier to learning. Get to the point, avoiding parentheticals and mid-sentence notes that interrupt the main flow.</p> <p>Omit extraneous explanation or decorative language that doesn\u2019t help the reader. Instructions don\u2019t need to include \u201cplease\u201d. Provide some context for anchor links without overloading them to hinder flow.</p> Write This \ud83d\udc4d Not This \u274c Run <code>ddev start</code> and launch the site in a browser. Please run <code>ddev start</code>, then launch the site in a browser. Learn more on the Extending page. (You can also learn more about this and related topics in Providing Custom Environment Variables to a Container.)","boost":0.5},{"location":"developers/writing-style-guide/#avoid-just-and-easy","title":"Avoid \u201cJust\u201d and \u201cEasy\u201d","text":"<p>Try not to use language that may talk down to the reader. You may intend for \u201cit\u2019s easy\u201d to be reassuring, but it\u2019s a subjective judgment that can convince someone struggling that they\u2019re doing it wrong. Things could instead be \u201cstraightforward\u201d if they\u2019re without nuance, \u201csimple\u201d if they don\u2019t involve complex actions or concepts, or \u201cquick\u201d if they involve one or two steps that\u2019d be fast even on someone\u2019s worst day with the slowest-imaginable machine.</p> <p>Similarly, \u201cjust do X\u201d suggests that \u201cX\u201d should be easy or obvious. Most of the time \u201cjust\u201d can be omitted and everyone wins.</p> <p>If you\u2019d like to reassure the reader something is easy, illustrate it with a demonstration and let them draw their own conclusion!</p> Write This \ud83d\udc4d Not This \u274c Change your project\u2019s PHP version by either editing <code>.ddev/config.yaml</code> to set <code>php_version: \"8.2\"</code>, or by running <code>ddev config --php-version=8.2</code>, followed by running <code>ddev restart</code>. It\u2019s easy to change your project\u2019s PHP version! Just edit your project\u2019s <code>.ddev/config.yaml</code> to set <code>php_version: \"8.2\"</code>, or run <code>ddev config --php-version=8.2</code>, followed by running <code>ddev restart</code>.","boost":0.5},{"location":"developers/writing-style-guide/#writing-style","title":"Writing Style","text":"<p>DDEV\u2019s documentation should be consistent throughout, which benefits both the reader taking in information and the contributor looking for examples to follow.</p> <p>Read It Aloud</p> <p>If you get tripped up speaking your words out loud, someone else will get tripped up reading them, too.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-correct-capitalization-and-punctuation","title":"Use Correct Capitalization and Punctuation","text":"<p>Write with appropriate grammar and style for U.S. English, including capitalization and punctuation. Variations in spelling and writing style make the documentation harder to read, and we want to be respectful of the reader\u2019s time and attention.</p> Write This \ud83d\udc4d Not This \u274c Let\u2019s not capitalize random words for emphasis. Let\u2019s not Capitalize random Words for emphasis. That organization uses a lovely American color. That organisation uses a lovely American colour. We can use \u201ccurly quotes\u201d now that we\u2019re post-typewriter. We can use \u201ccurly quotes\u201d now that we\u2019re post-typewriter.","boost":0.5},{"location":"developers/writing-style-guide/#run-commands","title":"\u201cRun\u201d Commands","text":"<p>We \u201crun\u201d commands. We don\u2019t \u201cdo\u201d them, and the command itself is not a verb. Whenever possible, reinforce that a given thing in backticks is intended as a console command by using the word \u201crun\u201d before it.</p> Write This \ud83d\udc4d Not This \u274c Run <code>ddev config</code> to set up your project. Do <code>ddev config</code> to set up your project.You can <code>ddev config</code> to set up your project. If you get stuck, run <code>ddev restart</code>. If you get stuck, just <code>ddev restart</code>.","boost":0.5},{"location":"developers/writing-style-guide/#use-active-third-person","title":"Use Active Third Person","text":"<p>Avoid impersonal language featuring unknown individuals or shadowy organizations. \u201cIt is recommended,\u201d for example, could be a warmer \u201cwe recommend\u201d or \u201cLaravel users recommend\u201d.</p> <p>Write on behalf of the community and not yourself\u2014use \u201cwe\u201d and not \u201cI\u201d.</p> Write This \ud83d\udc4d Not This \u274c We recommend Colima for the best performance. It is recommended for performance that you use Colima. Some prefer Redis for runtime caches. I like using Redis for runtime caches.","boost":0.5},{"location":"developers/writing-style-guide/#write-once-and-link","title":"Write Once and Link","text":"<p>Try to keep from repeating yourself in the documentation. Instead, write carefully and link to that well-crafted specimen, whether it\u2019s across the page or off to another section. This has two benefits:</p> <ol> <li>Easier maintenance with less chance of redundant information becoming stale.</li> <li>Subtle reinforcement of documentation structure that helps the reader learn where to find answers, rather than answering the same thing in different places.</li> </ol>","boost":0.5},{"location":"developers/writing-style-guide/#mind-your-context","title":"Mind Your Context","text":"<p>It\u2019s easy to get lost in documentation; don\u2019t assume the reader is always following your words. Take care to bring the reader with you, especially if there are steps that involve different applications or distinct areas of concern.</p> Write This \ud83d\udc4d Not This \u274c 1. In Docker Desktop, go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB.2. From your terminal, run <code>ddev restart</code>.3. In your text editor, open <code>.ddev/config.yaml</code> and set <code>php_version: \"8.1\"</code>. 1. Go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB.2. Run <code>ddev restart</code>.3. Set <code>php_version: \"8.1\"</code>. Once you\u2019ve installed a Docker provider, you\u2019re ready to install DDEV! Docker or an alternative is required before anything will work with DDEV. This is pretty easy on most environments; see the Docker Installation page to help sort out the details.","boost":0.5},{"location":"developers/writing-style-guide/#avoid-starting-with-asides","title":"Avoid Starting with Asides","text":"<p>The beginning of a page or section should introduce what the rest of the content is about. Try to avoid starting with asides or reminders that get in the way of this initial statement of purpose.</p> <p>Never tell the reader to \u201cremember\u201d something they may not have been introduced to yet.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-tips","title":"Use Tips","text":"<p>Avoid using \u201cNote:\u201d to signal an aside. Most sentences work fine without it, and for discreet notes we have <code>!!!note</code>, <code>!!!tip</code>, and <code>!!!warning</code> conventions.</p> <p>Use one of these callouts for text that can stand on its own and be skipped, or for an urgent message that needs greater visual emphasis.</p> <p>Summarize the callout\u2019s contents with a succinct heading whenever you can, so anyone skimming can know whether to read the callout\u2019s supporting text.</p> <pre><code>!!!note \"This is a note.\"\n    Use it for extraneous asides.\n\n!!!tip \"This is a tip.\"\n    Use it for helpful asides.\n\n!!!warning \"This is a warning.\"\n    Use it for asides that should have urgent emphasis.\n\n!!!note\n    This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is added automatically.)\n</code></pre> <p>This is a note.</p> <p>Use it for extraneous asides.</p> <p>This is a tip.</p> <p>Use it for helpful asides.</p> <p>This is a warning.</p> <p>Use it for asides that should have urgent emphasis.</p> <p>Note</p> <p>This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is automatically added.)</p> <p>Note: we want to avoid callouts like this sentence, that should either be tips or flow naturally with their surrounding text. If any documentation shouldn\u2019t be noted by the reader, get rid of it.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-correct-proper-nouns","title":"Use Correct Proper Nouns","text":"","boost":0.5},{"location":"developers/writing-style-guide/#ddev-ddev","title":"DDEV != <code>ddev</code>","text":"<p>DDEV is a product and <code>ddev</code> is a binary or console command. DDEV should always be uppercase, and <code>ddev</code> should always be in backticks. DDEV-Local and DDEV-Live are former product incarnations that shouldn\u2019t be found in modern documentation.</p> Write This \ud83d\udc4d Not This \u274c DDEV is wonderful! Ddev is wonderful!ddev is wonderful!DDEV-Local is wonderful! Run <code>ddev</code>. Run ddev.Run DDEV.","boost":0.5},{"location":"developers/writing-style-guide/#products-organizations-and-protocols","title":"Products, Organizations, and Protocols","text":"<p>When in doubt, honor whatever name a product or organization uses in its official materials. Use backticks to differentiate between a product and command, like DDEV vs. <code>ddev</code>.</p> Write This \ud83d\udc4d Not This \u274c AMD64, ARM64, and Apple Silicon amd64, arm64, M1 Macs Apache apache Bash or <code>bash</code> bash Blackfire blackfire, Blackfire.io Chocolatey chocolatey Colima or <code>colima</code> colima Composer or <code>composer</code> composer Docker or <code>docker</code> docker Drush or <code>drush</code> drush Git git Git Bash git bash GitHub or <code>github</code> Github GoLand Goland Google google Homebrew homebrew HTTP, HTTPS, SSH, <code>http</code>, <code>https</code>, <code>ssh</code> http, https, ssh IPv4, IPv6 IPV4, IPV6, ipv4, ipv6 Linux linux nginx or <code>nginx</code> Nginx, NGINX Node.js or <code>node</code> Node, node NFS nfs Pantheon pantheon, Pantheon.io PHP or <code>php</code> php PhpStorm PHPStorm, PHPstorm, Phpstorm PHPUnit or <code>phpunit</code> phpunit, PHPunit PostgreSQL Postgres Terminus terminus Windows windows Xdebug XDebug, xDebug","boost":0.5},{"location":"developers/writing-style-guide/#quote-copied-text","title":"Quote Copied Text","text":"<p>If you\u2019re quoting a human being or a message lifted verbatim from some other source (outside a fenced code block), make sure it ends up in a <code>&lt;blockquote&gt;</code> element:</p> <pre><code>&gt; Error: your quote style should not always be in a fenced block.\n</code></pre> <p>Error: your quote style should not always be in a fenced block.</p>","boost":0.5},{"location":"developers/writing-style-guide/#other-recommendations","title":"Other Recommendations","text":"<p>One-off tips that don\u2019t fit nicely into any of the sections above:</p> <ul> <li>Pluralize \u201cCMS\u201d as \u201cCMSes\u201d, not \u201cCMSs\u201d.</li> <li>Use all-caps references for file types like JSON, YAML and CSS.</li> <li>Wrap file extensions in backticks like <code>.json</code>, <code>.yaml</code>, and <code>.css</code>.</li> <li>Wrap references to files, directories, images and commands in backticks.</li> <li>Use Title Case for headings wherever it makes sense.</li> <li>Link to related services and topics where convenient\u2014usually first use on a given page.</li> <li>Use <code>&lt;kbd&gt;</code> elements for representing literal keystrokes.</li> <li>Use sequential numbers for numbered lists in the source Markdown, regardless of how they\u2019re eventually rendered.</li> <li>Try to maintain parallel format for list items.</li> </ul> Write This \ud83d\udc4d Not This \u274c web server webserver add-on addon JSON, YAML, CSS json, Yaml, css <code>.json</code>, <code>.yaml</code>, <code>.css</code>, <code>~/.ddev</code> .json, .yaml, .css, ~/.ddev CTRL + C control-c, control + c, ctrl+c Menu Item \u2192 Another Menu Item \u2192 Setting Menu Item&gt;Another Menu Item&gt;SettingMenu Item -&gt; Another Menu Item -&gt; Setting several CMSes several CMSs, several CMS\u2019s How to Reticulate Splines How to reticulate splines 1. Run <code>command</code>.2. Edit file.3. Restart computer. 1. <code>command</code>2. Edit file.3. Additionally, restart your computer.","boost":0.5},{"location":"users/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"users/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"users/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not only for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"users/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"users/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"users/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at <code>support</code>(at)<code>ddev.com</code>. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"users/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"users/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"users/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"users/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"users/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"users/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"users/project/","title":"Starting a Project","text":"<p>Once DDEV is installed, setting up a new project should be quick:</p> <ol> <li>Clone or create the code for your project.</li> <li><code>cd</code> into the project directory and run <code>ddev config</code> to initialize a DDEV project.</li> <li>Run <code>ddev start</code> to spin up the project.</li> <li>Run <code>ddev launch</code> to open your project in a browser.</li> </ol> <p>DDEV can automatically detect your project type and docroot. If it guessed wrong or there\u2019s something else you want to change, use the <code>ddev config</code> command or update project options by editing <code>.ddev/config.yaml</code>. You can see the result by running <code>ddev describe</code>.</p> <p>What is the <code>php</code> project type?</p> <p>A <code>php</code> project type is the most general, ready for whatever modern PHP or static HTML/JS project you might be working on. It\u2019s as full-featured as other CMS-specific options, without any assumptions about your configuration or presets. (You can use this with a CMS or framework fine!)</p> <p>If you need to configure your app to connect to the database, the hostname, username, password, and database name are all <code>db</code>.</p> <p>While you\u2019re getting your bearings, use <code>ddev describe</code> to get project details, and <code>ddev help</code> to investigate commands.</p> <p>Next, you may want to run <code>ddev composer install</code>, import a database, or load user-managed files.</p> <p>If you\u2019re new to DDEV, check out Using the <code>ddev</code> Command for an overview of what\u2019s available.</p>"},{"location":"users/quickstart/","title":"CMS Quickstarts","text":"<p>DDEV is ready to go with generic project types for PHP frameworks, and more specific project types for working with popular platforms and CMSes. To learn more about how to manage projects in DDEV visit Managing Projects.</p> <p>Before proceeding, make sure your installation of DDEV is up to date. In a new and empty project folder, using your favorite shell, run the following commands:</p>"},{"location":"users/quickstart/#backdrop","title":"Backdrop","text":"<p>You can start a new Backdrop project or configure an existing one.</p> New projectsExisting projects <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-backdrop-site &amp;&amp; cd my-backdrop-site\nddev config --project-type=backdrop\n# Add the official Bee CLI add-on\nddev add-on get backdrop-ops/ddev-backdrop-bee\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Download Backdrop core and create admin user:</p> <pre><code># Download Backdrop core\nddev bee download-core\n# Create admin user\nddev bee si --username=admin --password=Password123 --db-name=db --db-user=db --db-pass=db --db-host=db --auto\n</code></pre> <p>Launch the site:</p> <pre><code># Login using `admin` user and `Password123` password\nddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-backdrop.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-backdrop-site &amp;&amp; cd my-backdrop-site\nddev config --project-type=backdrop\nddev add-on get backdrop-ops/ddev-backdrop-bee\nddev start -y\nddev bee download-core\nddev bee si --username=admin --password=Password123 --db-name=db --db-user=db --db-pass=db --db-host=db --auto\nddev launch\nEOF\nchmod +x setup-backdrop.sh\n./setup-backdrop.sh\n</code></pre> <p>You can start using DDEV with an existing project, too\u2014but make sure you have a database backup handy!</p> <p>Create project directory and clone your repository:</p> <pre><code>mkdir my-backdrop-site &amp;&amp; cd my-backdrop-site\ngit clone https://github.com/ddev/test-backdrop.git .\n</code></pre> <p>Configure DDEV:</p> <pre><code>ddev config --project-type=backdrop\n</code></pre> <p>Add the official Bee CLI add-on:</p> <pre><code>ddev add-on get backdrop-ops/ddev-backdrop-bee\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Import database and files backups:</p> <pre><code>ddev import-db --file=/path/to/db.sql.gz\nddev import-files --source=/path/to/files.tar.gz\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-backdrop-existing.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-backdrop-site &amp;&amp; cd my-backdrop-site\ngit clone https://github.com/ddev/test-backdrop.git .\nddev config --project-type=backdrop\nddev add-on get backdrop-ops/ddev-backdrop-bee\nddev start -y\nddev import-db --file=/path/to/db.sql.gz\nddev import-files --source=/path/to/files.tar.gz\nddev launch\nEOF\nchmod +x setup-backdrop-existing.sh\n./setup-backdrop-existing.sh\n</code></pre>"},{"location":"users/quickstart/#cakephp","title":"CakePHP","text":"<p>You can start a new CakePHP project or configure an existing one.</p> <p>The CakePHP project type can be used with any CakePHP project &gt;= 3.x, but it has been fully tested with CakePHP 5.x. DDEV automatically creates the <code>.env</code> file with the database information, email transport configuration and a random salt. If <code>.env</code> file already exists, <code>.env.ddev</code> will be created, so you can take any variable and put it into your <code>.env</code> file.</p> <p>Please note that you will need to change the PHP version to 7.4 to be able to work with CakePHP 3.x.</p> ComposerGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-cakephp-site &amp;&amp; cd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install CakePHP via Composer:</p> <pre><code>ddev composer create-project --prefer-dist --no-interaction cakephp/app:~5.0\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-cakephp.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-cakephp-site &amp;&amp; cd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\nddev start -y\nddev composer create-project --prefer-dist --no-interaction cakephp/app:~5.0\nddev launch\nEOF\nchmod +x setup-cakephp.sh\n./setup-cakephp.sh\n</code></pre> <p>Clone the repository and configure DDEV:</p> <pre><code>git clone &lt;my-cakephp-repo&gt; my-cakephp-site\ncd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install dependencies and launch:</p> <pre><code>ddev composer install\nddev cake\nddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-cakephp-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\ngit clone &lt;my-cakephp-repo&gt; my-cakephp-site\ncd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\nddev start -y\nddev composer install\nddev cake\nddev launch\nEOF\nchmod +x setup-cakephp-git.sh\n./setup-cakephp-git.sh\n</code></pre>"},{"location":"users/quickstart/#civicrm-standalone","title":"CiviCRM (Standalone)","text":"<p>CiviCRM Standalone allows running CiviCRM without a CMS. Visit Install CiviCRM (Standalone) for more installation details.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-civicrm-site &amp;&amp; cd my-civicrm-site\nddev config --project-type=php --composer-root=core --upload-dirs=public/media\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Download and extract CiviCRM:</p> <pre><code>ddev exec \"curl -LsS https://download.civicrm.org/latest/civicrm-STABLE-standalone.tar.gz -o /tmp/civicrm-standalone.tar.gz\"\nddev exec \"tar --strip-components=1 -xzf /tmp/civicrm-standalone.tar.gz\"\nddev composer require civicrm/cli-tools --no-scripts\n</code></pre> <p>Install CiviCRM (or use <code>ddev launch</code> to install manually):</p> <pre><code># You can install CiviCRM manually in your browser using `ddev launch`\n# and selecting `db` for the server and `db` for database/username/password\n# or do the same automatically using the command below:\n# The parameter `-m loadGenerated=1` includes sample data\nddev exec cv core:install \\\n    --cms-base-url='$DDEV_PRIMARY_URL' \\\n    --db=mysql://db:db@db/db \\\n    -m loadGenerated=1 \\\n    -m extras.adminUser=admin \\\n    -m extras.adminPass=admin \\\n    -m extras.adminEmail=admin@example.com\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-civicrm.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-civicrm-site &amp;&amp; cd my-civicrm-site\nddev config --project-type=php --composer-root=core --upload-dirs=public/media\nddev start -y\nddev exec \"curl -LsS https://download.civicrm.org/latest/civicrm-STABLE-standalone.tar.gz -o /tmp/civicrm-standalone.tar.gz\"\nddev exec \"tar --strip-components=1 -xzf /tmp/civicrm-standalone.tar.gz\"\nddev composer require civicrm/cli-tools --no-scripts\nddev exec cv core:install \\\n    --cms-base-url='$DDEV_PRIMARY_URL' \\\n    --db=mysql://db:db@db/db \\\n    -m loadGenerated=1 \\\n    -m extras.adminUser=admin \\\n    -m extras.adminPass=admin \\\n    -m extras.adminEmail=admin@example.com\nddev launch\nEOF\nchmod +x setup-civicrm.sh\n./setup-civicrm.sh\n</code></pre>"},{"location":"users/quickstart/#contao","title":"Contao","text":"<p>Further information on the DDEV procedure can also be found in the Contao documentation.</p> ComposerContao ManagerDemo Website <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-contao-site &amp;&amp; cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\n</code></pre> <p>Install Contao via Composer (this may take a minute):</p> <pre><code>ddev composer create-project contao/managed-edition:5.3\n</code></pre> <p>Configure database and mailer settings:</p> <pre><code>ddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\n</code></pre> <p>Create the database:</p> <pre><code>ddev exec contao-console contao:migrate --no-interaction\n</code></pre> <p>Create backend user:</p> <pre><code>ddev exec contao-console contao:user:create --username=admin --name=Administrator --email=admin@example.com --language=en --password=Password123 --admin\n</code></pre> <p>Launch the administration area:</p> <pre><code>ddev launch contao\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-contao.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-contao-site &amp;&amp; cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\nddev composer create-project contao/managed-edition:5.3\nddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\nddev exec contao-console contao:migrate --no-interaction\nddev exec contao-console contao:user:create --username=admin --name=Administrator --email=admin@example.com --language=en --password=Password123 --admin\nddev launch contao\nEOF\nchmod +x setup-contao.sh\n./setup-contao.sh\n</code></pre> <p>Like most PHP projects, Contao could be installed and updated with Composer. The Contao Manager is a tool that provides a graphical user interface to manage a Contao installation.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-contao-site &amp;&amp; cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\n</code></pre> <p>Configure database and mailer settings:</p> <pre><code>ddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Download the Contao Manager:</p> <pre><code>ddev exec \"wget -O public/contao-manager.phar.php https://download.contao.org/contao-manager/stable/contao-manager.phar\"\n</code></pre> <p>Launch the Contao Manager and follow the setup wizard:</p> <pre><code>ddev launch contao-manager.phar.php\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-contao-manager.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-contao-site &amp;&amp; cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\nddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\nddev start -y\nddev exec \"wget -O public/contao-manager.phar.php https://download.contao.org/contao-manager/stable/contao-manager.phar\"\nddev launch contao-manager.phar.php\nEOF\nchmod +x setup-contao-manager.sh\n./setup-contao-manager.sh\n</code></pre> <p>The Contao demo website is maintained for the currently supported Contao versions and can be optionally installed. Via the Contao Manager you can select this option during the first installation.</p>"},{"location":"users/quickstart/#craft-cms","title":"Craft CMS","text":"<p>Start a new Craft CMS project or retrofit an existing one.</p> <p>DDEV injects a number of special environment variables into the container (via <code>.ddev/.env.web</code>) that automatically configure Craft\u2019s database connection and the project\u2019s primary site URL. You may opt out of this behavior with the <code>disable_settings_management</code> setting.</p> <p>Compatibility with Craft CMS 3</p> <p>The <code>craftcms</code> project works best with configuration features that became available in Craft CMS 4.x. If you are using Craft CMS 3.x or earlier, you may want to use the <code>php</code> project type and explicitly define database connection details via Craft\u2019s <code>db.php</code>.</p> New projectsExisting projects <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-craft-site &amp;&amp; cd my-craft-site\nddev config --project-type=craftcms --docroot=web\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Scaffold a new project with Composer:</p> <pre><code>ddev composer create-project craftcms/craft\n</code></pre> <p>Craft\u2019s setup wizard will start automatically!</p> <p>Third-party starter projects can be substituted for <code>craftcms/craft</code> when running <code>ddev composer create-project</code>.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-craft.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-craft-site &amp;&amp; cd my-craft-site\nddev config --project-type=craftcms --docroot=web\nddev start -y\nddev composer create-project craftcms/craft\nEOF\nchmod +x setup-craft.sh\n./setup-craft.sh\n</code></pre> <p>You can start using DDEV with an existing Craft project, too. All you need is the codebase and a database backup!</p> <p>Clone the repository (or navigate to a local project directory):</p> <pre><code>git clone https://github.com/example/example-site my-craft-site\ncd my-craft-site\n</code></pre> <p>Configure DDEV:</p> <pre><code>ddev config --project-type=craftcms --docroot=web\n</code></pre> <p>Start DDEV and install Composer packages:</p> <pre><code>ddev start\nddev composer install\n</code></pre> <p>Import database backup and launch:</p> <pre><code>ddev craft db/restore /path/to/db.sql.gz\nddev launch\n</code></pre> <p>Craft CMS projects use MySQL 8.0, by default. You can override this setting (and the PHP version) during setup with <code>config</code> command flags or after setup via the configuration files.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-craft-existing.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\ngit clone https://github.com/example/example-site my-craft-site\ncd my-craft-site\nddev config --project-type=craftcms --docroot=web\nddev start -y\nddev composer install\nddev craft db/restore /path/to/db.sql.gz\nddev launch\nEOF\nchmod +x setup-craft-existing.sh\n./setup-craft-existing.sh\n</code></pre>"},{"location":"users/quickstart/#running-craft-in-a-subdirectory","title":"Running Craft in a Subdirectory","text":"<p>Set <code>composer_root</code> to the subdirectory where Craft is installed. For example, <code>ddev config --composer-root=app</code>.</p> <p>Installing Craft</p> <p>Read more about installing Craft in the official documentation.</p>"},{"location":"users/quickstart/#drupal","title":"Drupal","text":"Drupal 11Drupal CMSDrupal 10Drupal 6/7Git Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Drupal via Composer:</p> <pre><code>ddev composer create-project \"drupal/recommended-project:^11\"\nddev composer require drush/drush\n</code></pre> <p>Run Drupal installation and launch:</p> <pre><code>ddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\n# or automatically log in with:\nddev launch $(ddev drush uli)\n</code></pre> <p>Read more about: Drupal Core &amp; Documentation</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-drupal11.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\nddev start -y\nddev composer create-project \"drupal/recommended-project:^11\"\nddev composer require drush/drush\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\nEOF\nchmod +x setup-drupal11.sh\n./setup-drupal11.sh\n</code></pre> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Drupal CMS via Composer:</p> <pre><code>ddev composer create-project drupal/cms\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> <p>Read more about: Drupal CMS &amp; Documentation</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-drupal-cms.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\nddev start -y\nddev composer create-project drupal/cms\nddev launch\nEOF\nchmod +x setup-drupal-cms.sh\n./setup-drupal-cms.sh\n</code></pre> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal10 --docroot=web\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Drupal via Composer:</p> <pre><code>ddev composer create-project \"drupal/recommended-project:^10\"\nddev composer require drush/drush\n</code></pre> <p>Run Drupal installation and launch:</p> <pre><code>ddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\n# or automatically log in with:\nddev launch $(ddev drush uli)\n</code></pre> <p>Read more about: Drupal Core &amp; Documentation</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-drupal10.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-drupal-site &amp;&amp; cd my-drupal-site\nddev config --project-type=drupal10 --docroot=web\nddev start -y\nddev composer create-project \"drupal/recommended-project:^10\"\nddev composer require drush/drush\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\nEOF\nchmod +x setup-drupal10.sh\n./setup-drupal10.sh\n</code></pre> <p>Clone your Drupal repository:</p> <pre><code>git clone https://github.com/example/my-drupal-site\ncd my-drupal-site\n</code></pre> <p>Configure DDEV (follow prompts):</p> <pre><code>ddev config\n</code></pre> <p>Start DDEV and launch:</p> <pre><code>ddev start\nddev launch /install.php\n</code></pre> <p>Drupal 7 doesn\u2019t know how to redirect from the front page to <code>/install.php</code> if the database is not set up but the settings files are set up, so launching with <code>/install.php</code> gets you started with an installation. You can also run <code>drush site-install</code>, then <code>ddev exec drush site-install --yes</code>.</p> <p>See Importing a Database.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-drupal67.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\ngit clone https://github.com/example/my-drupal-site\ncd my-drupal-site\nddev config\nddev start -y\nddev launch /install.php\nEOF\nchmod +x setup-drupal67.sh\n./setup-drupal67.sh\n</code></pre> <p>Clone your Drupal repository:</p> <pre><code>PROJECT_GIT_URL=https://github.com/ddev/test-drupal11.git\ngit clone ${PROJECT_GIT_URL} my-drupal-site\ncd my-drupal-site\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --project-type=drupal11 --docroot=web\nddev start\n</code></pre> <p>Install dependencies and set up Drupal:</p> <pre><code>ddev composer install\nddev drush site:install --account-name=admin --account-pass=admin -y\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> <p>Read more about: Drupal Core &amp; Documentation</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-drupal-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nPROJECT_GIT_URL=https://github.com/ddev/test-drupal11.git\ngit clone ${PROJECT_GIT_URL} my-drupal-site\ncd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\nddev start -y\nddev composer install\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\nEOF\nchmod +x setup-drupal-git.sh\n./setup-drupal-git.sh\n</code></pre>"},{"location":"users/quickstart/#expressionengine","title":"ExpressionEngine","text":"ExpressionEngine ZIP File DownloadExpressionEngine Git Checkout <p>Create the project directory:</p> <pre><code>mkdir my-ee-site &amp;&amp; cd my-ee-site\n</code></pre> <p>Download and extract the latest ExpressionEngine release:</p> <pre><code>curl -o ee.zip -L $(curl -sL https://api.github.com/repos/ExpressionEngine/ExpressionEngine/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^ExpressionEngine.*\\\\.zip$\")))[0].browser_download_url')\nunzip ee.zip &amp;&amp; rm -f ee.zip\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --database=mysql:8.0\nddev start\n</code></pre> <p>Launch the installation wizard:</p> <pre><code>ddev launch /admin.php\n</code></pre> <p>When the installation wizard prompts for database settings, enter <code>db</code> for the DB Server Address, DB Name, DB Username, and DB Password.</p> <p>Visit your site.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-ee.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-ee-site &amp;&amp; cd my-ee-site\ncurl -o ee.zip -L $(curl -sL https://api.github.com/repos/ExpressionEngine/ExpressionEngine/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^ExpressionEngine.*\\\\.zip$\")))[0].browser_download_url')\nunzip ee.zip &amp;&amp; rm -f ee.zip\nddev config --database=mysql:8.0\nddev start -y\nddev launch /admin.php\nEOF\nchmod +x setup-ee.sh\n./setup-ee.sh\n</code></pre> <p>Follow these steps based on the ExpressionEngine Git Repository README.md:</p> <p>Create the project directory and clone the repository:</p> <pre><code>mkdir my-ee-site &amp;&amp; cd my-ee-site\ngit clone https://github.com/ExpressionEngine/ExpressionEngine .\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --database=mysql:8.0\nddev start\n</code></pre> <p>Install Composer dependencies and prepare installation:</p> <pre><code>ddev composer install\ntouch system/user/config/config.php\necho \"EE_INSTALL_MODE=TRUE\" &gt;.env.php\n</code></pre> <p>Launch the installation wizard:</p> <pre><code>ddev launch /admin.php\n</code></pre> <p>When the installation wizard prompts for database settings, enter <code>db</code> for the DB Server Address, DB Name, DB Username, and DB Password.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-ee-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-ee-site &amp;&amp; cd my-ee-site\ngit clone https://github.com/ExpressionEngine/ExpressionEngine .\nddev config --database=mysql:8.0\nddev start -y\nddev composer install\ntouch system/user/config/config.php\necho \"EE_INSTALL_MODE=TRUE\" &gt;.env.php\nddev launch /admin.php\nEOF\nchmod +x setup-ee-git.sh\n./setup-ee-git.sh\n</code></pre>"},{"location":"users/quickstart/#generic-frankenphp","title":"Generic (FrankenPHP)","text":"<p>This example of the <code>webserver_type: generic</code> puts FrankenPHP into DDEV as an experimental first step in using the innovative Golang-based PHP interpreter. It is in its infancy and may someday become a full-fledged <code>webserver_type</code>. Your feedback and improvements are welcome.</p> <p>This particular example uses a <code>drupal11</code> project with FrankenPHP, which then uses its own PHP 8.4 interpreter. The normal DDEV database container is used for database access.</p> <p>In this example, inside the web container the normal <code>php</code> CLI use used for CLI activities. Xdebug (and <code>ddev xdebug</code>) do not yet work.</p> <p>The <code>generic</code> <code>webserver_type</code> is used here, so the <code>ddev-webserver</code> does not start the <code>nginx</code> or <code>php-fpm</code> daemons, and the <code>frankenphp</code> process does all the work.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>export FRANKENPHP_SITENAME=my-frankenphp-site\nmkdir ${FRANKENPHP_SITENAME} &amp;&amp; cd ${FRANKENPHP_SITENAME}\nddev config --project-type=drupal11 --webserver-type=generic --docroot=web --php-version=8.4\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Create FrankenPHP configuration:</p> <pre><code>cat &lt;&lt;'EOF' &gt; .ddev/config.frankenphp.yaml\nweb_extra_daemons:\n    - name: \"frankenphp\"\n      command: \"frankenphp php-server --listen=0.0.0.0:80 --root=\\\"/var/www/html/${DDEV_DOCROOT:-}\\\" -v -a\"\n      directory: /var/www/html\nweb_extra_exposed_ports:\n    - name: \"frankenphp\"\n      container_port: 80\n      http_port: 80\n      https_port: 443\nEOF\n</code></pre> <p>Create Dockerfile for FrankenPHP:</p> <pre><code>cat &lt;&lt;'DOCKERFILEEND' &gt;.ddev/web-build/Dockerfile.frankenphp\nRUN curl -s https://frankenphp.dev/install.sh | sh\nRUN mv frankenphp /usr/local/bin/\nRUN mkdir -p /usr/local/etc &amp;&amp; ln -s /etc/php/${DDEV_PHP_VERSION}/fpm /usr/local/etc/php\nDOCKERFILEEND\n</code></pre> <p>Install Drupal and configure:</p> <pre><code>ddev composer create-project drupal/recommended-project\nddev composer require drush/drush\nddev restart\nddev drush site:install demo_umami --account-name=admin --account-pass=admin -y\n</code></pre> <p>Launch your site:</p> <pre><code>ddev launch\n# or automatically log in with:\nddev launch $(ddev drush uli)\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-frankenphp.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nexport FRANKENPHP_SITENAME=my-frankenphp-site\nmkdir ${FRANKENPHP_SITENAME} &amp;&amp; cd ${FRANKENPHP_SITENAME}\nddev config --project-type=drupal11 --webserver-type=generic --docroot=web --php-version=8.4\nddev start -y\n\ncat &lt;&lt;'INNEREOF' &gt; .ddev/config.frankenphp.yaml\nweb_extra_daemons:\n    - name: \"frankenphp\"\n      command: \"frankenphp php-server --listen=0.0.0.0:80 --root=\\\"/var/www/html/${DDEV_DOCROOT:-}\\\" -v -a\"\n      directory: /var/www/html\nweb_extra_exposed_ports:\n    - name: \"frankenphp\"\n      container_port: 80\n      http_port: 80\n      https_port: 443\nINNEREOF\n\ncat &lt;&lt;'INNEREOF' &gt;.ddev/web-build/Dockerfile.frankenphp\nRUN curl -s https://frankenphp.dev/install.sh | sh\nRUN mv frankenphp /usr/local/bin/\nRUN mkdir -p /usr/local/etc &amp;&amp; ln -s /etc/php/${DDEV_PHP_VERSION}/fpm /usr/local/etc/php\nINNEREOF\n\nddev composer create-project drupal/recommended-project\nddev composer require drush/drush\nddev restart\nddev drush site:install demo_umami --account-name=admin --account-pass=admin -y\nddev launch\nEOF\nchmod +x setup-frankenphp.sh\n./setup-frankenphp.sh\n</code></pre>"},{"location":"users/quickstart/#grav","title":"Grav","text":"ComposerGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-grav-site &amp;&amp; cd my-grav-site\nddev config --omit-containers=db\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Grav via Composer:</p> <pre><code>ddev composer create-project getgrav/grav\n</code></pre> <p>Install the admin plugin and launch:</p> <pre><code>ddev exec gpm install admin -y\nddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-grav.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-grav-site &amp;&amp; cd my-grav-site\nddev config --omit-containers=db\nddev start -y\nddev composer create-project getgrav/grav\nddev exec gpm install admin -y\nddev launch\nEOF\nchmod +x setup-grav.sh\n./setup-grav.sh\n</code></pre> <p>Create the project directory and clone Grav:</p> <pre><code>mkdir my-grav-site &amp;&amp; cd my-grav-site\ngit clone -b master https://github.com/getgrav/grav.git .\n</code></pre> <p>Configure DDEV:</p> <pre><code>ddev config --omit-containers=db\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install dependencies and initialize Grav:</p> <pre><code>ddev composer install\nddev exec grav install\n</code></pre> <p>Install the admin plugin and launch:</p> <pre><code>ddev exec gpm install admin -y\nddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-grav-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-grav-site &amp;&amp; cd my-grav-site\ngit clone -b master https://github.com/getgrav/grav.git .\nddev config --omit-containers=db\nddev start -y\nddev composer install\nddev exec grav install\nddev exec gpm install admin -y\nddev launch\nEOF\nchmod +x setup-grav-git.sh\n./setup-grav-git.sh\n</code></pre> <p>How to update?</p> <p>Upgrade Grav core:</p> <pre><code>ddev exec gpm selfupgrade -f\n</code></pre> <p>Update plugins and themes:</p> <pre><code>ddev exec gpm update -f\n</code></pre> <p>Visit the Grav Documentation for more information about Grav in general and visit Local Development with DDEV for more details about the usage of Grav with DDEV.</p>"},{"location":"users/quickstart/#ibexa-dxp","title":"Ibexa DXP","text":"<p>Install Ibexa DXP OSS Edition.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-ibexa-site &amp;&amp; cd my-ibexa-site\nddev config --project-type=php --docroot=public --web-environment-add DATABASE_URL=mysql://db:db@db:3306/db\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Ibexa via Composer:</p> <pre><code>ddev composer create-project ibexa/oss-skeleton\n</code></pre> <p>Run Ibexa installation:</p> <pre><code>ddev exec console ibexa:install\nddev exec console ibexa:graphql:generate-schema\n</code></pre> <p>Launch the admin interface:</p> <pre><code>ddev launch /admin/login\n</code></pre> <p>In the web browser, log into your account using <code>admin</code> and <code>publish</code>.</p> <p>Visit Ibexa documentation for more cases.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-ibexa.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-ibexa-site &amp;&amp; cd my-ibexa-site\nddev config --project-type=php --docroot=public --web-environment-add DATABASE_URL=mysql://db:db@db:3306/db\nddev start -y\nddev composer create-project ibexa/oss-skeleton\nddev exec console ibexa:install\nddev exec console ibexa:graphql:generate-schema\nddev launch /admin/login\nEOF\nchmod +x setup-ibexa.sh\n./setup-ibexa.sh\n</code></pre>"},{"location":"users/quickstart/#joomla","title":"Joomla","text":"<p>Create the project directory and download Joomla:</p> <pre><code>mkdir my-joomla-site &amp;&amp; cd my-joomla-site\n# Download the latest version of Joomla! and unzip it.\n# This can be manually downloaded from https://downloads.joomla.org/ or done using curl as here.\ncurl -o joomla.zip -L $(curl -sL https://api.github.com/repos/joomla/joomla-cms/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^Joomla.*Stable-Full_Package\\\\.zip$\")))[0].browser_download_url')\nunzip joomla.zip &amp;&amp; rm -f joomla.zip\n</code></pre> <p>Configure DDEV:</p> <pre><code>ddev config --project-type=php --webserver-type=apache-fpm --upload-dirs=images\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Joomla and launch:</p> <pre><code>ddev php installation/joomla.php install --site-name=\"My Joomla Site\" --admin-user=\"Administrator\" --admin-username=admin --admin-password=AdminAdmin1! --admin-email=admin@example.com --db-type=mysql --db-encryption=0 --db-host=db --db-user=db --db-pass=\"db\" --db-name=db --db-prefix=ddev_ --public-folder=\"\"\nddev launch /administrator\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-joomla.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-joomla-site &amp;&amp; cd my-joomla-site\ncurl -o joomla.zip -L $(curl -sL https://api.github.com/repos/joomla/joomla-cms/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^Joomla.*Stable-Full_Package\\\\.zip$\")))[0].browser_download_url')\nunzip joomla.zip &amp;&amp; rm -f joomla.zip\nddev config --project-type=php --webserver-type=apache-fpm --upload-dirs=images\nddev start -y\nddev php installation/joomla.php install --site-name=\"My Joomla Site\" --admin-user=\"Administrator\" --admin-username=admin --admin-password=AdminAdmin1! --admin-email=admin@example.com --db-type=mysql --db-encryption=0 --db-host=db --db-user=db --db-pass=\"db\" --db-name=db --db-prefix=ddev_ --public-folder=\"\"\nddev launch /administrator\nEOF\nchmod +x setup-joomla.sh\n./setup-joomla.sh\n</code></pre>"},{"location":"users/quickstart/#kirby-cms","title":"Kirby CMS","text":"<p>Start a new Kirby CMS project or use an existing one.</p> New projectsExisting projects <p>Create a new Kirby CMS project from the official Starterkit using DDEV\u2019s <code>composer create-project</code> command:</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-kirby-site &amp;&amp; cd my-kirby-site\nddev config --omit-containers=db --webserver-type=apache-fpm\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install the Kirby Starterkit:</p> <pre><code>ddev composer create-project getkirby/starterkit\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-kirby.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-kirby-site &amp;&amp; cd my-kirby-site\nddev config --omit-containers=db --webserver-type=apache-fpm\nddev start -y\nddev composer create-project getkirby/starterkit\nddev launch\nEOF\nchmod +x setup-kirby.sh\n./setup-kirby.sh\n</code></pre> <p>You can start using DDEV with an existing project as well:</p> <p>Navigate to your existing project directory:</p> <pre><code>cd my-kirby-site\n</code></pre> <p>Configure DDEV:</p> <pre><code>ddev config --omit-containers=db --webserver-type=apache-fpm\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-kirby-existing.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\ncd my-kirby-site\nddev config --omit-containers=db --webserver-type=apache-fpm\nddev start -y\nddev launch\nEOF\nchmod +x setup-kirby-existing.sh\n./setup-kirby-existing.sh\n</code></pre> <p>Installing Kirby</p> <p>Read more about developing your Kirby project with DDEV in our extensive DDEV guide.</p>"},{"location":"users/quickstart/#laravel","title":"Laravel","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> <p>The Laravel project type can be used for StarterKits, Laravel Livewire and others, as it is used with basic Laravel. DDEV automatically updates or creates the <code>.env</code> file with the database information.</p> ComposerComposer (SQLite)Laravel InstallerGit Clone <p>Laravel defaults to SQLite, but we use MariaDB to better mimic a production environment:</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Laravel via Composer:</p> <pre><code>ddev composer create-project \"laravel/laravel:^12\"\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-laravel.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public\nddev start -y\nddev composer create-project \"laravel/laravel:^12\"\nddev launch\nEOF\nchmod +x setup-laravel.sh\n./setup-laravel.sh\n</code></pre> <p>To use the SQLite configuration provided by Laravel:</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Laravel via Composer:</p> <pre><code>ddev composer create-project \"laravel/laravel:^12\"\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-laravel-sqlite.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\nddev start -y\nddev composer create-project \"laravel/laravel:^12\"\nddev launch\nEOF\nchmod +x setup-laravel-sqlite.sh\n./setup-laravel-sqlite.sh\n</code></pre> <p>To switch an existing Laravel project to SQLite:</p> <p>Configure for SQLite and restart:</p> <pre><code>ddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\nddev restart\n</code></pre> <p>Run post-install scripts:</p> <pre><code>ddev composer run-script post-root-package-install\nddev dotenv set .env --db-connection=sqlite\nddev composer run-script post-create-project-cmd\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; switch-laravel-sqlite.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\nddev restart\nddev composer run-script post-root-package-install\nddev dotenv set .env --db-connection=sqlite\nddev composer run-script post-create-project-cmd\nddev launch\nEOF\nchmod +x switch-laravel-sqlite.sh\n./switch-laravel-sqlite.sh\n</code></pre> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public\n# For SQLite instead, use:\n# ddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\n</code></pre> <p>Create Dockerfile to add Laravel installer:</p> <pre><code>cat &lt;&lt;'DOCKERFILEEND' &gt;.ddev/web-build/Dockerfile.laravel\nARG COMPOSER_HOME=/usr/local/composer\nRUN composer global require laravel/installer\nRUN ln -s $COMPOSER_HOME/vendor/bin/laravel /usr/local/bin/laravel\nDOCKERFILEEND\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Run Laravel installer (follow prompts and select starter kit):</p> <pre><code>ddev exec laravel new temp --database=sqlite\n# SQLite is used here as other database types would fail due to\n# the .env file not being ready, which DDEV will fix on 'ddev restart'\n</code></pre> <p>Move files and clean up:</p> <pre><code>ddev exec 'rsync -rltgopD temp/ ./ &amp;&amp; rm -rf temp'\nrm -f .ddev/web-build/Dockerfile.laravel .env\n</code></pre> <p>Restart and finalize:</p> <pre><code>ddev restart\nddev composer run-script post-root-package-install\nddev composer run-script post-create-project-cmd\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-laravel-installer.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-laravel-site &amp;&amp; cd my-laravel-site\nddev config --project-type=laravel --docroot=public\n\ncat &lt;&lt;'INNEREOF' &gt;.ddev/web-build/Dockerfile.laravel\nARG COMPOSER_HOME=/usr/local/composer\nRUN composer global require laravel/installer\nRUN ln -s $COMPOSER_HOME/vendor/bin/laravel /usr/local/bin/laravel\nINNEREOF\n\nddev start -y\nddev exec laravel new temp --database=sqlite\nddev exec 'rsync -rltgopD temp/ ./ &amp;&amp; rm -rf temp'\nrm -f .ddev/web-build/Dockerfile.laravel .env\nddev restart\nddev composer run-script post-root-package-install\nddev composer run-script post-create-project-cmd\nddev launch\nEOF\nchmod +x setup-laravel-installer.sh\n./setup-laravel-installer.sh\n</code></pre> <p>Clone your Laravel repository:</p> <pre><code>git clone &lt;my-laravel-repo&gt; my-laravel-site\ncd my-laravel-site\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --project-type=laravel --docroot=public\nddev start\n</code></pre> <p>Install dependencies and run post-install scripts:</p> <pre><code>ddev composer install\nddev composer run-script post-root-package-install\nddev composer run-script post-create-project-cmd\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-laravel-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\ngit clone &lt;my-laravel-repo&gt; my-laravel-site\ncd my-laravel-site\nddev config --project-type=laravel --docroot=public\nddev start -y\nddev composer install\nddev composer run-script post-root-package-install\nddev composer run-script post-create-project-cmd\nddev launch\nEOF\nchmod +x setup-laravel-git.sh\n./setup-laravel-git.sh\n</code></pre> <p>Add Vite support?</p> <p>Since Laravel v9.19, Vite is included as the default asset bundler. See the Vite Integration documentation for complete setup instructions.</p>"},{"location":"users/quickstart/#magento-2","title":"Magento 2","text":"<p>Normal details of a Composer build for Magento 2 are on the Magento 2 site. You must have a public and private key to install from Magento\u2019s repository. When prompted for \u201cusername\u201d and \u201cpassword\u201d in <code>composer create-project</code>, it\u2019s asking for your public key as \u201cusername\u201d and private key as \u201cpassword\u201d.</p> <p>Store Adobe/Magento Composer credentials in the global DDEV config</p> <p>If you have Composer installed on your workstation and have an <code>auth.json</code> you can reuse the <code>auth.json</code> by making a symlink. See In-Container Home Directory and Shell Configuration:</p> <pre><code>mkdir -p ~/.ddev/homeadditions/.composer &amp;&amp; ln -s ~/.composer/auth.json ~/.ddev/homeadditions/.composer/auth.json\n</code></pre> <p>Alternately, you can install the Adobe/Magento Composer credentials in your global <code>~/.ddev/homeadditions/.composer/auth.json</code> and never have to enter them again (see below):</p> Script to store Adobe/Magento Composer credentials (click me) <pre><code># Enter your username/password and agree to store your credentials\nddev_dir=\"$(ddev version -j | docker run -i --rm ddev/ddev-utilities jq -r \".raw.\\\"global-ddev-dir\\\" | select (.!=null) // \\\"$HOME/.ddev\\\"\" 2&gt;/dev/null)\"\nmkdir -p $ddev_dir/homeadditions/.composer\ndocker_command=(\"docker\" \"run\" \"-it\" \"--rm\" \"-v\" \"$ddev_dir/homeadditions/.composer:/composer\" \"--workdir=/tmp\" \"-e\" \"COMPOSER_HOME=/composer\" \"--user\" \"$(id -u):$(id -g)\")\nauth_json_path=\"$ddev_dir/homeadditions/.composer/auth.json\"\nif [ -L \"$auth_json_path\" ]; then\n    # If auth.json is a symlink, add the optional mount\n    auth_json_dir=$(dirname \"$(readlink -f \"$auth_json_path\")\")\n    docker_command+=(\"-v\" \"$auth_json_dir:$auth_json_dir\")\nfi\nimage=\"$(ddev version -j | docker run -i --rm ddev/ddev-utilities jq -r \".raw.web | select (.!=null)\" 2&gt;/dev/null)\"\ndocker_command+=(\"$image\" \"bash\" \"-c\" \"composer create-project --repository https://repo.magento.com/ magento/project-community-edition --no-install\")\n# Execute the command to store credentials\n\"${docker_command[@]}\"\n</code></pre> <p>Create the project directory and configure DDEV:</p> <pre><code>export MAGENTO_HOSTNAME=my-magento2-site\nmkdir ${MAGENTO_HOSTNAME} &amp;&amp; cd ${MAGENTO_HOSTNAME}\nddev config --project-type=magento2 --docroot=pub --upload-dirs=media --disable-settings-management\nddev add-on get ddev/ddev-opensearch\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Magento via Composer:</p> <pre><code>ddev composer create-project --repository https://repo.magento.com/ magento/project-community-edition\nrm -f app/etc/env.php\n</code></pre> <p>Run Magento setup:</p> <pre><code>ddev magento setup:install --base-url=\"https://${MAGENTO_HOSTNAME}.ddev.site/\" \\\n    --cleanup-database --db-host=db --db-name=db --db-user=db --db-password=db \\\n    --opensearch-host=opensearch --search-engine=opensearch --opensearch-port=9200 \\\n    --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n    --admin-user=admin --admin-password=Password123 --language=en_US\n</code></pre> <p>Configure Magento and launch:</p> <pre><code>ddev magento deploy:mode:set developer\nddev magento module:disable Magento_TwoFactorAuth Magento_AdminAdobeImsTwoFactorAuth\nddev config --disable-settings-management=false\n# Change the backend frontname URL to /admin_ddev\nddev magento setup:config:set --backend-frontname=\"admin_ddev\" --no-interaction\n# Login using `admin` user and `Password123` password\nddev launch /admin_ddev\n</code></pre> <p>Change the admin name and related information as needed.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-magento.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nexport MAGENTO_HOSTNAME=my-magento2-site\nmkdir ${MAGENTO_HOSTNAME} &amp;&amp; cd ${MAGENTO_HOSTNAME}\nddev config --project-type=magento2 --docroot=pub --upload-dirs=media --disable-settings-management\nddev add-on get ddev/ddev-opensearch\nddev start -y\nddev composer create-project --repository https://repo.magento.com/ magento/project-community-edition\nrm -f app/etc/env.php\nddev magento setup:install --base-url=\"https://${MAGENTO_HOSTNAME}.ddev.site/\" \\\n    --cleanup-database --db-host=db --db-name=db --db-user=db --db-password=db \\\n    --opensearch-host=opensearch --search-engine=opensearch --opensearch-port=9200 \\\n    --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n    --admin-user=admin --admin-password=Password123 --language=en_US\nddev magento deploy:mode:set developer\nddev magento module:disable Magento_TwoFactorAuth Magento_AdminAdobeImsTwoFactorAuth\nddev config --disable-settings-management=false\nddev magento setup:config:set --backend-frontname=\"admin_ddev\" --no-interaction\nddev launch /admin_ddev\nEOF\nchmod +x setup-magento.sh\n./setup-magento.sh\n</code></pre> <p>The admin login URL is specified by <code>frontName</code> in <code>app/etc/env.php</code>.</p> <p>You may want to add the Magento 2 Sample Data with:</p> <pre><code>ddev magento sampledata:deploy\nddev magento setup:upgrade\n</code></pre>"},{"location":"users/quickstart/#moodle","title":"Moodle","text":"Composer <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-moodle-site &amp;&amp; cd my-moodle-site\nddev config --docroot=public --webserver-type=apache-fpm\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Moodle via Composer:</p> <pre><code>ddev composer create-project moodle/moodle\n</code></pre> <p>Run Moodle installation:</p> <pre><code>ddev exec 'php admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password'\n</code></pre> <p>Launch Moodle:</p> <pre><code>ddev launch /login\n</code></pre> <p>In the web browser, log into your account using <code>admin</code> and <code>password</code>.</p> <p>Visit the Moodle Admin Quick Guide for more information.</p> <p>Tip</p> <p>Moodle relies on a periodic cron job\u2014don\u2019t forget to set that up! See ddev/ddev-cron.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-moodle.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-moodle-site &amp;&amp; cd my-moodle-site\nddev config --docroot=public --webserver-type=apache-fpm\nddev start -y\nddev composer create-project moodle/moodle\nddev exec 'php admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password'\nddev launch /login\nEOF\nchmod +x setup-moodle.sh\n./setup-moodle.sh\n</code></pre>"},{"location":"users/quickstart/#nodejs","title":"Node.js","text":"SvelteKitNode.js Web Server <p>This example installation sets up the SvelteKit demo in DDEV with the <code>generic</code> webserver.</p> <p>Node.js support as in this example is experimental, and your suggestions and improvements are welcome.</p> <pre><code>export SVELTEKIT_SITENAME=my-sveltekit-site\nmkdir ${SVELTEKIT_SITENAME} &amp;&amp; cd ${SVELTEKIT_SITENAME}\nddev config --project-type=generic --webserver-type=generic\nddev start\n\ncat &lt;&lt;EOF &gt; .ddev/config.sveltekit.yaml\nweb_extra_exposed_ports:\n- name: svelte\n  container_port: 3000\n  http_port: 80\n  https_port: 443\nweb_extra_daemons:\n- name: \"sveltekit-demo\"\n  command: \"node build\"\n  directory: /var/www/html\nEOF\n\nddev exec \"npx sv create --template=demo --types=ts --no-add-ons --no-install .\"\n# When it prompts \"Directory not empty. Continue?\", choose Yes.\n\n# Install an example svelte.config.js that uses adapter-node\nddev exec curl -s -OL https://raw.githubusercontent.com/ddev/test-sveltekit/main/svelte.config.js\n# Install an example vite.config.ts that sets the port and allows all hostnames\nddev exec curl -s -OL https://raw.githubusercontent.com/ddev/test-sveltekit/main/vite.config.ts\nddev npm install @sveltejs/adapter-node\nddev npm install\nddev npm run build\nddev restart\nddev launch\n</code></pre> <p>SvelteKit requires just a bit of configuration to make it run. There are many ways to make any Node.js site work, these are just examples. The <code>svelte.config.js</code> and <code>vite.config.js</code> used above can be adapted in many ways. For more comprehensive Vite configuration options, see the Vite Integration documentation.</p> <ul> <li><code>svelte.config.js</code> example uses <code>adapter-node</code>.</li> <li><code>vite.config.js</code> uses port 3000 and <code>allowedHosts: true</code></li> </ul> <pre><code>export NODEJS_SITENAME=my-nodejs-site\nmkdir ${NODEJS_SITENAME} &amp;&amp; cd ${NODEJS_SITENAME}\nddev config --project-type=generic --webserver-type=generic\nddev start\nddev npm install express\n\ncat &lt;&lt;EOF &gt; .ddev/config.nodejs.yaml\nweb_extra_exposed_ports:\n- name: node-example\n  container_port: 3000\n  http_port: 80\n  https_port: 443\n\nweb_extra_daemons:\n- name: \"node-example\"\n  command: \"node server.js\"\n  directory: /var/www/html\nEOF\n\nddev exec curl -s -O https://raw.githubusercontent.com/ddev/test-nodejs/main/server.js\nddev restart\nddev launch\n</code></pre> <p>The <code>server.js</code> used here is a trivial Express-based Node.js webserver. Yours will be more extensive.</p>"},{"location":"users/quickstart/#openmage","title":"OpenMage","text":"<p>Visit OpenMage Docs for more installation details.</p> ComposerGit Clone (for contributors) <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-openmage-site &amp;&amp; cd my-openmage-site\nddev config --project-type=magento --docroot=public_test --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Initialize and configure Composer:</p> <pre><code>ddev composer init --name \"openmage/composer-test\" --description \"OpenMage starter project\" --type \"project\" -l \"OSL-3.0\" -s \"dev\" -q\nddev composer config extra.magento-root-dir \"public_test\"\nddev composer config extra.enable-patching true\nddev composer config extra.magento-core-package-type \"magento-source\"\nddev composer config allow-plugins.cweagans/composer-patches true\nddev composer config allow-plugins.magento-hackathon/magento-composer-installer true\nddev composer config allow-plugins.aydin-hassan/magento-core-composer-installer true\nddev composer config allow-plugins.openmage/composer-plugin true\nddev composer require --no-update \"aydin-hassan/magento-core-composer-installer\":\"^2.1.0\" \"openmage/magento-lts\":\"^20.13\"\n</code></pre> <p>Download the OpenMage install command and install dependencies:</p> <pre><code>ddev exec wget -O .ddev/commands/web/openmage-install https://raw.githubusercontent.com/OpenMage/magento-lts/refs/heads/main/.ddev/commands/web/openmage-install\nddev composer install\n</code></pre> <p>Run OpenMage silent installation with sample data:</p> <pre><code>ddev openmage-install -q\n</code></pre> <p>Launch the admin interface (login with <code>admin</code> and <code>veryl0ngpassw0rd</code>):</p> <pre><code>ddev launch /admin\n</code></pre> <p>Make sure that <code>docroot</code> is set correctly</p> <p>DDEV config <code>--docroot</code> has to match Composer config <code>extra.magento-root-dir</code>.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-openmage.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-openmage-site &amp;&amp; cd my-openmage-site\nddev config --project-type=magento --docroot=public_test --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\nddev start -y\nddev composer init --name \"openmage/composer-test\" --description \"OpenMage starter project\" --type \"project\" -l \"OSL-3.0\" -s \"dev\" -q\nddev composer config extra.magento-root-dir \"public_test\"\nddev composer config extra.enable-patching true\nddev composer config extra.magento-core-package-type \"magento-source\"\nddev composer config allow-plugins.cweagans/composer-patches true\nddev composer config allow-plugins.magento-hackathon/magento-composer-installer true\nddev composer config allow-plugins.aydin-hassan/magento-core-composer-installer true\nddev composer config allow-plugins.openmage/composer-plugin true\nddev composer require --no-update \"aydin-hassan/magento-core-composer-installer\":\"^2.1.0\" \"openmage/magento-lts\":\"^20.13\"\nddev exec wget -O .ddev/commands/web/openmage-install https://raw.githubusercontent.com/OpenMage/magento-lts/refs/heads/main/.ddev/commands/web/openmage-install\nddev composer install\nddev openmage-install -q\nddev launch /admin\nEOF\nchmod +x setup-openmage.sh\n./setup-openmage.sh\n</code></pre> <p>Create the project directory and clone the repository:</p> <pre><code>mkdir my-openmage-site &amp;&amp; cd my-openmage-site\ngit clone https://github.com/OpenMage/magento-lts .\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --project-type=magento --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\nddev start\n</code></pre> <p>Install Composer dependencies:</p> <pre><code>ddev composer install\n</code></pre> <p>Run OpenMage silent installation with sample data:</p> <pre><code>ddev openmage-install -q\n</code></pre> <p>Launch the admin interface (login with <code>admin</code> and <code>veryl0ngpassw0rd</code>):</p> <pre><code>ddev launch /admin\n</code></pre> <p>Note that OpenMage itself provides several custom DDEV commands, including <code>openmage-install</code>, <code>openmage-admin</code>, <code>phpmd</code>, <code>rector</code>, <code>phpcbf</code>, <code>phpstan</code>, <code>vendor-patches</code>, and <code>php-cs-fixer</code>.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-openmage-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-openmage-site &amp;&amp; cd my-openmage-site\ngit clone https://github.com/OpenMage/magento-lts .\nddev config --project-type=magento --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\nddev start -y\nddev composer install\nddev openmage-install -q\nddev launch /admin\nEOF\nchmod +x setup-openmage-git.sh\n./setup-openmage-git.sh\n</code></pre>"},{"location":"users/quickstart/#pimcore","title":"Pimcore","text":"Composer <p>Using the Pimcore skeleton repository:</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-pimcore-site &amp;&amp; cd my-pimcore-site\nddev config --project-type=php --docroot=public --webimage-extra-packages='php${DDEV_PHP_VERSION}-amqp'\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Pimcore via Composer:</p> <pre><code>ddev composer create-project pimcore/skeleton\n</code></pre> <p>Run Pimcore installation:</p> <pre><code>ddev exec pimcore-install \\\n    --mysql-username=db \\\n    --mysql-password=db \\\n    --mysql-host-socket=db \\\n    --mysql-database=db \\\n    --admin-password=admin \\\n    --admin-username=admin\n</code></pre> <p>Create consumer daemon configuration:</p> <pre><code>echo \"web_extra_daemons:\n  - name: consumer\n    command: 'while true; do /var/www/html/bin/console messenger:consume pimcore_core pimcore_maintenance pimcore_scheduled_tasks pimcore_image_optimize pimcore_asset_update --memory-limit=250M --time-limit=3600; done'\n    directory: /var/www/html\" &gt;.ddev/config.pimcore.yaml\n</code></pre> <p>Restart and launch:</p> <pre><code>ddev restart\nddev launch /admin\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-pimcore.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-pimcore-site &amp;&amp; cd my-pimcore-site\nddev config --project-type=php --docroot=public --webimage-extra-packages='php${DDEV_PHP_VERSION}-amqp'\nddev start -y\nddev composer create-project pimcore/skeleton\nddev exec pimcore-install \\\n    --mysql-username=db \\\n    --mysql-password=db \\\n    --mysql-host-socket=db \\\n    --mysql-database=db \\\n    --admin-password=admin \\\n    --admin-username=admin\necho \"web_extra_daemons:\n  - name: consumer\n    command: 'while true; do /var/www/html/bin/console messenger:consume pimcore_core pimcore_maintenance pimcore_scheduled_tasks pimcore_image_optimize pimcore_asset_update --memory-limit=250M --time-limit=3600; done'\n    directory: /var/www/html\" &gt;.ddev/config.pimcore.yaml\nddev restart\nddev launch /admin\nEOF\nchmod +x setup-pimcore.sh\n./setup-pimcore.sh\n</code></pre>"},{"location":"users/quickstart/#processwire","title":"ProcessWire","text":"<p>To get started with ProcessWire, create a new directory and use the ZIP file download, composer, or Git checkout to build. These instructions are adapted from ProcessWire Install Documentation.</p> ZIP FileComposerGit <p>Create the project directory:</p> <pre><code>mkdir my-processwire-site &amp;&amp; cd my-processwire-site\n</code></pre> <p>Download and extract ProcessWire:</p> <pre><code>curl -LJOf https://github.com/processwire/processwire/archive/master.zip\nunzip processwire-master.zip &amp;&amp; rm -f processwire-master.zip &amp;&amp; mv processwire-master/* . &amp;&amp; mv processwire-master/.* . 2&gt;/dev/null &amp;&amp; rm -rf processwire-master\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --project-type=php --webserver-type=apache-fpm\nddev start\n</code></pre> <p>Launch ProcessWire:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-processwire-zip.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-processwire-site &amp;&amp; cd my-processwire-site\ncurl -LJOf https://github.com/processwire/processwire/archive/master.zip\nunzip processwire-master.zip &amp;&amp; rm -f processwire-master.zip &amp;&amp; mv processwire-master/* . &amp;&amp; mv processwire-master/.* . 2&gt;/dev/null &amp;&amp; rm -rf processwire-master\nddev config --project-type=php --webserver-type=apache-fpm\nddev start -y\nddev launch\nEOF\nchmod +x setup-processwire-zip.sh\n./setup-processwire-zip.sh\n</code></pre> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-processwire-site &amp;&amp; cd my-processwire-site\nddev config --project-type=php --webserver-type=apache-fpm\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install ProcessWire via Composer:</p> <pre><code>ddev composer create-project \"processwire/processwire:^3\"\n</code></pre> <p>Launch ProcessWire:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-processwire.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-processwire-site &amp;&amp; cd my-processwire-site\nddev config --project-type=php --webserver-type=apache-fpm\nddev start -y\nddev composer create-project \"processwire/processwire:^3\"\nddev launch\nEOF\nchmod +x setup-processwire.sh\n./setup-processwire.sh\n</code></pre> <p>Create the project directory:</p> <pre><code>mkdir my-processwire-site &amp;&amp; cd my-processwire-site\n</code></pre> <p>Clone ProcessWire (main branch for stable release):</p> <pre><code>git clone https://github.com/processwire/processwire.git .\n# For latest features, use dev branch instead:\n# git clone -b dev https://github.com/processwire/processwire.git .\n</code></pre> <p>Configure and start DDEV:</p> <pre><code>ddev config --webserver-type=apache-fpm\nddev start\n</code></pre> <p>Launch ProcessWire:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-processwire-git.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-processwire-site &amp;&amp; cd my-processwire-site\ngit clone https://github.com/processwire/processwire.git .\nddev config --webserver-type=apache-fpm\nddev start -y\nddev launch\nEOF\nchmod +x setup-processwire-git.sh\n./setup-processwire-git.sh\n</code></pre> <p>When the installation wizard prompts for database settings, enter:</p> <ul> <li><code>DB Name</code> = <code>db</code></li> <li><code>DB User</code> = <code>db</code></li> <li><code>DB Pass</code> = <code>db</code></li> <li><code>DB Host</code> = <code>db</code> (not <code>localhost</code>!)</li> <li><code>DB Charset</code> = <code>utf8mb4</code></li> <li><code>DB Engine</code> = <code>InnoDB</code></li> </ul> <p>If you get a warning about \u201cApache mod_rewrite\u201d during the compatibility check, Click \u201crefresh\u201d.</p> <p>After installation, configure <code>upload_dirs</code> to specify where user-generated files are managed by Processwire:</p> <pre><code>ddev config --upload-dirs=sites/assets/files &amp;&amp; ddev restart\n</code></pre> <p>If you have any questions there is lots of help in the DDEV thread in the ProcessWire forum.</p>"},{"location":"users/quickstart/#shopware","title":"Shopware","text":"Composer <p>Though you can set up a Shopware 6 environment many ways, we recommend the following technique. DDEV creates a <code>.env.local</code> file for you by default; if you already have one DDEV adds necessary information to it. When <code>ddev composer create-project</code> asks if you want to include Docker configuration, answer <code>x</code>, as this approach does not use their Docker configuration.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-shopware-site &amp;&amp; cd my-shopware-site\nddev config --project-type=shopware6 --docroot=public\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Shopware via Composer:</p> <pre><code>ddev composer create-project shopware/production\n# If it asks `Do you want to include Docker configuration from recipes?`\n# answer `x`, as we're using DDEV for this rather than its recipes.\n</code></pre> <p>Run Shopware installation and launch:</p> <pre><code>ddev exec console system:install --basic-setup\nddev launch /admin\n# Default username and password are `admin` and `shopware`\n</code></pre> <p>Log into the admin site (<code>/admin</code>) using the web browser. The default credentials are username <code>admin</code> and password <code>shopware</code>. You can use the web UI to install sample data or accomplish many other tasks.</p> <p>For more advanced tasks like adding elasticsearch, building and watching storefront and administration, see susi.dev.</p> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-shopware.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-shopware-site &amp;&amp; cd my-shopware-site\nddev config --project-type=shopware6 --docroot=public\nddev start -y\nddev composer create-project shopware/production\nddev exec console system:install --basic-setup\nddev launch /admin\nEOF\nchmod +x setup-shopware.sh\n./setup-shopware.sh\n</code></pre>"},{"location":"users/quickstart/#silverstripe-cms","title":"Silverstripe CMS","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> ComposerGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-silverstripe-site &amp;&amp; cd my-silverstripe-site\nddev config --project-type=silverstripe --docroot=public\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Silverstripe via Composer:</p> <pre><code>ddev composer create-project --prefer-dist silverstripe/installer\nddev sake dev/build flush=all\n</code></pre> <p>Launch the admin area:</p> <pre><code>ddev launch /admin\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-silverstripe.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-silverstripe-site &amp;&amp; cd my-silverstripe-site\nddev config --project-type=silverstripe --docroot=public\nddev start -y\nddev composer create-project --prefer-dist silverstripe/installer\nddev sake dev/build flush=all\nddev launch /admin\nEOF\nchmod +x setup-silverstripe.sh\n./setup-silverstripe.sh\n</code></pre> <pre><code>git clone &lt;my-silverstripe-repo&gt; my-silverstripe-site\ncd my-silverstripe-site\nddev config --project-type=silverstripe --docroot=public\nddev start\nddev composer install\nddev sake dev/build flush=all\n</code></pre> <p>Your Silverstripe CMS project is now ready. The CMS can be found at <code>/admin</code>, log into the default admin account using <code>admin</code> and <code>password</code>.</p> <p>Visit the Silverstripe CMS user documentation and developer documentation for more information.</p> <p><code>ddev sake</code> can be used as a shorthand for the Silverstripe CLI command <code>ddev exec vendor/bin/sake</code>.</p> <p>To open the CMS directly from CLI, run <code>ddev launch /admin</code>.</p>"},{"location":"users/quickstart/#statamic","title":"Statamic","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> <p>The Laravel project type can be used for Statamic like it can for Laravel. DDEV automatically updates or creates the <code>.env</code> file with the database information.</p> ComposerGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-statamic-site &amp;&amp; cd my-statamic-site\nddev config --project-type=laravel --docroot=public\n</code></pre> <p>Install Statamic via Composer:</p> <pre><code>ddev composer create-project --prefer-dist statamic/statamic\n</code></pre> <p>Create admin user and launch:</p> <pre><code>ddev php please make:user admin@example.com --password=admin1234 --super --no-interaction\nddev launch /cp\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-statamic.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-statamic-site &amp;&amp; cd my-statamic-site\nddev config --project-type=laravel --docroot=public\nddev composer create-project --prefer-dist statamic/statamic\nddev php please make:user admin@example.com --password=admin1234 --super --no-interaction\nddev launch /cp\nEOF\nchmod +x setup-statamic.sh\n./setup-statamic.sh\n</code></pre> <pre><code>git clone &lt;my-statamic-repo&gt; my-statamic-site\ncd my-statamic-site\nddev config --project-type=laravel --docroot=public\nddev start\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch /cp\n</code></pre>"},{"location":"users/quickstart/#sulu","title":"Sulu","text":"<p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-sulu-site &amp;&amp; cd my-sulu-site\nddev config --project-type=php --docroot=public --upload-dirs=uploads --database=mysql:8.0\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Sulu via Composer:</p> <pre><code>ddev composer create-project sulu/skeleton\n</code></pre> <p>Create your default webspace configuration <code>mv config/webspaces/website.xml config/webspaces/my-sulu-site.xml</code> and adjust the values for <code>&lt;name&gt;</code> and <code>&lt;key&gt;</code> so that they are matching your project:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;webspace xmlns=\"http://schemas.sulu.io/webspace/webspace\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://schemas.sulu.io/webspace/webspace http://schemas.sulu.io/webspace/webspace-1.1.xsd\"&gt;\n    &lt;!-- See: http://docs.sulu.io/en/latest/book/webspaces.html how to configure your webspace--&gt;\n\n    &lt;name&gt;My Sulu Site&lt;/name&gt;\n    &lt;key&gt;my-sulu-site&lt;/key&gt;\n</code></pre> <p>Alternatively, use the following commands to adjust the values for <code>&lt;name&gt;</code> and <code>&lt;key&gt;</code> to match your project setup:</p> <p>Configure webspace settings:</p> <pre><code>export SULU_PROJECT_NAME=\"My Sulu Site\"\nexport SULU_PROJECT_KEY=\"my-sulu-site\"\nexport SULU_PROJECT_CONFIG_FILE=\"config/webspaces/my-sulu-site.xml\"\nddev exec \"mv config/webspaces/website.xml ${SULU_PROJECT_CONFIG_FILE}\"\nddev exec \"sed -i -e 's|&lt;name&gt;.*&lt;/name&gt;|&lt;name&gt;${SULU_PROJECT_NAME}&lt;/name&gt;|g' -e 's|&lt;key&gt;.*&lt;/key&gt;|&lt;key&gt;${SULU_PROJECT_KEY}&lt;/key&gt;|g' ${SULU_PROJECT_CONFIG_FILE}\"\n</code></pre> <p>Caution</p> <p>Changing the <code>&lt;key&gt;</code> for a webspace later on causes problems. It is recommended to decide on the value for the key before the database is build in the next step.</p> <p>Build the database with the <code>dev</code> argument (adds user <code>admin</code> with password <code>admin</code>):</p> <pre><code>ddev dotenv set .env.local --app-env=dev --database-url=\"mysql://db:db@db:3306/db?serverVersion=8.0&amp;charset=utf8mb4\"\nddev exec bin/adminconsole sulu:build dev --no-interaction\n</code></pre> <p>Launch Sulu (login with <code>admin</code> and <code>admin</code>):</p> <pre><code>ddev launch /admin\n</code></pre> <p>Tip</p> <p>If you don\u2019t want to add an admin user use the <code>prod</code> argument instead</p> <pre><code>ddev execute bin/adminconsole sulu:build prod\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-sulu.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-sulu-site &amp;&amp; cd my-sulu-site\nddev config --project-type=php --docroot=public --upload-dirs=uploads --database=mysql:8.0\nddev start -y\nddev composer create-project sulu/skeleton\nexport SULU_PROJECT_NAME=\"My Sulu Site\"\nexport SULU_PROJECT_KEY=\"my-sulu-site\"\nexport SULU_PROJECT_CONFIG_FILE=\"config/webspaces/my-sulu-site.xml\"\nddev exec \"mv config/webspaces/website.xml ${SULU_PROJECT_CONFIG_FILE}\"\nddev exec \"sed -i -e 's|&lt;name&gt;.*&lt;/name&gt;|&lt;name&gt;${SULU_PROJECT_NAME}&lt;/name&gt;|g' -e 's|&lt;key&gt;.*&lt;/key&gt;|&lt;key&gt;${SULU_PROJECT_KEY}&lt;/key&gt;|g' ${SULU_PROJECT_CONFIG_FILE}\"\nddev dotenv set .env.local --app-env=dev --database-url=\"mysql://db:db@db:3306/db?serverVersion=8.0&amp;charset=utf8mb4\"\nddev exec bin/adminconsole sulu:build dev --no-interaction\nddev launch /admin\nEOF\nchmod +x setup-sulu.sh\n./setup-sulu.sh\n</code></pre>"},{"location":"users/quickstart/#symfony","title":"Symfony","text":"<p>There are many ways to install Symfony, here are a few of them based on the Symfony docs.</p> <p>DDEV automatically updates or creates the <code>.env.local</code> file with the database information.</p> ComposerSymfony CLIGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-symfony-site &amp;&amp; cd my-symfony-site\nddev config --project-type=symfony --docroot=public\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install Symfony via Composer:</p> <pre><code>ddev composer create-project symfony/skeleton\nddev composer require webapp\n# When it asks if you want to include docker configuration, say \"no\" with \"x\"\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-symfony.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-symfony-site &amp;&amp; cd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start -y\nddev composer create-project symfony/skeleton\nddev composer require webapp\nddev launch\nEOF\nchmod +x setup-symfony.sh\n./setup-symfony.sh\n</code></pre> <pre><code>mkdir my-symfony-site &amp;&amp; cd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start\nddev exec symfony check:requirements\nddev exec symfony new temp --version=\"7.1.*\" --webapp\n# 'symfony new' can't install in the current directory right away,\n# so we use 'rsync' to move the installed files one level up\nddev exec 'rsync -rltgopD temp/ ./ &amp;&amp; rm -rf temp'\nddev launch\n</code></pre> <pre><code>git clone &lt;my-symfony-repo&gt; my-symfony-site\ncd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start\nddev composer install\nddev launch\n</code></pre> <p>Want to run Symfony Console (<code>bin/console</code>)?</p> <pre><code>ddev console list\n# ddev console doctrine:schema:update --force\n</code></pre> <p>Consuming Messages (Running the Worker)</p> <p>Edit <code>.ddev/config.yaml</code> in your project directory and uncomment <code>post-start</code> hook to see <code>messenger:consume</code> command logs, and run:</p> <pre><code>ddev exec symfony server:log\n</code></pre>"},{"location":"users/quickstart/#typo3","title":"TYPO3","text":"ComposerGit Clone <p>Create the project directory and configure DDEV:</p> <pre><code>PROJECT_NAME=my-typo3-site\nmkdir ${PROJECT_NAME} &amp;&amp; cd ${PROJECT_NAME}\nddev config --project-type=typo3 --docroot=public --php-version=8.3\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Install TYPO3 via Composer:</p> <pre><code>ddev composer create-project \"typo3/cms-base-distribution\"\n</code></pre> <p>Run the TYPO3 setup:</p> <pre><code>ddev typo3 setup \\\n    --admin-user-password=\"Demo123*\" \\\n    --driver=mysqli \\\n    --create-site=https://${PROJECT_NAME}.ddev.site \\\n    --server-type=other \\\n    --dbname=db \\\n    --username=db \\\n    --password=db \\\n    --port=3306 \\\n    --host=db \\\n    --admin-username=admin \\\n    --admin-email=admin@example.com \\\n    --project-name=\"My TYPO3 site\" \\\n    --force\n</code></pre> <p>Launch the site:</p> <pre><code>ddev launch /typo3/\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-typo3.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nPROJECT_NAME=my-typo3-site\nmkdir -p ${PROJECT_NAME} &amp;&amp; cd ${PROJECT_NAME}\nddev config --project-type=typo3 --docroot=public --php-version=8.3\nddev start -y\nddev composer create-project \"typo3/cms-base-distribution\"\nddev typo3 setup \\\n    --admin-user-password=\"Demo123*\" \\\n    --driver=mysqli \\\n    --create-site=https://${PROJECT_NAME}.ddev.site \\\n    --server-type=other \\\n    --dbname=db \\\n    --username=db \\\n    --password=db \\\n    --port=3306 \\\n    --host=db \\\n    --admin-username=admin \\\n    --admin-email=admin@example.com \\\n    --project-name=\"My TYPO3 site\" \\\n    --force\nddev launch /typo3/\nEOF\nchmod +x setup-typo3.sh\n./setup-typo3.sh\n</code></pre> <p>This example uses a clone of a test repository, <code>github.com/ddev/test-typo3.git</code>.  Replace that with your git repository.</p> <pre><code>PROJECT_GIT_URL=https://github.com/ddev/test-typo3.git\nPROJECT_NAME=my-typo3-site\nmkdir -p ${PROJECT_NAME} &amp;&amp; cd ${PROJECT_NAME}\ngit clone ${PROJECT_GIT_REPOSITORY} .\nddev config --project-type=typo3 --docroot=public --php-version=8.3\nddev start\nddev composer install\nddev exec touch public/FIRST_INSTALL\nddev launch /typo3/install.php\n</code></pre>"},{"location":"users/quickstart/#wordpress","title":"WordPress","text":"<p>There are several easy ways to use DDEV with WordPress:</p> WP-CLIBedrockGit Clone <p>DDEV has built-in support for WP-CLI, the command-line interface for WordPress.</p> <p>Create the project directory and configure DDEV:</p> <pre><code>mkdir my-wp-site &amp;&amp; cd my-wp-site\n# Create a new DDEV project inside the newly-created folder\n# (Primary URL automatically set to `https://&lt;folder&gt;.ddev.site`)\nddev config --project-type=wordpress\n</code></pre> <p>Start DDEV (this may take a minute):</p> <pre><code>ddev start\n</code></pre> <p>Download WordPress:</p> <pre><code>ddev wp core download\n</code></pre> <p>Install WordPress (or use <code>ddev launch</code> to install via browser):</p> <pre><code># You can launch in browser to finish installation:\n# ddev launch\n# OR use the following installation command\n# (we need to use single quotes to get the primary site URL from `.ddev/config.yaml` as variable)\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\n</code></pre> <p>Launch WordPress admin dashboard:</p> <pre><code>ddev launch wp-admin/\n</code></pre> Prefer to run as a script? <p>To run the whole setup as a script, examine and run this script:</p> <pre><code>cat &gt; setup-wordpress.sh &lt;&lt; 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nmkdir my-wp-site &amp;&amp; cd my-wp-site\nddev config --project-type=wordpress\nddev start -y\nddev wp core download\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\nddev launch wp-admin/\nEOF\nchmod +x setup-wordpress.sh\n./setup-wordpress.sh\n</code></pre> <p>Bedrock is a modern, Composer-based installation in WordPress:</p> <pre><code>mkdir my-wp-site &amp;&amp; cd my-wp-site\nddev config --project-type=wordpress --docroot=web\nddev start\nddev composer create-project roots/bedrock\n</code></pre> <p>Rename the file <code>.env.example</code> to <code>.env</code> in the project root and make the following adjustments:</p> <pre><code>DB_NAME=db\nDB_USER=db\nDB_PASSWORD=db\nDB_HOST=db\nWP_HOME=${DDEV_PRIMARY_URL}\nWP_SITEURL=${WP_HOME}/wp\nWP_ENV=development\n</code></pre> <p>You can then install the site with WP-CLI and log into the admin interface:</p> <pre><code>ddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\nddev launch wp-admin/\n</code></pre> <p>For more details, see Bedrock installation.</p> <p>To get started using DDEV with an existing WordPress project, clone the project\u2019s repository.</p> <pre><code>PROJECT_GIT_URL=https://github.com/ddev/test-wordpress.git\ngit clone ${PROJECT_GIT_URL} my-wp-site\ncd my-wp-site\nddev config --project-type=wordpress\nddev start\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\nddev launch wp-admin/\n</code></pre> <p>You\u2019ll see a message like:</p> <p>An existing user-managed wp-config.php file has been detected! Project DDEV settings have been written to:</p> <p>/Users/rfay/workspace/bedrock/web/wp-config-ddev.php</p> <p>Comment out any database connection settings in your <code>wp-config.php</code> file and add the following snippet to your <code>wp-config.php</code>, near the bottom of the file and before the include of <code>wp-settings.php</code>:</p> <pre><code>// Include for DDEV-managed settings in wp-config-ddev.php.\n$ddev_settings = __DIR__ . '/wp-config-ddev.php';\nif (is_readable($ddev_settings) &amp;&amp; !defined('DB_USER')) {\nrequire_once($ddev_settings);\n}\n</code></pre> <p>If you don\u2019t care about those settings, or config is managed elsewhere (like in a <code>.env</code> file), you can eliminate this message by adding a comment to <code>wp-config.php</code>:</p> <pre><code>// wp-config-ddev.php not needed\n</code></pre> <p>Now run <code>ddev start</code> and continue Importing a Database if you need to.</p>"},{"location":"users/support/","title":"Support","text":"<p>We love to hear from you and want you to be successful with DDEV!</p> <ul> <li>See the included <code>ddev help</code> command, which includes lots of examples.</li> <li>FAQ</li> <li>Discord interactive community support.</li> <li>DDEV issue queue for bugs and feature requests.</li> <li>Mastodon</li> <li>Bluesky</li> </ul>"},{"location":"users/support/#additional-resources","title":"Additional Resources","text":"<ul> <li>DDEV Stack Overflow for support and frequently asked questions. We respond quickly here and the results provide quite a library of user-curated solutions.</li> <li>awesome-ddev repository has loads of external resources, blog posts, recipes, screencasts, and the like. Your contributions are welcome.</li> </ul>"},{"location":"users/configuration/config/","title":"Config Options","text":"<p>DDEV configuration is stored in YAML files that come in two flavors:</p> <ol> <li> Project <code>.ddev/config.yaml</code> settings, with optional environmental override variants.</li> <li> Global <code>$HOME/.ddev/global_config.yaml</code> settings that can apply to all projects.</li> </ol> <p>Most of these settings take effect when you run <code>ddev start</code>.</p>","boost":0.5},{"location":"users/configuration/config/#managing-configuration","title":"Managing Configuration","text":"","boost":0.5},{"location":"users/configuration/config/#setting-options","title":"Setting Options","text":"<p>You can hand-edit the YAML files DDEV creates for you after running <code>ddev config</code>, and you can also define most settings with equivalent CLI arguments:</p> config.yaml<code>ddev config</code> <pre><code>php_version: \"8.3\"\n</code></pre> <pre><code>ddev config --php-version 8.3\n</code></pre> <p>Run <code>ddev help config</code> to see all the available config arguments.</p>","boost":0.5},{"location":"users/configuration/config/#environmental-overrides","title":"Environmental Overrides","text":"<p>You can override the per-project <code>config.yaml</code> with files named <code>config.*.yaml</code>, and files like this are often created by DDEV add-ons. For example, <code>config.elasticsearch.yaml</code> in Elasticsearch add-on adds additional configuration related to Elasticsearch.</p> <p>Many teams use <code>config.local.yaml</code> for configuration that is specific to one environment, and not checked into the team\u2019s default <code>config.yaml</code>. You might enable Mutagen or enable NFS for the project, for example, only on your machine. Or maybe use a different database type. The file <code>config.local.yaml</code> is gitignored by default.</p> <p>For examples, see the Extending and Customizing Environments page.</p>","boost":0.5},{"location":"users/configuration/config/#additional_fqdns","title":"<code>additional_fqdns</code>","text":"<p>An array of extra fully-qualified domain names to be used for a project.</p> Type Default Usage  project <code>[]</code> \u200c <p>Example: <code>additional_fqdns: [\"example.com\", \"sub1.example.com\"]</code> would provide HTTP and HTTPS URLs for <code>example.com</code> and <code>sub1.example.com</code>.</p> <p>See Hostnames and Wildcards and DDEV, Oh My! for more information on DDEV hostname resolution.</p> <p>Warning</p> <p>Take care with <code>additional_fqdns</code>; it adds items to your <code>/etc/hosts</code> file which can cause confusion.</p>","boost":0.5},{"location":"users/configuration/config/#additional_hostnames","title":"<code>additional_hostnames</code>","text":"<p>An array of extra hostnames to be used for a project.</p> Type Default Usage  project <code>[]</code> \u200c <p>Example: <code>additional_hostnames: [\"somename\", \"someothername\", \"*.thirdname\"]</code> would provide HTTP and HTTPS URLs for <code>somename.ddev.site</code>, <code>someothername.ddev.site</code>, and <code>one.thirdname.ddev.site</code> + <code>two.thirdname.ddev.site</code>.</p> <p>The wildcard (<code>*.&lt;whatever&gt;</code>) setting only works if you\u2019re using DNS to resolve hostnames (default) and connected to the internet and using <code>ddev.site</code> as your <code>project_tld</code>.</p> <p>See Hostnames and Wildcards and DDEV, Oh My! for more information on DDEV hostname resolution.</p>","boost":0.5},{"location":"users/configuration/config/#bind_all_interfaces","title":"<code>bind_all_interfaces</code>","text":"<p>When the network interfaces of a project should be exposed to the local network, you can specify <code>bind_all_interfaces: true</code> to do that. This is an unusual application, sometimes used to share projects on a local network.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#composer_root","title":"<code>composer_root</code>","text":"<p>The relative path, from the project root, to the directory containing <code>composer.json</code>. (This is where all Composer-related commands are executed.)</p> Type Default Usage  project \u200c \u200c","boost":0.5},{"location":"users/configuration/config/#composer_version","title":"<code>composer_version</code>","text":"<p>Composer version for the web container and the <code>ddev composer</code> command.</p> Type Default Usage  project <code>2</code> Can be <code>2</code>, <code>1</code>, or empty (<code>\"\"</code>) for latest major version at container build time.Can also be a minor version like <code>2.2</code> for the latest release of that branch, an explicit version like <code>1.0.22</code>, or a keyword like <code>stable</code>, <code>preview</code> or <code>snapshot</code>. See Composer documentation. <p>Using <code>vendor/bin/composer</code></p> <p>See the example in Composer from <code>vendor/bin/composer</code>.</p>","boost":0.5},{"location":"users/configuration/config/#corepack_enable","title":"<code>corepack_enable</code>","text":"<p>Whether to run <code>corepack enable</code> on Node.js configuration.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, <code>corepack enable</code> will be executed, making latest <code>yarn</code> and <code>pnpm</code> package managers available.</p>","boost":0.5},{"location":"users/configuration/config/#database","title":"<code>database</code>","text":"<p>The type and version of the database engine the project should use.</p> Type Default Usage  project MariaDB 10.11 Can be MariaDB 5.5\u201310.8, 10.11, 11.4, 11.8 and MySQL 5.5\u20138.0, 8.4, or PostgreSQL 9\u201318.See Database Server Types for examples and caveats. For very old database types see Using DDEV to spin up a legacy PHP application.","boost":0.5},{"location":"users/configuration/config/#dbimage_extra_packages","title":"<code>dbimage_extra_packages</code>","text":"<p>Extra Debian packages for the project\u2019s database container. (This is rarely used.)</p> Type Default Usage  project <code>[]</code> \u200c <p>Example: <code>dbimage_extra_packages: [\"less\"]</code> will add the <code>less</code> package when the database container is built.</p>","boost":0.5},{"location":"users/configuration/config/#ddev_version_constraint","title":"<code>ddev_version_constraint</code>","text":"<p>You can configure a version constraint for DDEV that will be validated against the running DDEV executable and prevent <code>ddev start</code> from running if it doesn\u2019t validate. For example:</p> <pre><code>ddev_version_constraint: '&gt;= v1.24.0-alpha1'\n</code></pre> Type Default Usage  project <code>&gt;= 1.24.8</code>","boost":0.5},{"location":"users/configuration/config/#default_container_timeout","title":"<code>default_container_timeout</code>","text":"<p>Seconds DDEV will wait for all containers to become ready.</p> Type Default Usage  project <code>120</code> Can be adjusted to avoid timeouts on slower systems or for huge snapshot restores.","boost":0.5},{"location":"users/configuration/config/#developer_mode","title":"<code>developer_mode</code>","text":"<p>Not currently used.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#disable_settings_management","title":"<code>disable_settings_management</code>","text":"<p>Whether to disable CMS-specific settings file management.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will not create or update CMS-specific settings files.</p>","boost":0.5},{"location":"users/configuration/config/#disable_upload_dirs_warning","title":"<code>disable_upload_dirs_warning</code>","text":"<p>Whether to disable the standard warning issued when a project is using <code>performance_mode: mutagen</code> but <code>upload_dirs</code> is not configured.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will not issue the normal warning on <code>ddev start</code>: \u201cYou have Mutagen enabled and your \u2018php\u2019 project type doesn\u2019t have <code>upload_dirs</code> set\u201d. See Mutagen and User-Generated Uploads for context on why DDEV avoids doing the Mutagen sync on <code>upload_dirs</code>.</p>","boost":0.5},{"location":"users/configuration/config/#docroot","title":"<code>docroot</code>","text":"<p>Relative path to the document root containing <code>index.php</code> or <code>index.html</code>.</p> Type Default Usage  project automatic DDEV will attempt to detect this and set it for you, otherwise falling back to the current directory.","boost":0.5},{"location":"users/configuration/config/#fail_on_hook_fail","title":"<code>fail_on_hook_fail</code>","text":"<p>Whether <code>ddev start</code> should be interrupted by a failing hook, on a single project or for all projects if used globally.</p> Type Default Usage  project global <code>false</code> Can be <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#hooks","title":"<code>hooks</code>","text":"<p>DDEV-specific lifecycle hooks to be executed.</p> Type Default Usage  project `` \u200c","boost":0.5},{"location":"users/configuration/config/#host_db_port","title":"<code>host_db_port</code>","text":"<p>Port for binding database server to localhost interface.</p> Type Default Usage  project automatic \u200c <p>Not commonly used. Can be a specific port number for a fixed database port. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Can be a specific port number for a fixed database port, which can be useful for configuration of host-side database clients. (May still be easier to use <code>ddev mysql</code>, <code>ddev psql</code>, <code>ddev sequelace</code>, etc., which handle changing ports automatically, as does the sample command <code>ddev mysqlworkbench</code>.)</p>","boost":0.5},{"location":"users/configuration/config/#host_https_port","title":"<code>host_https_port</code>","text":"<p>Specific, persistent HTTPS port for direct binding to localhost interface.</p> Type Default Usage  project automatic \u200c <p>Not commonly used. Can be a specific port number for a fixed HTTPS URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Example: <code>59001</code> will have the project always use <code>https://127.0.0.1:59001</code> for the localhost URL\u2014used less commonly than the named URL which is better to rely on.</p>","boost":0.5},{"location":"users/configuration/config/#host_mailpit_port","title":"<code>host_mailpit_port</code>","text":"<p>Specific, persistent Mailpit port for direct binding to localhost interface.</p> Type Default Usage  project automatic \u200c <p>Not commonly used. Can be a specific port number for a fixed Mailpit URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p>","boost":0.5},{"location":"users/configuration/config/#host_webserver_port","title":"<code>host_webserver_port</code>","text":"<p>Specific, persistent HTTP port for direct binding to localhost interface.</p> Type Default Usage  project automatic \u200c <p>Not commonly used. Can be a specific port number for a fixed HTTP URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Example: <code>59000</code> will have the project always use <code>http://127.0.0.1:59000</code> for the localhost URL\u2014used less commonly than the named URL which is better to rely on.</p>","boost":0.5},{"location":"users/configuration/config/#host_xhgui_port","title":"<code>host_xhgui_port</code>","text":"<p>Specific, persistent XHGui port for direct binding to localhost interface.</p> Type Default Usage  project automatic \u200c <p>Very rarely used. Can be a specific port number for a fixed XHGui URL.</p>","boost":0.5},{"location":"users/configuration/config/#instrumentation_opt_in","title":"<code>instrumentation_opt_in</code>","text":"<p>Whether to allow instrumentation reporting.</p> Type Default Usage  global <code>true</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, anonymous usage information is collected via Amplitude.</p>","boost":0.5},{"location":"users/configuration/config/#instrumentation_queue_size","title":"<code>instrumentation_queue_size</code>","text":"<p>Maximum number of locally collected events for instrumentation reporting.</p> Type Default Usage  global <code>100</code> Can be any integer.","boost":0.5},{"location":"users/configuration/config/#instrumentation_reporting_interval","title":"<code>instrumentation_reporting_interval</code>","text":"<p>Reporting interval in hours for instrumentation reporting.</p> Type Default Usage  global <code>24</code> Can be any integer.","boost":0.5},{"location":"users/configuration/config/#instrumentation_user","title":"<code>instrumentation_user</code>","text":"<p>Specific name identifier for instrumentation reporting.</p> Type Default Usage  global `` \u200c","boost":0.5},{"location":"users/configuration/config/#internet_detection_timeout_ms","title":"<code>internet_detection_timeout_ms</code>","text":"<p>Internet detection timeout in milliseconds.</p> Type Default Usage  global <code>3000</code> (3 seconds) Can be any integer. <p>DDEV must detect whether the internet is working to determine whether to add hostnames to <code>/etc/hosts</code>. In rare cases, you may need to increase this value if you have slow but working internet. See FAQ and GitHub issue.</p>","boost":0.5},{"location":"users/configuration/config/#letsencrypt_email","title":"<code>letsencrypt_email</code>","text":"<p>Email associated with Let\u2019s Encrypt feature. (Works in conjunction with <code>use_letsencrypt</code>.)</p> Type Default Usage  global `` \u200c <p>Set with <code>ddev config global --letsencrypt-email=me@example.com</code>. Used with the hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#mailpit_http_port","title":"<code>mailpit_http_port</code>","text":"<p>Port for project\u2019s Mailpit HTTP URL.</p> Type Default Usage  project global <code>8025</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#mailpit_https_port","title":"<code>mailpit_https_port</code>","text":"<p>Port for project\u2019s Mailpit HTTPS URL.</p> Type Default Usage  project global <code>8026</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#messages","title":"<code>messages</code>","text":"<p>Configure messages like the Tip of the Day.</p> Type Default Usage  global <code>ticker_interval:</code> hours between ticker messages. <p>Example: Disable the \u201cTip of the Day\u201d ticker in <code>~/.ddev/global_config.yaml</code></p> <pre><code>messages:\n  ticker_interval: -1\n</code></pre> <p>Example: Show the \u201cTip of the Day\u201d ticket every two hours:</p> <pre><code>messages:\n  ticker_interval: 2\n</code></pre>","boost":0.5},{"location":"users/configuration/config/#name","title":"<code>name</code>","text":"<p>The URL-friendly name DDEV should use to reference the project.</p> Type Default Usage  project enclosing directory name Must be unique; no two projects can have the same name. It\u2019s best if this matches the directory name. If this option is omitted, the project will take the name of the enclosing directory. This value may also be set via <code>ddev config --project-name=&lt;name&gt;</code>. (The <code>ddev config</code> flag is <code>project-name</code>, not <code>name</code>, see <code>ddev config</code> docs.)\u201d","boost":0.5},{"location":"users/configuration/config/#ngrok_args","title":"<code>ngrok_args</code>","text":"<p>Extra flags for configuring ngrok when sharing projects with the <code>ddev share</code> command.</p> Type Default Usage  project `` \u200c <p>Example: <code>--basic-auth username:pass1234 --domain foo.ngrok-free.app</code>.</p>","boost":0.5},{"location":"users/configuration/config/#no_bind_mounts","title":"<code>no_bind_mounts</code>","text":"<p>Whether to not use Docker bind mounts.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>Some Docker environments (like remote Docker) do not allow bind mounts, so when <code>true</code> this turns those off, turns on Mutagen, and uses volume copies to do what bind mounts would otherwise do.</p>","boost":0.5},{"location":"users/configuration/config/#no_project_mount","title":"<code>no_project_mount</code>","text":"<p>Whether to skip mounting project into web container.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>Advanced users only!</p> <p>When <code>true</code>, project will not be mounted by DDEV into the web container. Enables experimentation with alternate file mounting strategies.</p>","boost":0.5},{"location":"users/configuration/config/#nodejs_version","title":"<code>nodejs_version</code>","text":"<p>Node.js version for the web container\u2019s \u201csystem\u201d version. <code>n</code> tool is under the hood.</p> <p>There is no need to reconfigure <code>nodejs_version</code> unless you want a version other than the version already specified, which will be the default version at the time the project was configured.</p> <p>Note that specifying any non-default Node.js version will cause DDEV to download and install that version when running <code>ddev start</code> the first time on a project. If optimizing first-time startup speed (as in Continuous Integration) is your biggest concern, consider using the default version of Node.js.</p> Type Default Usage  project current LTS version any node version, like <code>16</code>, <code>18.2</code>, <code>18.19.2</code>, etc. <p>How to install the Node.js version from a file</p> <p>Your project team may specify the Node.js version in a more general way than in the <code>.ddev/config.yaml</code>. For example, you may use a <code>.nvmrc</code> file, the <code>package.json</code>, or a similar technique. In that case, DDEV can use the external configuration provided by that file.</p> <p>There is an <code>auto</code> label (see full documentation):</p> <pre><code>ddev config --nodejs-version=auto\n</code></pre> <p>It reads the target version from a file in the DDEV_APPROOT directory, or any parent directory.</p> <p><code>n</code> looks for in order:</p> <ul> <li><code>.n-node-version</code> : version on single line. Custom to <code>n</code>.</li> <li><code>.node-version</code> : version on single line. Used by multiple tools.</li> <li><code>.nvmrc</code> : version on single line. Used by <code>nvm</code>.</li> <li>if no version file found, look for <code>engine</code> as below.</li> </ul> <p>The <code>engine</code> label looks for a <code>package.json</code> file and reads the engines field to determine compatible Node.js.</p> <p>If your file is not in the <code>DDEV_APPROOT</code> directory, you can create a link to the parent folder, so that <code>n</code> can find it. For example, if you have <code>frontend/.nvmrc</code>, create a <code>.ddev/web-build/Dockerfile.nvmrc</code> file:</p> <pre><code>RUN ln -sf /var/www/html/frontend/.nvmrc /var/www/.nvmrc\n</code></pre> <p>Switching from <code>nvm</code> to <code>nodejs_version</code></p> <p>If switching from using <code>nvm</code> to using <code>nodejs_version</code>, you may find that the container continues to use the previously specified version. If this happens, use <code>ddev nvm alias default system</code> or <code>ddev ssh</code> into the container (<code>ddev ssh</code>) and run <code>rm -rf /mnt/ddev-global-cache/nvm_dir/${DDEV_PROJECT}-web</code>, then <code>ddev restart</code>.</p>","boost":0.5},{"location":"users/configuration/config/#omit_containers","title":"<code>omit_containers</code>","text":"<p>Containers that should not be loaded automatically for one or more projects.</p> Type Default Usage  project global <code>[]</code> For projects, can include <code>db</code>, and <code>ddev-ssh-agent</code>.Globally, can include <code>ddev-router</code>, and <code>ddev-ssh-agent</code>. <p>Example: <code>omit_containers: [db, ddev-ssh-agent]</code> starts the project without a <code>db</code> container and SSH agent. Some containers can be omitted globally in <code>~/.ddev/global_config.yaml</code> and the result is additive; all containers named in both places will be omitted.</p> <p>Warning</p> <p>Omitting the <code>db</code> container will cause database-dependent DDEV features to be unstable.</p>","boost":0.5},{"location":"users/configuration/config/#omit_project_name_by_default","title":"<code>omit_project_name_by_default</code>","text":"<p>Determines whether <code>ddev config</code> updates the <code>name</code> field in the <code>.ddev/config.yaml</code> by default.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When the <code>name</code> field is omitted in <code>.ddev/config.yaml</code>, DDEV gets the project name from the directory the project is in. If this option is set to <code>true</code>, <code>ddev config</code> will not update the <code>name</code> field unless you use <code>ddev config --project-name=&lt;name&gt;</code> to explicitly set the project name. People using <code>git worktree</code> often prefer to omit the project name so they can work on multiple projects at the same time in different worktrees.</p>","boost":0.5},{"location":"users/configuration/config/#override_config","title":"<code>override_config</code>","text":"<p>Whether to override config values instead of merging.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, the <code>config.*.yaml</code> file with the option will have its settings override rather than merge with others. Allows statements like <code>use_dns_when_possible: false</code> or <code>additional_hostnames: []</code> to work.</p> <p>See Extending <code>config.yaml</code> with Custom <code>config.*.yaml</code> Files.</p>","boost":0.5},{"location":"users/configuration/config/#performance_mode","title":"<code>performance_mode</code>","text":"<p>Defines the performance optimization mode to be used. Currently Mutagen asynchronous caching and NFS are supported. Mutagen is enabled by default on Mac and Windows.</p> Type Default Usage  project global `` Can be <code>global</code>, <code>none</code>, <code>mutagen</code>, or (deprecated) <code>nfs</code>. <p>This is typically a global setting. The project-specific value will override global config.</p> <p>The NFS section in the \u201cperformance\u201d doc explains the deprecated <code>nfs</code> option.</p>","boost":0.5},{"location":"users/configuration/config/#php_version","title":"<code>php_version</code>","text":"<p>The PHP version the project should use.</p> Type Default Usage  project <code>8.3</code> Can be <code>5.6</code> through <code>8.4</code>. New versions are added when released upstream. <p>You can only specify the major version (<code>7.3</code>), not a minor version (<code>7.3.2</code>), from those explicitly available.</p>","boost":0.5},{"location":"users/configuration/config/#project_tld","title":"<code>project_tld</code>","text":"<p>Default Top-Level-Domain (<code>TLD</code>) to be used for a project\u2019s domains, or globally for all project domains. This defaults to <code>ddev.site</code> and it\u2019s easiest to work with DDEV using the default setting.</p> Type Default Usage  project global <code>ddev.site</code> Can be changed to any TLD you\u2019d prefer. <p>See Hostnames and Wildcards and DDEV, Oh My! for more information on DDEV hostname resolution.</p>","boost":0.5},{"location":"users/configuration/config/#required_docker_compose_version","title":"<code>required_docker_compose_version</code>","text":"<p>Specific docker-compose version for download.</p> Type Default Usage  global \u200c \u200c <p>If set to <code>v2.8.3</code>, for example, it will download and use that version instead of the expected version for docker-compose.</p> <p>Troubleshooting Only!</p> <p>This should only be used in specific cases like troubleshooting. Please don\u2019t experiment with it unless directed to do so.</p>","boost":0.5},{"location":"users/configuration/config/#router_bind_all_interfaces","title":"<code>router_bind_all_interfaces</code>","text":"<p>Whether to bind <code>ddev-router</code>\u2019s ports on all network interfaces.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, the router will bind on all network interfaces instead of only <code>localhost</code>, exposing DDEV projects to your local network. This is sometimes used to share projects on a local network, see Sharing Your Project.</p>","boost":0.5},{"location":"users/configuration/config/#router_http_port","title":"<code>router_http_port</code>","text":"<p>Port for DDEV router\u2019s HTTP traffic.</p> Type Default Usage  project global <code>80</code> Usually changed only if there\u2019s a conflicting process using that port. <p>See the Troubleshooting page for more on addressing port conflicts.</p>","boost":0.5},{"location":"users/configuration/config/#router_https_port","title":"<code>router_https_port</code>","text":"<p>Port for DDEV router\u2019s HTTPS traffic.</p> Type Default Usage  project global <code>443</code> Usually changed only if there\u2019s a conflicting process using that port. <p>See the Troubleshooting page for more on addressing port conflicts.</p>","boost":0.5},{"location":"users/configuration/config/#simple_formatting","title":"<code>simple_formatting</code>","text":"<p>Whether to disable most <code>ddev list</code> and <code>ddev describe</code> table formatting and implicitly set <code>NO_COLOR=1</code>.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. If you don\u2019t like the table lines in <code>ddev list</code> or <code>ddev describe</code>, you can completely turn them off with <code>ddev config global --simple-formatting=true</code>. <p>When <code>true</code>, turns off most table formatting in <code>ddev list</code> and <code>ddev describe</code> and suppresses colorized text everywhere.</p>","boost":0.5},{"location":"users/configuration/config/#table_style","title":"<code>table_style</code>","text":"<p>Style for <code>ddev list</code> and <code>ddev describe</code>.</p> Type Default Usage  global <code>default</code> Can be <code>default</code>, <code>bold</code>, and <code>bright</code>. <p><code>bright</code> is a pleasant, colorful output some people may prefer. If you don\u2019t like the table lines at all, you can remove them with <code>ddev config global --simple-formatting=true</code>.</p>","boost":0.5},{"location":"users/configuration/config/#timezone","title":"<code>timezone</code>","text":"<p>Timezone for container and PHP configuration.</p> Type Default Usage  project Automatic detection or <code>UTC</code> Can be any valid timezone, like <code>Europe/Dublin</code> or <code>MST7MDT</code>. <p>If <code>timezone</code> is unset, DDEV will attempt to derive it from the host system timezone using the <code>$TZ</code> environment variable or the <code>/etc/localtime</code> symlink.</p>","boost":0.5},{"location":"users/configuration/config/#traefik_monitor_port","title":"<code>traefik_monitor_port</code>","text":"<p>Specify an alternate port for the Traefik (ddev-router) monitor port. This defaults to 10999 and rarely needs to be changed, but can be changed in cases of port conflicts.</p> Type Default Usage  global <code>10999</code> Can be any unused port below 65535.","boost":0.5},{"location":"users/configuration/config/#type","title":"<code>type</code>","text":"<p>The DDEV-specific project type.</p> Type Default Usage  project <code>php</code> Can be <code>backdrop</code>, <code>cakephp</code>, <code>craftcms</code>, <code>drupal</code>, <code>drupal6</code>, <code>drupal7</code>, <code>drupal8</code>, <code>drupal9</code>, <code>drupal10</code>, <code>drupal11</code>, <code>generic</code>, <code>laravel</code>, <code>magento</code>, <code>magento2</code>, <code>php</code>, <code>shopware6</code>, <code>silverstripe</code>, <code>symfony</code>, <code>typo3</code>, or <code>wordpress</code>. <p>The <code>php</code> type doesn\u2019t attempt CMS configuration or settings file management and can work with any project.</p> <p>The many versions of the Drupal project types can be used, for example <code>drupal11</code> or <code>drupal6</code>. There is also a special <code>drupal</code> type that is interpreted as \u201clatest stable Drupal version\u201d, so in 2025, <code>drupal</code> means <code>drupal11</code>.</p> <p>The special <code>generic</code> project type does nothing and implies nothing. It is normally used with <code>webserver_type: generic</code>.</p>","boost":0.5},{"location":"users/configuration/config/#upload_dirs","title":"<code>upload_dirs</code>","text":"<p>Paths from the project\u2019s docroot to the user-generated files directory targeted by <code>ddev import-files</code>. Can be outside the docroot but must be within the project directory e.g. <code>../private</code>. Some CMSes and frameworks have default <code>upload_dirs</code>, like Drupal\u2019s <code>sites/default/files</code>; <code>upload_dirs</code> will override the defaults, so if you want Drupal to use both <code>sites/default/files</code> and <code>../private</code> you would list both, <code>upload_dirs: [\"sites/default/files\", \"../private\"]</code>. <code>upload_dirs</code> is used for targeting <code>ddev import-files</code> and also, when Mutagen is enabled, to bind-mount those directories so their contents does not need to be synced into Mutagen.</p> <p>If you do not have directories of static assets of this type, or they are small and you don\u2019t care about them, you can disable the warning <code>You have Mutagen enabled and your 'php' project type doesn't have upload_dirs set.</code> by setting <code>disable_upload_dirs_warning</code> with <code>ddev config --disable-upload-dirs-warning</code>.</p> Type Default Usage  project A list of directories.","boost":0.5},{"location":"users/configuration/config/#use_dns_when_possible","title":"<code>use_dns_when_possible</code>","text":"<p>Whether to use DNS instead of editing <code>/etc/hosts</code>.</p> Type Default Usage  project <code>true</code> Can be <code>true</code> or <code>false</code>. <p>When <code>false</code>, DDEV will always update the <code>/etc/hosts</code> file with the project hostname instead of using DNS for name resolution.</p> <p>See Using DDEV Offline.</p>","boost":0.5},{"location":"users/configuration/config/#use_docker_compose_from_path","title":"<code>use_docker_compose_from_path</code>","text":"<p>Whether to use the system-installed docker-compose. You can otherwise use <code>required_docker_compose_version</code> to specify a version for download.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will use the docker-compose found in on your system\u2019s path instead of using its private, known-good, docker-compose version.</p> <p>Troubleshooting Only!</p> <p>This should only be used in specific cases like troubleshooting. (It is used in the Docker Compose automated tests.)</p>","boost":0.5},{"location":"users/configuration/config/#use_hardened_images","title":"<code>use_hardened_images</code>","text":"<p>Whether to use hardened images for internet deployment.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>When <code>true</code>, more secure hardened images are used for an internet deployment. These do not include sudo in the web container, and the container is run without elevated privileges. Generally used with the hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#use_letsencrypt","title":"<code>use_letsencrypt</code>","text":"<p>Whether to enable Let\u2019s Encrypt integration. (Works in conjunction with <code>letsencrypt_email</code>.)</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>May also be set via <code>ddev config global --use-letsencrypt</code> or <code>ddev config global --use-letsencrypt=false</code>. When <code>true</code>, <code>letsencrypt_email</code> must also be set and the system must be available on the internet. Used with the hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#web_environment","title":"<code>web_environment</code>","text":"<p>Additional custom environment variables for a project\u2019s web container. (Or for all projects if used globally.)</p> Type Default Usage  project global <code>[]</code> \u200c","boost":0.5},{"location":"users/configuration/config/#web_extra_daemons","title":"<code>web_extra_daemons</code>","text":"<p>Additional daemons that should automatically be started in the web container.</p> Type Default Usage  project <code>[]</code> \u200c","boost":0.5},{"location":"users/configuration/config/#web_extra_exposed_ports","title":"<code>web_extra_exposed_ports</code>","text":"<p>Additional named sets of ports to expose via <code>ddev-router</code>.</p> Type Default Usage  project <code>[]</code> \u200c <p>For common front-end development tools like Vite, see the Vite Integration documentation for complete configuration examples.</p>","boost":0.5},{"location":"users/configuration/config/#webimage","title":"<code>webimage</code>","text":"<p>Proceed with caution</p> <p>It\u2019s unusual to change this option, and we don\u2019t recommend it without Docker experience and a good reason. Typically, this means additions to the existing web image using a <code>.ddev/web-build/Dockerfile.*</code>.</p> <p>The Docker image to use for the web server.</p> Type Default Usage  project <code>ddev/ddev-webserver</code> Specify your own image based on ddev/ddev-webserver.","boost":0.5},{"location":"users/configuration/config/#webimage_extra_packages","title":"<code>webimage_extra_packages</code>","text":"<p>Extra Debian packages for the project\u2019s web container.</p> Type Default Usage  project <code>[]</code> \u200c <p>Example: <code>webimage_extra_packages: [php${DDEV_PHP_VERSION}-yac, php${DDEV_PHP_VERSION}-bcmath]</code> will add the <code>php-yac</code> and <code>php-bcmath</code> packages when the web container is built.</p>","boost":0.5},{"location":"users/configuration/config/#webserver_type","title":"<code>webserver_type</code>","text":"<p>Which available web server type should be used.</p> Type Default Usage  project <code>nginx-fpm</code> Can be <code>nginx-fpm</code>, <code>apache-fpm</code>, <code>generic</code>. <p>To change from the default <code>nginx-fpm</code> to <code>apache-fpm</code>, for example, you would need to edit your project\u2019s <code>.ddev/config.yaml</code> to include the following:</p> <pre><code>webserver_type: apache-fpm\n</code></pre> <p>This is the same as <code>ddev config --webserver-type=apache-fpm</code>.</p> <p>Then run <code>ddev restart</code> to have the change take effect.</p> <p>The <code>generic</code> type is special: It tells DDEV not to run any web server daemons, and the user can configure their own with the <code>web_extra_daemons</code> option.</p>","boost":0.5},{"location":"users/configuration/config/#working_dir","title":"<code>working_dir</code>","text":"<p>Working directories used by <code>ddev exec</code> and <code>ddev ssh</code>.</p> Type Default Usage  project \u200c \u200c <p>Example: <code>working_dir: { web: \"/var/www\", db: \"/etc\" }</code> sets the working directories for the <code>web</code> and <code>db</code> containers.</p>","boost":0.5},{"location":"users/configuration/config/#wsl2_no_windows_hosts_mgt","title":"<code>wsl2_no_windows_hosts_mgt</code>","text":"<p>Proceed with caution</p> <p>It\u2019s unusual to change this option, and we don\u2019t recommend it. On Windows, it may prevent site access when using a custom <code>project_tld</code> or working offline.</p> <p>(WSL2 only) Whether to disable the management and checking of the Windows hosts file. By default, when using WSL2, DDEV manages the system-wide hosts file on the Windows side (normally <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code>) by using <code>ddev.exe</code> installed on the Windows side. This normally works better for all applications, including browsers and IDEs. However, this behavior can be disabled by setting <code>wsl_no_windows_hosts_mgt: true</code>.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>May also be set via <code>ddev config global --wsl2-no-windows-hosts-mgt</code> or <code>ddev config global --wsl2-no-windows-hosts-mgt=false</code>.</p>","boost":0.5},{"location":"users/configuration/config/#xdebug_enabled","title":"<code>xdebug_enabled</code>","text":"<p>Whether Xdebug should be enabled for step debugging or profiling.</p> Type Default Usage  project <code>false</code> Please leave this <code>false</code> in most cases. Most people use <code>ddev xdebug</code> and <code>ddev xdebug off</code> (or <code>ddev xdebug toggle</code>) commands.","boost":0.5},{"location":"users/configuration/config/#xdebug_ide_location","title":"<code>xdebug_ide_location</code>","text":"<p>Proceed with caution</p> <p>It\u2019s unusual to change this option, and we don\u2019t recommend it. Ask for help in one of our support channels before changing it unless you understand its use completely.</p> <p>Adjust Xdebug listen location for WSL2 or in-container. This is used very rarely.</p> Type Default Usage  global <code>\"\"</code> Can be empty (<code>\"\"</code>), <code>\"wsl2\"</code>, <code>\"container\"</code>, or an explicit IP address. <p>For PhpStorm running inside WSL2 (or JetBrains Gateway), use <code>\"wsl2\"</code>. For in-container like VS Code Language Server, set to <code>\"container\"</code>. It can also be set to an explicit IP address.</p> <p>Examples:</p> <ul> <li><code>xdebug_ide_location: 172.16.0.2</code> when you need to provide an explicit IP address where the IDE is listening. This is very unusual.</li> <li><code>xdebug_ide_location: container</code> when the IDE is actually listening inside the <code>ddev-webserver</code> container. This is only done very occasionally with obscure Visual Studio Code setups like VS Code Language Server.</li> <li><code>xdebug_ide_location: wsl2</code> when an IDE is running (or listening) in WSL2. This is the situation when running an IDE directly inside WSL2 instead of running it on Windows.</li> </ul>","boost":0.5},{"location":"users/configuration/config/#xhgui_http_port","title":"<code>xhgui_http_port</code>","text":"<p>Port for project\u2019s XHGui HTTP URL (for router). Only changed when there are port conflicts on the default port 8143.</p> Type Default Usage  project global <code>8143</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#xhgui_https_port","title":"<code>xhgui_https_port</code>","text":"<p>Port for project\u2019s XHGui HTTPS URL (for router). Only changed when there are port conflicts on the default port 8142.</p> Type Default Usage  project global <code>8142</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#xhprof_mode","title":"<code>xhprof_mode</code>","text":"<p>Whether XHProf should use <code>prepend</code> or <code>xhgui</code> mode.</p> Type Default Usage  project global <code>prepend</code> Can be <code>global</code>, <code>prepend</code> or <code>xhgui</code>.","boost":0.5},{"location":"users/configuration/hooks/","title":"Hooks","text":"<p>Most DDEV commands provide hooks to run tasks before or after the main command executes. To automate setup tasks specific to your project, define them in the project\u2019s <code>config.yaml</code> file.</p> <p>To define command tasks in your configuration, specify the desired command hook as a subfield to <code>hooks</code>, then a list of tasks to run:</p> <pre><code>hooks:\n  post-start:\n    - exec: \"simple command expression\"\n    - exec: \"ls &gt;/dev/null &amp;&amp; touch /var/www/html/somefile.txt\"\n    - exec-host: \"simple command expression\"\n  post-import-db:\n    - exec: \"drush uli\"\n</code></pre>"},{"location":"users/configuration/hooks/#supported-command-hooks","title":"Supported Command Hooks","text":"<ul> <li> <p><code>pre-start</code>: Hooks into <code>ddev start</code>. Execute tasks before the project environment starts.</p> <p>Tip</p> <p>Only <code>exec-host</code> tasks can run during <code>pre-start</code> because the containers are not yet running. See Supported Tasks below.</p> </li> <li> <p><code>post-start</code>: Execute tasks after the project environment has started.</p> </li> <li><code>pre-import-db</code> and <code>post-import-db</code>: Execute tasks before or after database import.</li> <li><code>pre-import-files</code> and <code>post-import-files</code>: Execute tasks before or after files are imported.</li> <li><code>pre-composer</code> and <code>post-composer</code>: Execute tasks before or after the <code>composer</code> command.</li> <li><code>pre-share</code> and <code>post-share</code>: Execute tasks before or after the <code>share</code> command.</li> <li><code>pre-stop</code>, <code>pre-config</code>, <code>post-config</code>, <code>pre-exec</code>, <code>post-exec</code>, <code>pre-pull</code>, <code>post-pull</code>, <code>pre-push</code>, <code>post-push</code>, <code>pre-snapshot</code>, <code>post-snapshot</code>, <code>pre-delete-snapshot</code>, <code>post-delete-snapshot</code>, <code>pre-restore-snapshot</code>, <code>post-restore-snapshot</code>: Execute as the name suggests.</li> <li> <p><code>post-stop</code>: Hooks into <code>ddev stop</code>. Execute tasks after the project environment stopped.</p> <p>Tip</p> <p>Only <code>exec-host</code> tasks can run during <code>post-stop</code>. See Supported Tasks below.</p> </li> </ul>"},{"location":"users/configuration/hooks/#supported-tasks","title":"Supported Tasks","text":"<p>DDEV currently supports these tasks:</p> <ul> <li><code>exec</code> to execute a command in any service/container.</li> <li><code>exec-host</code> to execute a command on the host.</li> <li><code>composer</code> to execute a Composer command in the web container.</li> </ul>"},{"location":"users/configuration/hooks/#exec-execute-a-shell-command-in-a-container-defaults-to-web-container","title":"<code>exec</code>: Execute a shell command in a container (defaults to web container)","text":"<p>Value: string providing the command to run. Commands requiring user interaction are not supported. You can also add a \u201cservice\u201d key to the command, specifying to run it on the <code>db</code> container or any other container you use.</p> <p>Example: Use Drush to rebuild all caches and get a user login link after database import.</p> <pre><code>hooks:\n  post-import-db:\n    - exec: drush cache:rebuild\n    - exec: drush user:login\n</code></pre> <p>Example: Use wp-cli to replace the production URL with development URL in a WordPress project\u2019s database.</p> <pre><code>hooks:\n  post-import-db:\n    - exec: wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\n</code></pre> <p>Example: Use Drush to sanitize a database by removing or obfuscating user data.</p> <pre><code>hooks:\n  post-import-db:\n    - exec: drush sql:sanitize\n</code></pre> <p>Example: Add an extra database before <code>import-db</code>, executing in <code>db</code> container.</p> <pre><code>hooks:\n  pre-import-db:\n    - exec: mysql -uroot -proot -e \"CREATE DATABASE IF NOT EXISTS some_new_database;\"\n      service: db\n</code></pre> <p>Example: Add the common <code>ll</code> alias into the <code>web</code> container\u2019s <code>.bashrc</code> file.</p> <pre><code>hooks:\n  post-start:\n  - exec: sudo echo alias ll=\\\"ls -lhA\\\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Tip</p> <p>This could be done more efficiently via <code>.ddev/web-build/Dockerfile</code> as explained in Customizing Images.</p> <p>Advanced usages may require running commands directly with explicit arguments. This approach is useful when Bash interpretation is not required (no environment variables, no redirection, etc.).</p> <pre><code>hooks:\n  post-start:\n  - exec:\n    exec_raw: [ls, -lR, /var/www/html]\n</code></pre>"},{"location":"users/configuration/hooks/#exec-host-execute-a-shell-command-on-the-host-system","title":"<code>exec-host</code>: Execute a shell command on the host system","text":"<p>Value: string providing the command to run. Commands requiring user interaction are not supported.</p> <pre><code>hooks:\n  pre-start:\n    - exec-host: \"command to run\"\n</code></pre>"},{"location":"users/configuration/hooks/#composer-execute-a-composer-command-in-the-web-container","title":"<code>composer</code>: Execute a Composer command in the web container","text":"<p>Value: string providing the Composer command to run.</p> <p>Example:</p> <pre><code>hooks:\n  post-start:\n    - composer: config discard-changes true\n</code></pre>"},{"location":"users/configuration/hooks/#wordpress-example","title":"WordPress Example","text":"<pre><code>hooks:\n  post-start:\n    # Install WordPress after start\n    - exec: \"wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db\"\n    - exec: \"wp core install --url=http://mysite.ddev.site --title=MySite --admin_user=admin --admin_email=admin@mail.test\"\n  post-import-db:\n    # Update the URL of your project throughout your database after import\n    - exec: \"wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\"\n</code></pre>"},{"location":"users/configuration/hooks/#drupal-7-example","title":"Drupal 7 Example","text":"<pre><code>hooks:\n  post-start:\n    # Install Drupal after start if not installed already\n    - exec: \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=db:db@db/db\"\n    # Generate a one-time login link for the admin account\n    - exec: \"drush uli\"\n  post-import-db:\n    # Set the project name\n    - exec: \"drush vset site_name MyDevSite\"\n    # Enable the environment indicator module\n    - exec: \"drush en -y environment_indicator\"\n    # Clear the cache\n    - exec: \"drush cc all\"\n</code></pre>"},{"location":"users/configuration/hooks/#drupal-10-example","title":"Drupal 10 Example","text":"<pre><code>hooks:\n  post-start:\n    # Install Composer dependencies from the web container\n    - composer: install\n    # Generate a one-time login link for the admin account\n    - exec: \"drush user:login\"\n  post-import-db:\n    # Sanitize the database\n    - exec: \"drush sql:sanitize\"\n    # Apply any database updates\n    - exec: \"drush updatedb\"\n    # Rebuild all caches\n    - exec: \"drush cache:rebuild\"\n</code></pre>"},{"location":"users/configuration/hooks/#typo3-example","title":"TYPO3 Example","text":"<pre><code>hooks:\n    post-start:\n      - composer: install\n</code></pre>"},{"location":"users/debugging-profiling/blackfire-profiling/","title":"Blackfire Profiling","text":"<p>DDEV has built-in Blackfire integration.</p>"},{"location":"users/debugging-profiling/blackfire-profiling/#basic-blackfire-usage-using-browser-plugin","title":"Basic Blackfire Usage (Using Browser Plugin)","text":"<ol> <li>Create a Blackfire account. (Free Blackfire accounts are no longer available; see Blackfire pricing.)</li> <li>Install the Chrome or Firefox browser plugin.</li> <li>From Blackfire\u2019s control panel, get the Server ID, Server Token, Client ID, and Client Token from your Account \u2192 Credentials or environment.</li> <li>Configure DDEV with the credentials, <code>ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=&lt;id&gt;,BLACKFIRE_SERVER_TOKEN=&lt;token&gt;,BLACKFIRE_CLIENT_ID=&lt;id&gt;,BLACKFIRE_CLIENT_TOKEN=&lt;token&gt;\"</code>. It\u2019s easiest to do this globally, but you can do the same thing at the project level using <code>ddev config --web-environment-add</code>. (It may be easier to manually edit the relevant config file, <code>.ddev/config.yaml</code> or <code>~/.ddev/global_config.yaml</code>.)</li> <li><code>ddev start</code>.</li> <li><code>ddev blackfire on</code> to enable, <code>ddev blackfire off</code> to disable, <code>ddev blackfire status</code> to see status.</li> <li>With Blackfire enabled, you can use the browser extension.</li> </ol>"},{"location":"users/debugging-profiling/blackfire-profiling/#profiling-with-the-blackfire-cli","title":"Profiling with the Blackfire CLI","text":"<p>The Blackfire CLI is built into the web container, so you don\u2019t need to install it yourself.</p> <ol> <li> <p>Add the <code>BLACKFIRE_SERVER_ID</code>, <code>BLACKFIRE_SERVER_TOKEN</code>, <code>BLACKFIRE_CLIENT_ID</code>, and <code>BLACKFIRE_CLIENT_TOKEN</code> environment variables to <code>~/.ddev/global_config.yaml</code> via the <code>web_environment</code> key:</p> <pre><code>web_environment:\n    - OTHER_ENV=something\n    - BLACKFIRE_SERVER_ID=dde5f66d-xxxxxx\n    - BLACKFIRE_SERVER_TOKEN=09b0ec-xxxxx\n    - BLACKFIRE_CLIENT_ID=f5e88b7e-xxxxx\n    - BLACKFIRE_CLIENT_TOKEN=00cee15-xxxxx1\n</code></pre> <p>You can also do this with <code>ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=&lt;id&gt;,BLACKFIRE_SERVER_TOKEN=&lt;token&gt;,BLACKFIRE_CLIENT_ID=&lt;id&gt;,BLACKFIRE_CLIENT_TOKEN=&lt;token&gt;\"</code>.</p> </li> <li> <p><code>ddev start</code>.</p> </li> <li><code>ddev blackfire on</code>.</li> <li>Click the \u201cBlackfire\u201d browser extension to profile.</li> </ol>"},{"location":"users/debugging-profiling/blackfire-profiling/#examples-of-using-the-blackfire-cli","title":"Examples of Using the Blackfire CLI","text":"<ul> <li><code>ddev blackfire on</code> and <code>ddev blackfire off</code></li> <li><code>ddev exec blackfire curl https://&lt;yoursite&gt;.ddev.site</code></li> <li><code>ddev exec blackfire run drush st</code></li> <li><code>ddev exec blackfire curl https://&lt;yoursite&gt;.ddev.site</code></li> <li><code>ddev ssh</code> and use the Blackfire CLI as described in Profiling HTTP Requests with the CLI.</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/","title":"Step Debugging with Xdebug","text":"<p>Every DDEV project is automatically configured with Xdebug so that popular IDEs can do step debugging of PHP code.</p> <p>Xdebug is a server-side tool, and it\u2019s installed automatically in the container so you don\u2019t have to install or configure it on your workstation. Xdebug is disabled by default for performance reasons, so you\u2019ll need to enable it and configure your IDE before can start debugging.</p> <p>All IDEs basically work the same, listening on a port and reacting when they\u2019re contacted there. IDEs other than those listed here work fine, if they listen on Xdebug\u2019s default port 9003.</p> <p>Key facts:</p> <ul> <li>Enable Xdebug by running <code>ddev xdebug</code> or <code>ddev xdebug on</code> from your project directory. It will remain enabled until you start or restart the project.</li> <li>Disable Xdebug for better performance when not debugging with <code>ddev xdebug off</code>.</li> <li>Toggle Xdebug on and off easily with <code>ddev xdebug toggle</code>.</li> <li><code>ddev xdebug status</code> will show Xdebug\u2019s current status.</li> <li>You may need to open port 9003 in your firewall to allow Xdebug access. (See Troubleshooting Xdebug below.)</li> <li>The IDE\u2019s debug server port must be set to Xdebug\u2019s default 9003, which is already the case in popular IDEs. If the unusual case that you have a port conflict, see Using Xdebug on a Port Other than the Default 9003 below.</li> <li>In the case of using running your IDE inside WSL2 (using WSLg) or with a proxy setup like JetBrains Gateway, you can set that with <code>ddev config global --xdebug-ide-location=wsl2</code>. If you\u2019re running your IDE with a proxy inside the web container, you can set that with <code>ddev config global --xdebug-ide-location=container</code>.</li> <li>To debug Drush 13+ commands on Drupal see instructions.</li> </ul> <p>For more background on Xdebug, see Xdebug documentation. The intention here is that one won\u2019t have to understand Xdebug to do debugging.</p>"},{"location":"users/debugging-profiling/step-debugging/#ide-setup","title":"IDE Setup","text":"<ul> <li>PhpStorm</li> <li>Visual Studio Code (VS Code)</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-debugging-setup","title":"PhpStorm Debugging Setup","text":"<p>PhpStorm is a leading PHP development IDE with extensive built-in debugging support. It provides two ways to do debugging: \u201czero-configuration\u201d debugging which requires very little effort in the PhpStorm IDE, and a \u201crun configuration\u201d you can set up like Netbeans or Eclipse.</p> <p>If you\u2019re using PhpStorm inside WSL2 or Linux</p> <p>Make PhpStorm listen for Xdebug using IPv4 by visiting Help \u2192 Edit Custom VM Options, and adding an additional line: <code>-Djava.net.preferIPv4Stack=true</code>. The Linux version of PhpStorm seems to otherwise default to only using IPv6.</p> <p>If using PhpStorm inside WSL2 or with JetBrains Gateway</p> <p>Make PhpStorm listen to the right IP address with <code>ddev config global --xdebug-ide-location=wsl2</code></p>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-zero-configuration-debugging","title":"PhpStorm Zero-Configuration Debugging","text":"<p>PhpStorm zero-configuration debugging will automatically detect a connection and offer to create a \u201cserver\u201d that maps your workstation files to the container. This means you only have to:</p> <ol> <li>Toggle the \u201cStart Listening for PHP Debug Connections\u201d button:     </li> <li>Set a breakpoint.</li> <li>Visit a page that should stop in the breakpoint you set.</li> <li>PhpStorm will ask you what mapping to use, so it can figure out how to map the path inside the container to the path on your workstation. The first time you do this with a project, PhpStorm will pop up a \u201cserver\u201d dialog box to set the mapping. The default will work, but it\u2019s best to click the checkbox to map the whole project directory to <code>/var/www/html</code>.</li> </ol> <p>When using this zero-configuration option:</p> <ol> <li>Use the latest DDEV version.</li> <li>Under Run \u2192 Edit Configurations, check that there are no servers already defined. PhpStorm will create a new server for you if no others exist. You can delete all servers and have PhpStorm create a new one, or you can create/edit an existing server as discussed below.</li> </ol>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-rundebug-configuration-debugging","title":"PhpStorm \u201cRun/Debug Configuration\u201d Debugging","text":"<p>PhpStorm run/debug configurations require more setup but may be easier and more flexible for some people.</p> <ol> <li>Under the Run menu select Edit configurations.</li> <li>Click the + in the upper left and choose PHP Web Page to create a configuration. Give it a reasonable name.</li> <li>Create a \u201cserver\u201d for the project. Make sure Name is exactly the same as your host (e.g. <code>my-site.ddev.site</code>):     </li> <li>Add file mappings for the files on the server. Click on the local repository path and add <code>/var/www/html</code> as the Absolute path on the server and your repository root as the path on the host.</li> <li>Set an appropriate breakpoint.</li> <li>Start debugging by clicking the \u201cdebug\u201d button, which will launch a page in your browser:     </li> </ol> <p>If you\u2019re using additional_hostnames</p> <p>If you also want Xdebug to trigger when using a URL other than the primary URL (as with  <code>additional_hostnames</code> or <code>additional_fqdns</code>), create a copy of the PhpStorm <code>server</code> (Settings-&gt;PHP-&gt;Servers) with the current settings and change the host and name to the desired ones. This will tell PHP Storm to listen to that hostname with the appropriate mapping.</p>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-and-command-line-debugging","title":"PhpStorm and Command-Line Debugging","text":"<p>If you need to debug command-line PHP processes, especially code that\u2019s outside the docroot, the environment variable <code>PHP_IDE_CONFIG</code> is already set inside the web container, so you don\u2019t have to do much more.</p> <p>However, if you\u2019ve not yet used PhpStorm with Xdebug for a regular web request, do that to automatically create the PhpStorm \u201cserver\u201d with the same name as your primary URL (Languages and Frameworks \u2192 PHP \u2192 Servers). The key job of the server is to map filesystem locations on the workstation (your computer) to filesystem locations on the remote server\u2014in this case the <code>ddev-webserver</code> container. Often, PhpStorm automatically sets up a mapping that doesn\u2019t include the entire project, meaning things like the <code>vendor</code> directory may not be mapped. You can fix this by mapping the top-level directory of your project to <code>/var/www/html</code> in the container: </p> <p>If you encounter the error: \u201cCan\u2019t find a source position. Server with name \u2018SITE_NAME.ddev.site\u2019 doesn\u2019t exist\u201d, change the \u201cPHP | Servers\u201d Name to <code>SITE_NAME.ddev.site</code>. In the example screenshot above both Name and Host are \u201c<code>d8composer.ddev.site</code>\u201d.</p>"},{"location":"users/debugging-profiling/step-debugging/#visual-studio-code-vs-code-debugging-setup","title":"Visual Studio Code (VS Code) Debugging Setup","text":"<ol> <li>Install the PHP Debug extension.</li> <li>In the menu, choose Run \u2192 Open Configuration and add the \u201cListen for Xdebug\u201d configuration snippet to the project\u2019s <code>.vscode/launch.json</code>.</li> <li>In the menu, choose Terminal \u2192 Configure tasks \u2192 Create task.json from template \u2192 Others and add the \u201cDDEV: Enable Xdebug\u201d and \u201cDDEV: Disable Xdebug\u201d task snippet to the project\u2019s <code>.vscode/tasks.json</code>.</li> <li>Set a breakpoint in your <code>index.php</code>. If it isn\u2019t solid red, restart.</li> <li>In the menu, choose Run \u2192 Start Debugging. You may have to select \u201cListen for Xdebug\u201d by the green arrowhead at the top left. The bottom pane of VS Code should now be orange (live) and should say \u201cListen for Xdebug\u201d.</li> <li>In a browser, visit your project and confirm you hit the breakpoint.</li> </ol> <p>If you\u2019re using VS Code on Windows with WSL2</p> <p>VS Code should suggest two extensions if you have WSL2 enabled along with a PHP project: \u201cPHP Debug\u201d and \u201cWSL\u201d. You\u2019ll need to enable both of these extensions in your distro (e.g. Ubuntu).</p>"},{"location":"users/debugging-profiling/step-debugging/#using-xdebug-on-a-port-other-than-the-default-9003","title":"Using Xdebug on a Port Other than the Default 9003","text":"<p>By default, DDEV is set up to contact the default port, port 9003 on your IDE. However, if you have something else listening on that port or your IDE does not yet default to 9003, you\u2019ll need to change the port. (PhpStorm and VS Code have switch to supporting 9003 instead of 9000 for some time now.)</p> <ul> <li> <p>To override the port, add an override file in the project\u2019s <code>.ddev/php directory</code>. For example, a file <code>.ddev/php/xdebug_client_port.ini</code> would change to use the legacy port 9000:</p> <pre><code>[PHP]\nxdebug.client_port=9000\n</code></pre> </li> <li> <p>Then change your IDE\u2019s configuration to listen on the new port.</p> </li> </ul> <p>Tip</p> <p>If you\u2019re using a PHP version below 7.2, you\u2019ll be using Xdebug version 2.x instead of 3.x and your port config should be <code>xdebug.remote_port</code> instead.</p>"},{"location":"users/debugging-profiling/step-debugging/#composer","title":"Composer","text":"<p>Composer disables Xdebug even if it\u2019s enabled in DDEV. To debug Composer itself, you need to force Xdebug to stay active.</p> <p>According to the Composer docs, set the <code>COMPOSER_ALLOW_XDEBUG=1</code> environment variable to allow all Composer commands to run with Xdebug when the extension is enabled.</p> <p>Debugging code in runtime</p> <p>Composer may move some classes (like plugins) to temporary files at runtime, so IDE breakpoints may not always be triggered. Use <code>xdebug_break()</code> directly in code when needed.</p>"},{"location":"users/debugging-profiling/step-debugging/#troubleshooting-xdebug","title":"Troubleshooting Xdebug","text":"<p>The basic thing to understand about Xdebug is that it\u2019s a network protocol. Your IDE (like PhpStorm) will listen on the Xdebug port (port 9003). If Xdebug is enabled in the DDEV web container (<code>ddev xdebug on</code>), PHP inside that container will try to open a TCP connection to the IDE. Docker\u2019s networking places the host-side listening IDE at <code>host.docker.internal:9003</code>, so you have to make sure the network connection is clear and can be made and everything should work. Firewalls may get in the way.</p> <p>Here are basic steps to take to sort out any difficulty:</p> <ul> <li>Make sure your IDE is listening for Xdebug.</li> <li>If you have set the global xdebug_ide_location to anything please reset it to defaults before continuing. It is only for a very tiny subset of users. <code>ddev config global --xdebug-ide-location=\"\"</code> and <code>ddev restart</code>.</li> <li><code>ddev logs</code> may show you something like <code>Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (fallback through xdebug.client_host/xdebug.client_port) :-(</code>. If it does, it may mean that your firewall is blocking the connection, or in a small number of cases that <code>host.docker.internal</code> is not figured out successfully by DDEV or Docker. If it does:<ul> <li>Temporarily disable your firewall. On Windows/WSL this is typically Windows Defender; on macOS you\u2019ll find it in settings; on Debian/Ubuntu it\u2019s typically <code>ufw</code> so <code>sudo ufw disable</code>.</li> <li>If disabling the firewall fixes the problem, re-enable the firewall and add an exception for port 9003. Your firewall will have a way to do this; on Debian/Ubuntu run <code>sudo ufw allow 9003</code>.</li> </ul> </li> <li>Delete existing PhpStorm \u201cservers\u201d in settings, or recreate VS Code\u2019s <code>launch.json</code> file exactly as shown in the instructions here.</li> <li>Remember the standard Xdebug port is port 9003, and that\u2019s what all instructions here use. In the past some IDEs used port 9000.</li> <li>If your <code>~/.ddev/global_config.yaml</code> has <code>xdebug_ide_location</code> set, remove that to begin with except for very unusual situations. You can set it to the default value with <code>ddev config global --xdebug-ide-location=\"\"</code>.</li> <li>Reboot your computer.</li> <li>If you\u2019re running WSL2 and have PhpStorm running inside WSL2 (the Linux version of PhpStorm) then <code>ddev config global --xdebug-ide-location=wsl2</code>. (This is unusual.)</li> <li>Temporarily disable any firewall or VPN if you\u2019re having trouble. Xdebug is a network protocol, and the PHP process inside the web container must be able to establish a TCP connection to the listening IDE (PhpStorm, for example).</li> <li>Confirm that DDEV\u2019s <code>xdebug_ide_location</code> config setting is set properly, which in most cases should be set to an empty string. Check both your project\u2019s <code>.ddev/config.yaml</code> and DDEV\u2019s global <code>~/.ddev/global_config.yaml</code>.</li> <li>Use <code>ddev xdebug on</code> to enable Xdebug when you want it, and <code>ddev xdebug off</code> when you\u2019re done with it.</li> <li>You can also use <code>ddev xdebug toggle</code> to easily toggle Xdebug on and off.</li> <li>Set a breakpoint at the first executable line of your <code>index.php</code>.</li> <li>Tell your IDE to start listening. (PhpStorm: click the bug-listen button, VS Code: run the debugger.)</li> <li>Use <code>curl</code> or a browser to create a web request. For example, <code>curl https://d10.ddev.site</code> or run <code>ddev exec curl localhost</code>.</li> <li><code>ddev ssh</code> into the web container. Can you run <code>telnet host.docker.internal 9003</code> and have it connect? If not, follow the instructions above about disabling firewall and adding an exception for port 9003.</li> <li>In PhpStorm, disable the \u201clisten for connections\u201d button so it won\u2019t listen. Or exit PhpStorm. With another IDE like VS Code, stop the debugger from listening.</li> <li><code>ddev ssh</code> into the web container. Can you run <code>telnet host.docker.internal 9003</code> and have it connect? If so, you have something else running on port 9003. On the host, use <code>sudo lsof -i :9003 -sTCP:LISTEN</code> to find out what\u2019s there and stop it. Don\u2019t continue debugging until your telnet command does not connect. (On Windows WSL2 you may have to look for listeners both inside WSL2 and on the Windows side.)</li> <li>Now click the \u201clisten\u201d button on PhpStorm to start listening for connections.</li> <li><code>ddev ssh</code> and try the <code>telnet host.docker.internal 9003</code> again. It should connect. If not, maybe PhpStorm is not listening, or not configured to listen on port 9003?</li> <li>Check to make sure that Xdebug is enabled. You can use <code>php -i | grep -i xdebug</code> inside the container, or use any other technique you want that gives the output of <code>phpinfo()</code>, including Drupal\u2019s <code>admin/reports/status/php</code>. You should see <code>with Xdebug v3</code> and <code>php -i | grep xdebug.mode</code> should give you <code>xdebug.mode =&gt; debug,develop =&gt; debug,develop\"</code>.</li> <li>Set a breakpoint in the first relevant line of your <code>index.php</code> and then visit the site in a browser. It should stop at that first line.</li> <li>If you\u2019re using a flavor of IDE that connects directly into the web container like VS Code Language Server, you may want to use the global <code>xdebug_ide_location</code> setting to explain to DDEV the situation. For example, <code>ddev config global --xdebug-ide-location=container</code>, which tells the PHP/Xdebug to connect directly to the listener inside the container.</li> <li>To find out what DDEV is using for the value of <code>host.docker.internal</code> you can run <code>DDEV_DEBUG=true ddev start</code> and it will explain how it\u2019s getting that value, which help troubleshoot some problems. You\u2019ll see something like <code>host.docker.internal='' because no other case was discovered</code> which can explain the usage.</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/#wsl2-xdebug-troubleshooting","title":"WSL2 Xdebug Troubleshooting","text":"<p>WSL2 is a complicated environment for Xdebug, especially if you\u2019re running your IDE on the Windows side, as most people do.</p> <ul> <li>With PhpStorm, consider using the \u201cRemote Development\u201d feature to connect to WSL. That runs an actual PhpStorm instance on WSL2 to reduce networking complexity.</li> <li>When using an IDE inside WSL2\u2014like you would when running PhpStorm or Visual Studio Code inside WSL2, or using PhpStorm\u2019s \u201cRemote Development\u201d feature\u2014you may need to use the <code>xdebug_ide_location</code> setting to tell Xdebug to expect the IDE under WSL2. You can do this by running <code>ddev config global --xdebug-ide-location=wsl2</code>.</li> <li><code>export DDEV_DEBUG=true &amp;&amp; ddev start</code> will show you how DDEV is calculating the <code>host.docker.internal</code> IP address to be used when contacting the IDE, which may give a hint about problems you might discover in the general troubleshooting discussed above, when trying to connect to the listening IDE.</li> <li>If you\u2019re using docker-ce and have the IDE on the Windows side, <code>ip -4 route show default</code> in the WSL2 distro is the best known way to figure out where the IDE is in the Windows networking scheme, so DDEV uses that to determine <code>host.docker.internal</code>. That value should be the same as <code>host.docker.internal</code>, so running <code>ddev exec ping -c 1 host.docker.internal</code> will show you what\u2019s actually being used. If your IDE is actually at a different address, you can tell DDEV to override the discovered value for <code>host.docker.internal</code> by running <code>ddev config global --xdebug-ide-location=&lt;some_ip_address&gt;</code>.</li> <li>If you\u2019re using PhpStorm inside WSL2 (or perhaps other Linux configurations), go to Help \u2192 Edit Custom VM Options and add an additional line: <code>-Djava.net.preferIPv4Stack=true</code> This makes PhpStorm listen for Xdebug using IPv4; the Linux version of PhpStorm seems to default to using only IPv6.</li> <li>If you\u2019re on WSL2 using Docker Desktop, make sure that the <code>docker</code> command is the one provided by Docker Desktop. <code>ls -l $(which docker)</code> should show a link to <code>/mnt/wsl/docker-desktop...</code>. If you\u2019re on WSL2 using Docker installed inside WSL2, make sure that <code>ls -l $(which docker)</code> is not a link to <code>/mnt/wsl</code>.</li> <li>You can run <code>export DDEV_DEBUG=true</code> and <code>ddev start</code> to get information about how <code>host.docker.internal</code> is figured out, which can help in some situations especially with WSL2. (<code>host.docker.internal</code> inside the web container is where Xdebug thinks it should connect to your IDE. You can see what it is set to by running <code>ddev exec ping host.docker.internal</code>.)</li> <li>On some WSL2 docker-ce systems you may have to work hard to find out the correct IP address for the Windows side. DDEV tries to figure this out for you, but it may not be able to do so. The IP address shown as <code>nameserver</code> in <code>/etc/resolv.conf</code> may be the correct one, and this used to be the recommended technique. If it\u2019s the address you need you can change the address DDEV will use for <code>host.docker.internal</code> using <code>ddev config global --xdebug-ide-location=&lt;some-ip-address&gt;</code>.</li> </ul>"},{"location":"users/debugging-profiling/xdebug-profiling/","title":"Xdebug Profiling","text":"<p>Although DDEV has more sophisticated profiling capabilities with xhprof and Blackfire, it also has built-in support for Xdebug profiling.</p>"},{"location":"users/debugging-profiling/xdebug-profiling/#basic-usage","title":"Basic usage","text":"<ul> <li>Create the directory <code>.ddev/xdebug</code>, which is where the output files will be dumped.</li> <li> <p>Switch Xdebug to profiling mode by adding this in <code>.ddev/php/xdebug.ini</code>:</p> <pre><code>xdebug.mode=profile\nxdebug.start_with_request=yes\nxdebug.output_dir=/var/www/html/.ddev/xdebug\nxdebug.profiler_output_name=trace.%c%p%r%u.out\n</code></pre> </li> <li> <p>Enable Xdebug with <code>ddev xdebug on</code>.</p> </li> <li>Make an HTTP request to the DDEV project and the profile will be located in <code>.ddev/xdebug</code> directory.</li> <li>Analyze it with any call graph viewer, for example kcachegrind.</li> <li>When you\u2019re done, execute <code>ddev xdebug off</code> to avoid generating unneeded profile files.</li> <li>You can also toggle Xdebug on and off using <code>ddev xdebug toggle</code>.</li> </ul>"},{"location":"users/debugging-profiling/xdebug-profiling/#information-links","title":"Information Links","text":"<ul> <li>Xdebug profiling docs</li> <li>kcachegrind</li> </ul>"},{"location":"users/debugging-profiling/xhprof-profiling/","title":"xhprof Profiling","text":"<p>DDEV has built-in support for xhprof. The official PECL xhprof extension only supports PHP &gt;=7.x.</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#simplest-xhprof-usage-with-xhgui","title":"Simplest XHProf Usage With XHGui","text":"<p>In DDEV v1.24.4+ you can switch to the XHGui profiling mode (permanently) with:</p> <pre><code>ddev config global --xhprof-mode=xhgui &amp;&amp; ddev restart\n</code></pre> <p>Start profiling with:</p> <pre><code>ddev xhgui on\n</code></pre> <p>Visit a few pages in your app to collect profiling data, then:</p> <pre><code>ddev xhgui launch\n</code></pre> <p>The easiest way to work with XHProf is to turn on XHGui, <code>ddev config global --xhprof-mode=xhgui</code>.</p> <p>You can launch the web interface with:</p> <pre><code>ddev xhgui\n</code></pre> <p>More details in XHGui Feature Makes Profiling Even Easier.</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#traditional-xhprof-usage-with-prepend","title":"Traditional XHProf Usage with <code>prepend</code>","text":"<p>If you are having issues with XHGui, you can go back to the regular xhprof web interface.</p> <ul> <li>Use the <code>prepend</code> mode, <code>ddev config global --xhprof-mode=prepend</code>.</li> <li>Enable xhprof with <code>ddev xhprof on</code> (or <code>ddev xhprof</code> or <code>ddev xhprof enable</code>) and check its status with <code>ddev xhprof status</code>.</li> <li><code>ddev xhprof on</code> will show you the URL you can use to see the xhprof analysis, <code>https://&lt;projectname&gt;.ddev.site/xhprof</code> shows recent runs. (It\u2019s often useful to keep a tab or window open with this URL and refresh as needed.)</li> <li>Use a web browser or other technique to visit a page whose performance you want to study. To eliminate first-time cache-building issues, you may want to hit it twice.</li> <li>Visit one of the links provided by <code>ddev xhprof on</code> and study the results.</li> <li>On the profiler output page, you can drill down to the function that you want to study, or use the graphical \u201cView Full Callgraph\u201d link. Click the column headers to sort by number of runs and inclusive or exclusive wall time, then drill down into the function you want to study and do the same.</li> <li>The runs are erased on <code>ddev restart</code>.</li> <li>If you\u2019re using Apache with a custom <code>.ddev/apache/apache-site.conf</code>, you\u2019ll need to make sure it includes <code>Alias \"/xhprof\" \"/var/xhprof/xhprof_html\"</code> from DDEV\u2019s default apache-site.conf.</li> </ul> <p>For a tutorial on how to study the various xhprof reports, see the section \u201cHow to use XHPROF UI\u201d in A Guide to Profiling with XHPROF. It takes a little time to get your eyes used to the reporting. (You don\u2019t need to do any of the installation described in that article!)</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#advanced-xhprof-prepend-configuration","title":"Advanced XHProf <code>prepend</code> Configuration","text":"<p>You can change the contents of the <code>xhprof_prepend</code> function in <code>.ddev/xhprof/xhprof_prepend.php</code>.</p> <p>For example, you may want to add a link to the profile run to the bottom of the profiled web page. The provided <code>xhprof_prepend.php</code> has comments and a sample function to do that, which works with Drupal 7. If you change it, remove the <code>#ddev-generated</code> line from the top, and check it in (<code>git add -f .ddev/xhprof/xhprof_prepend.php</code>).</p> <p>Another example: you could exclude memory profiling so there are fewer columns to study. Change <code>xhprof_enable(XHPROF_FLAGS_MEMORY);</code> to <code>xhprof_enable();</code> in <code>.ddev/xhprof/xhprof_prepend.php</code> and remove the <code>#ddev-generated</code> at the top of the file. See the docs on xhprof_enable().</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#information-links","title":"Information Links","text":"<ul> <li>php.net xhprof</li> <li>Old Facebook xhprof docs</li> <li>pecl.php.net docs</li> <li>Upstream GitHub repository <code>lonngxhinH/xhprof</code></li> </ul>"},{"location":"users/extend/additional-hostnames/","title":"Additional Project Hostnames","text":"<p>You can add hostnames to a project by editing its config file or using the <code>ddev config</code> command.</p> <p>Use the <code>additional_hostnames</code> array in <code>.ddev/config.yaml</code>:</p> <pre><code>name: mysite\n\nadditional_hostnames:\n  - \"extraname\"\n  - \"fr.mysite\"\n  - \"es.mysite\"\n  - \"it.mysite\"\n  - \"*.lotsofnames\"\n</code></pre> <p>This configuration would result in working hostnames of <code>mysite.ddev.site</code>, <code>extraname.ddev.site</code>, <code>fr.mysite.ddev.site</code>, <code>es.mysite.ddev.site</code>, and <code>it.mysite.ddev.site</code>, with full HTTP and HTTPS URLs for each.</p> <p>You could accomplish the same thing by running the <code>ddev config</code> command:</p> <pre><code>ddev config --additional-hostnames extraname,fr.mysite,es.mysite,it.mysite,*.lotsofnames\n</code></pre> <p>In addition, the wildcard <code>*.lotsofnames</code> will result in anything <code>*.lotsofnames.ddev.site</code> being recognized by the project. This works only if you\u2019re connected to the internet, using <code>ddev.site</code> for your top-level-domain, and using DNS for name lookups. (These are all the defaults.)</p> <p>Although we recommend extreme care with this feature, you can also provide <code>additional_fqdns</code> entries, which don\u2019t use the <code>.ddev.site</code> top-level domain. This feature populates your hosts file with entries which may hide the real DNS entries on the internet, causing way too much head-scratching.</p> <p>If you use a FQDN which is resolvable on the internet, you must use <code>use_dns_when_possible: false</code> or configure that with <code>ddev config --use-dns-when-possible=false</code>.</p> <pre><code>name: somename\n\nadditional_fqdns:\n- example.com\n- somesite.example.com\n- anothersite.example.com\n</code></pre> <p>This configuration would result in working FQDNs of <code>somename.ddev.site</code>, <code>example.com</code>, <code>somesite.example.com</code>, and <code>anothersite.example.com</code>.</p> <p>Don\u2019t use the same <code>additional_fqdns</code> or <code>additional_hostnames</code> in two different projects.</p> <p>If you see <code>ddev-router</code> status become unhealthy in <code>ddev list</code>, it\u2019s most often a result of trying to use conflicting FQDNs in more than one project. <code>example.com</code> can only be assigned to one project, or it will break <code>ddev-router</code>.</p> <p>May not work predictably everywhere.</p> <p>This may not work predictably on all systems. There are operating systems and machines where <code>/etc/hosts</code> may not be the first or only resolution technique, especially if the <code>additional_fqdns</code> you use is also in DNS.</p> <p>Don\u2019t override a real domain name!</p> <p>If you use an <code>additional_fqdns</code> that exists on the internet (like <code>www.google.com</code>), your hosts file will override access to the original (internet) site, and you\u2019ll be sad and confused that you can\u2019t get to it.</p>"},{"location":"users/extend/additional-services/","title":"Additional Service Configurations &amp; Add-ons","text":"<p>DDEV projects can be extended using add-ons or custom Docker Compose services.</p>","boost":2},{"location":"users/extend/additional-services/#ddev-add-ons-recommended","title":"DDEV Add-ons (Recommended)","text":"<p>Add-ons are pre-packaged extensions that provide services with automatic installation and configuration.</p> <p>See Using Add-ons for:</p> <ul> <li>Installing add-ons with <code>ddev add-on get</code></li> <li>Managing and customizing add-ons</li> <li>Official add-on catalog</li> </ul> <p>See Creating Add-ons for:</p> <ul> <li>Building your own add-ons</li> <li>Using PHP or Bash actions</li> <li>Publishing and sharing add-ons</li> </ul>","boost":2},{"location":"users/extend/additional-services/#custom-docker-compose-services","title":"Custom Docker Compose Services","text":"<p>For specialized needs or deep customization, you can create custom services using <code>docker-compose.*.yaml</code> files.</p> <p>See Custom Docker Compose Services for:</p> <ul> <li>Manual service configuration</li> <li>Advanced service patterns</li> <li>Converting services to add-ons</li> </ul>","boost":2},{"location":"users/extend/additional-services/#resources","title":"Resources","text":"<ul> <li>DDEV Add-on Registry - Browse and discover add-ons</li> <li>DDEV Add-on Template - Template for creating add-ons</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/","title":"Creating DDEV Add-ons","text":"<p>DDEV add-ons provide a powerful way to extend development environments. You can create add-ons using traditional Bash actions or the new PHP-based actions for complex configuration processing.</p>","boost":2},{"location":"users/extend/creating-add-ons/#quick-start","title":"Quick Start","text":"<ol> <li>Use the <code>ddev-addon-template</code> repository</li> <li>Click \u201cUse this template\u201d to create your own repository</li> <li>Customize the <code>install.yaml</code> file</li> <li>Test with <code>tests.bats</code></li> <li>Create a release when ready</li> <li>Add the <code>ddev-get</code> label to your GitHub repository</li> </ol> <p>See this screencast for a walkthrough.</p>","boost":2},{"location":"users/extend/creating-add-ons/#add-on-structure","title":"Add-on Structure","text":"<p>Every add-on requires an <code>install.yaml</code> file with these sections:</p> <pre><code>name: my-addon\npre_install_actions: []\nproject_files: []\nglobal_files: []\npost_install_actions: []\nremoval_actions: []\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#core-sections","title":"Core Sections","text":"<ul> <li><code>name</code>: The add-on name used in <code>ddev add-on</code> commands</li> <li><code>pre_install_actions</code>: Scripts executed before files are copied</li> <li><code>project_files</code>: Files copied to the project\u2019s <code>.ddev</code> directory</li> <li><code>global_files</code>: Files copied to the global <code>~/.ddev/</code> directory</li> <li><code>post_install_actions</code>: Scripts executed after files are copied</li> <li><code>removal_actions</code>: Scripts executed when removing the add-on</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#advanced-sections","title":"Advanced Sections","text":"<ul> <li><code>ddev_version_constraint</code>: Minimum DDEV version required</li> <li><code>dependencies</code>: Other add-ons this add-on depends on</li> <li><code>yaml_read_files</code>: YAML files to read for template processing</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#action-types-bash-vs-php","title":"Action Types: Bash vs PHP","text":"","boost":2},{"location":"users/extend/creating-add-ons/#traditional-bash-actions","title":"Traditional Bash Actions","text":"<p>Bash actions run directly on the host system and are suitable for:</p> <ul> <li>File permissions and system commands</li> <li>Environment setup and package installation</li> <li>Direct command execution</li> <li>Simple file operations</li> </ul> <pre><code>name: bash-example\n\npost_install_actions:\n  - |\n    #ddev-description: Configure project settings\n    echo \"Setting up project: $DDEV_PROJECT\"\n    chmod +x .ddev/commands/web/mycommand\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#php-based-actions-new","title":"PHP-based Actions \u2728 NEW","text":"<p>PHP actions provide powerful capabilities for:</p> <ul> <li>Complex data processing and YAML manipulation</li> <li>Conditional logic based on project configuration</li> <li>Cross-platform compatibility</li> <li>File content generation and template processing</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#why-use-php-actions","title":"Why Use PHP Actions?","text":"<ul> <li>Better YAML processing with the built-in php-yaml extension</li> <li>Cross-platform compatibility (no shell scripting differences)</li> <li>Rich string manipulation and data processing capabilities</li> <li>Access to DDEV project configuration through environment variables</li> <li>Familiar syntax for developers working with PHP projects</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#basic-php-action","title":"Basic PHP Action","text":"<pre><code>name: php-example\n\npost_install_actions:\n  - |\n    &lt;?php\n    #ddev-description: Process project configuration\n\n    // Access DDEV environment variables\n    $projectName = $_ENV['DDEV_PROJECT'];\n    $projectType = $_ENV['DDEV_PROJECT_TYPE'];\n    $docroot = $_ENV['DDEV_DOCROOT'];\n\n    echo \"Setting up $projectType project: $projectName\\n\";\n\n    // Generate YAML configuration\n    $config = [\n        'services' =&gt; [\n            'myservice' =&gt; [\n                'image' =&gt; 'nginx:latest',\n                'environment' =&gt; [\n                    'PROJECT_TYPE' =&gt; $projectType\n                ]\n            ]\n        ]\n    ];\n\n    file_put_contents('docker-compose.myservice.yaml',\n        \"#ddev-generated\\n\" . yaml_emit($config));\n    ?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#available-environment-variables","title":"Available Environment Variables","text":"<p>PHP actions have access to all standard DDEV environment variables:</p> <pre><code>&lt;?php\n// Project Information\n$_ENV['DDEV_PROJECT']        // Project name\n$_ENV['DDEV_PROJECT_TYPE']   // 'drupal', 'wordpress', 'laravel', etc.\n$_ENV['DDEV_APPROOT']        // '/var/www/html' (project root)\n$_ENV['DDEV_DOCROOT']        // 'web', 'public', or configured docroot\n$_ENV['DDEV_TLD']            // 'ddev.site' or configured TLD\n\n// Technology Stack  \n$_ENV['DDEV_PHP_VERSION']    // '8.1', '8.2', '8.3', etc.\n$_ENV['DDEV_WEBSERVER_TYPE'] // 'nginx-fpm', 'apache-fpm'\n$_ENV['DDEV_DATABASE']       // 'mysql:8.0', 'postgres:16', etc.\n$_ENV['DDEV_DATABASE_FAMILY'] // 'mysql', 'postgres'\n\n// System Information\n$_ENV['DDEV_VERSION']        // Current DDEV version\n$_ENV['DDEV_MUTAGEN_ENABLED'] // 'true' or 'false'\n?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#php-action-execution-environment","title":"PHP Action Execution Environment","text":"<ul> <li>Working directory: <code>/var/www/html/.ddev</code> (your project\u2019s .ddev directory)</li> <li>Project access: Full read/write access to project repository at <code>/var/www/html/</code></li> <li>Error handling: Automatic strict error handling (equivalent to Bash <code>set -eu</code>)</li> <li>Extensions: php-yaml extension for robust YAML processing</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#advanced-php-example-conditional-configuration","title":"Advanced PHP Example: Conditional Configuration","text":"<pre><code>name: conditional-config\n\npre_install_actions:\n  - |\n    &lt;?php\n    #ddev-description: Generate environment-specific configuration\n\n    $projectType = $_ENV['DDEV_PROJECT_TYPE'];\n    $services = [];\n\n    // Different services based on project type\n    switch($projectType) {\n        case 'drupal':\n            $services['redis'] = [\n                'image' =&gt; 'redis:7-alpine',\n                'ports' =&gt; ['6379:6379']\n            ];\n            break;\n        case 'wordpress':\n            $services['memcached'] = [\n                'image' =&gt; 'memcached:alpine', \n                'ports' =&gt; ['11211:11211']\n            ];\n            break;\n        default:\n            $services['cache'] = [\n                'image' =&gt; 'nginx:alpine'\n            ];\n    }\n\n    $composeContent = ['services' =&gt; $services];\n    file_put_contents('docker-compose.conditional.yaml',\n        \"#ddev-generated\\n\" . yaml_emit($composeContent));\n\n    echo \"Generated configuration for $projectType project\\n\";\n    ?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#separate-php-script-files-best-practice","title":"Separate PHP Script Files (Best Practice)","text":"<p>For complex logic, create separate PHP script files using your add-on\u2019s namespace:</p> <p>File structure:</p> <pre><code>.ddev/\n\u251c\u2500\u2500 install.yaml\n\u2514\u2500\u2500 myservice/\n    \u2514\u2500\u2500 scripts/\n        \u251c\u2500\u2500 setup.php\n        \u2514\u2500\u2500 configure.php\n</code></pre> <p>Clean install.yaml:</p> <pre><code>name: myservice\n\nproject_files:\n  - myservice/scripts/setup.php\n  - myservice/scripts/configure.php\n\npost_install_actions:\n  - |\n    &lt;?php\n    #ddev-description: Configure project\n    require 'myservice/scripts/setup.php';\n  - |\n    &lt;?php\n    #ddev-description: Apply optimizations\n    require 'myservice/scripts/configure.php';\n</code></pre> <p><code>myservice/scripts/setup.php</code>:</p> <pre><code>&lt;?php\n#ddev-generated\n\n$projectType = $_ENV['DDEV_PROJECT_TYPE']; \n$docroot = $_ENV['DDEV_DOCROOT'];\n\n// Exit early if not applicable\nif ($projectType !== 'drupal') {\n    echo \"Not a Drupal project, skipping\\n\";\n    exit(0);\n}\n\n// Perform Drupal-specific setup\n$settingsFile = \"/var/www/html/{$docroot}/sites/default/settings.ddev.php\";\n$settings = \"&lt;?php\\n// DDEV-generated settings\\n\";\nfile_put_contents($settingsFile, $settings);\n\necho \"Drupal settings configured\\n\";\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#real-world-example-ddev-redis-structure","title":"Real-world example: ddev-redis structure","text":"<pre><code>.ddev/\n\u251c\u2500\u2500 install.yaml\n\u251c\u2500\u2500 docker-compose.redis.yaml\n\u2514\u2500\u2500 redis/\n    \u2514\u2500\u2500 scripts/\n        \u251c\u2500\u2500 setup-drupal-settings.php\n        \u251c\u2500\u2500 setup-redis-optimized-config.php\n        \u2514\u2500\u2500 settings.ddev.redis.php\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#mixed-bash-and-php-actions","title":"Mixed Bash and PHP Actions","text":"<p>You can combine both approaches in a single add-on:</p> <pre><code>name: mixed-actions\n\npre_install_actions:\n  - |\n    #ddev-description: Set file permissions\n    chmod +x .ddev/commands/web/mycommand\n\n  - |\n    &lt;?php\n    #ddev-description: Process configuration\n    $projectName = $_ENV['DDEV_PROJECT'];\n    echo \"Processing config for: $projectName\\n\";\n    ?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#advanced-features","title":"Advanced Features","text":"","boost":2},{"location":"users/extend/creating-add-ons/#version-constraints","title":"Version Constraints","text":"<p>Specify minimum DDEV version requirements:</p> <pre><code>ddev_version_constraint: '&gt;= v1.24.8'\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#dependencies","title":"Dependencies","text":"<p>Declare add-on dependencies that will be automatically installed:</p> <pre><code>dependencies:\n  - ddev/ddev-redis        # GitHub repository\n  - https://example.com/addon.tar.gz  # Direct tarball URL\n</code></pre> <p>Dependencies are automatically installed when the add-on is installed. If a dependency is missing, DDEV will:</p> <ol> <li>Automatically install it using the same formats supported by <code>ddev add-on get</code></li> <li>Detect circular dependencies and prevent infinite loops</li> <li>Install recursively - dependencies of dependencies are also installed</li> </ol> <p>To skip automatic dependency installation, use the <code>--skip-deps</code> flag:</p> <pre><code>ddev add-on get --skip-deps my-addon\n</code></pre> <p>This does not install dependencies. Ensure required dependencies are present if your add-on relies on them.</p>","boost":2},{"location":"users/extend/creating-add-ons/#runtime-dependencies-advanced","title":"Runtime Dependencies (Advanced)","text":"<p>Advanced Feature</p> <p>Runtime dependencies are an advanced, rarely-used feature for sophisticated add-ons that need to dynamically discover dependencies during installation. Most add-ons should use static <code>dependencies</code> declared in <code>install.yaml</code> instead.</p> <p>Runtime dependencies allow add-ons to dynamically discover and install dependencies during the installation process, rather than declaring them statically. This enables complex scenarios like:</p> <ul> <li>Service detection - Analyzing project configuration to determine needed services</li> <li>Conditional dependencies - Installing different add-ons based on project analysis</li> <li>Dynamic configuration processing - Dependencies determined by parsing external files</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#how-runtime-dependencies-work","title":"How Runtime Dependencies Work","text":"<ol> <li>Detection Phase: During pre-install or post-install actions, your add-on analyzes the project</li> <li>Creation Phase: Your add-on creates a <code>.runtime-deps-&lt;addon-name&gt;</code> file listing discovered dependencies</li> <li>Processing Phase: After installation completes, DDEV automatically processes runtime dependencies</li> <li>Installation Phase: DDEV installs any missing dependencies and cleans up the runtime dependencies file</li> </ol>","boost":2},{"location":"users/extend/creating-add-ons/#creating-runtime-dependencies","title":"Creating Runtime Dependencies","text":"<p>Create a <code>.runtime-deps-&lt;addon-name&gt;</code> file in the project\u2019s <code>.ddev</code> directory with one dependency per line:</p>","boost":2},{"location":"users/extend/creating-add-ons/#example-dynamic-service-detection-in-post-install-action","title":"Example: Dynamic service detection in post-install action","text":"<pre><code>name: my-dynamic-addon\n\npost_install_actions:\n  - |\n    &lt;?php\n    #ddev-description: Detect required services dynamically\n\n    $services = [];\n\n    // Analyze project configuration\n    if (file_exists('/var/www/html/.platform.yaml')) {\n        $config = yaml_parse_file('/var/www/html/.platform.yaml');\n\n        // Check for Redis usage\n        if (isset($config['services']['cache']['type']) &amp;&amp; \n            strpos($config['services']['cache']['type'], 'redis') !== false) {\n            $services[] = 'ddev/ddev-redis';\n        }\n\n        // Check for Elasticsearch usage\n        if (isset($config['services']['search']['type']) &amp;&amp; \n            strpos($config['services']['search']['type'], 'elasticsearch') !== false) {\n            $services[] = 'ddev/ddev-elasticsearch';\n        }\n    }\n\n    // Create runtime dependencies file if services were found\n    if (!empty($services)) {\n        $runtimeDepsFile = '.runtime-deps-my-dynamic-addon';\n        file_put_contents($runtimeDepsFile, implode(\"\\n\", $services) . \"\\n\");\n        echo \"Created runtime dependencies for \" . count($services) . \" service(s)\\n\";\n    }\n    ?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#runtime-dependencies-file-format","title":"Runtime Dependencies File Format","text":"<p>The <code>.runtime-deps-&lt;addon-name&gt;</code> file uses the same dependency formats as static dependencies:</p> <pre><code># One dependency per line\nddev/ddev-redis\nddev/ddev-elasticsearch\nhttps://example.com/addon.tar.gz\n\n# Comments and empty lines are ignored\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#processing-timing","title":"Processing Timing","text":"<p>Runtime dependencies are processed after all installation phases complete:</p> <ol> <li>Pre-install actions execute</li> <li>Project files are copied</li> <li>Global files are copied  </li> <li>Post-install actions execute</li> <li>Runtime dependencies are processed \u2190 This happens last</li> <li>Cleanup occurs</li> </ol> <p>This timing ensures that:</p> <ul> <li>Add-ons can analyze the fully installed project state</li> <li>Post-install actions can create runtime dependencies based on project configuration</li> <li>Dependencies have access to all project files when they install</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#real-world-example-upsun-integration","title":"Real-world Example: Upsun Integration","text":"<p>The ddev-upsun add-on demonstrates runtime dependencies by:</p> <ol> <li>Analyzing <code>.upsun/config.yaml</code> during post-install</li> <li>Detecting services like Redis, Elasticsearch, Memcached</li> <li>Creating runtime dependencies for corresponding DDEV add-ons</li> <li>Automatically installing the required service add-ons</li> </ol> <pre><code>&lt;?php\n// Simplified example from ddev-upsun\n$detectedServices = analyzeUpsunConfig('/var/www/html/.upsun/config.yaml');\n$dependencies = [];\n\nforeach ($detectedServices as $service) {\n    switch ($service['type']) {\n        case 'redis':\n            $dependencies[] = 'ddev/ddev-redis';\n            break;\n        case 'opensearch':\n            $dependencies[] = 'ddev/ddev-opensearch';\n            break;\n    }\n}\n\nif (!empty($dependencies)) {\n    file_put_contents('.runtime-deps-upsun', implode(\"\\n\", $dependencies));\n}\n?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#when-not-to-use-runtime-dependencies","title":"When NOT to Use Runtime Dependencies","text":"<p>Use static <code>dependencies</code> instead if:</p> <ul> <li>Dependencies are always required</li> <li>Dependencies don\u2019t change based on project analysis</li> <li>You want simpler, more predictable behavior</li> </ul> <p>Use runtime dependencies only if:</p> <ul> <li>Dependencies must be determined by analyzing project files</li> <li>Different projects need different dependencies</li> <li>You\u2019re integrating with external platform configurations</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#debugging-runtime-dependencies","title":"Debugging Runtime Dependencies","text":"<p>Add verbose logging to debug runtime dependency processing:</p> <pre><code>ddev add-on get --verbose your-addon\n</code></pre> <p>This will show:</p> <ul> <li>When runtime dependencies files are created</li> <li>What dependencies are discovered</li> <li>Installation progress for each dependency</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#limitations","title":"Limitations","text":"<ul> <li>Runtime dependencies cannot create circular dependency loops</li> <li>The <code>.runtime-deps-*</code> file is automatically deleted after processing</li> <li>Runtime dependencies are not processed when using <code>--skip-deps</code></li> <li>Cannot be used to conditionally install the add-on itself</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#template-replacements-advanced-very-unusual","title":"Template Replacements (Advanced, Very Unusual)","text":"<p>Use environment variables in filenames and content:</p> <pre><code>project_files:\n  - \"settings.${DDEV_PROJECT}.php\"\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#yaml-file-processing","title":"YAML File Processing","text":"<p>Read project YAML files for advanced templating:</p> <pre><code>yaml_read_files:\n  config: \"config.yaml\"\n\npost_install_actions:\n  - |\n    &lt;?php\n    // Access YAML data via templating: {{ .config.some_value }}\n    ?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#error-handling","title":"Error Handling","text":"<p>Use proper exit codes and error messages:</p> <pre><code>&lt;?php\n#ddev-description: Validate requirements\n\nif (empty($_ENV['DDEV_PROJECT'])) {\n    echo \"Error: DDEV environment not available\\n\";\n    exit(1);\n}\n\n// Continue with setup...\necho \"Requirements validated\\n\";\n?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#special-directives","title":"Special Directives","text":"","boost":2},{"location":"users/extend/creating-add-ons/#description-display","title":"Description Display","text":"<p>Add descriptions to your actions:</p> <pre><code>#ddev-description: Installing Redis configuration\n</code></pre> <pre><code>&lt;?php\n#ddev-description: Processing project settings\n?&gt;\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#warning-exit-codes","title":"Warning Exit Codes","text":"<p>Treat specific exit codes as warnings instead of errors:</p> <pre><code>post_install_actions:\n  - |\n    #ddev-warning-exit-code: 2\n    #ddev-description: Optional configuration\n    some-command-that-might-fail\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#testing-your-add-on","title":"Testing Your Add-on","text":"","boost":2},{"location":"users/extend/creating-add-ons/#bats-testing-framework","title":"Bats Testing Framework","text":"<p>The add-on template includes a <code>tests.bats</code> file for testing:</p> <pre><code>#!/usr/bin/env bats\n\n@test \"install add-on\" {\n  ddev add-on get . --project my-test\n  cd my-test\n  ddev restart\n  # Add your tests here\n}\n\n@test \"verify service is running\" {\n  cd my-test\n  ddev exec \"curl -s http://myservice:8080/health\"\n}\n</code></pre> <p>Run tests with:</p> <pre><code>bats tests.bats\n</code></pre>","boost":2},{"location":"users/extend/creating-add-ons/#manual-testing","title":"Manual Testing","text":"<ol> <li>Create a test DDEV project</li> <li>Install your add-on locally:</li> </ol> <pre><code>ddev add-on get /path/to/your/addon\n</code></pre> <ol> <li>Verify services start correctly</li> <li>Test configuration options</li> <li>Test removal process</li> </ol>","boost":2},{"location":"users/extend/creating-add-ons/#publishing-your-add-on","title":"Publishing Your Add-on","text":"","boost":2},{"location":"users/extend/creating-add-ons/#repository-setup","title":"Repository Setup","text":"<ol> <li>Test thoroughly using the test framework</li> <li>Create proper releases with semantic versioning</li> <li>Add the <code>ddev-get</code> label to your GitHub repository</li> <li>Write clear documentation in your readme</li> <li>Include examples and configuration options</li> </ol>","boost":2},{"location":"users/extend/creating-add-ons/#making-it-official","title":"Making it Official","text":"<p>To become an officially supported add-on:</p> <ol> <li>Open an issue in the DDEV repository</li> <li>Request upgrade to official status</li> <li>Commit to maintaining the add-on</li> <li>Subscribe to repository activity and be responsive</li> </ol>","boost":2},{"location":"users/extend/creating-add-ons/#best-practices","title":"Best Practices","text":"<ul> <li>Follow semantic versioning for releases</li> <li>Maintain backward compatibility when possible</li> <li>Test with different DDEV versions</li> <li>Update dependencies regularly</li> <li>Respond to user issues promptly</li> <li>Keep documentation up to date</li> <li>Use namespaced directories (e.g., <code>myservice/scripts/</code> not just <code>scripts/</code>)</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#examples-and-references","title":"Examples and References","text":"<ul> <li>Add-on Template: ddev-addon-template</li> <li>Official Add-ons: Browse examples at addons.ddev.com</li> <li>Redis Add-on: ddev-redis - Good example of PHP actions with <code>redis/scripts/</code></li> <li>Community Examples: ddev-contrib</li> </ul>","boost":2},{"location":"users/extend/creating-add-ons/#getting-help","title":"Getting Help","text":"<ul> <li>DDEV Discord: Join DDEV Discord for development support</li> <li>GitHub Discussions: Use DDEV Discussions for questions</li> <li>Stack Overflow: Tag questions with ddev</li> </ul> <p>Creating DDEV add-ons is a powerful way to contribute to the DDEV ecosystem. Whether you use traditional Bash actions or the new PHP-based actions, you can create sophisticated extensions that help developers worldwide.</p>","boost":2},{"location":"users/extend/custom-commands/","title":"Custom Commands","text":"<p>Custom commands can easily be added to DDEV, to be executed on the host or in containers.</p> <p>This involves adding a Bash script to the project in <code>.ddev/commands/host</code>, a specific container in <code>.ddev/commands/&lt;containername&gt;</code>, or globally in <code>~/.ddev/commands</code>.</p> <p>Example commands in <code>ddev/commands/*/*.example</code> can be copied, moved, or symlinked.</p> <p>For example, .ddev/commands/host/mysqlworkbench.example can be used to add a <code>ddev mysqlworkbench</code> command. Rename it from <code>mysqlworkbench.example</code> to <code>mysqlworkbench</code>. If you\u2019re on macOS or Linux (or some configurations of Windows) you can <code>cd .ddev/commands/host &amp;&amp; ln -s mysqlworkbench.example mysqlworkbench</code>.</p> <p>The <code>ddev mysql</code> runs the <code>mysql</code> client inside the <code>db</code> container command using this technique. See the <code>ddev mysql</code> command.</p>","boost":2},{"location":"users/extend/custom-commands/#notes-for-all-command-types","title":"Notes for All Command Types","text":"<ul> <li>The command filename is not what determines the name of the command. That comes from the \u201cUsage\u201d doc line (<code>## Usage: commandname</code>).</li> <li>To confirm that your custom command is available, run <code>ddev -h</code> and look for it in the list.</li> </ul>","boost":2},{"location":"users/extend/custom-commands/#host-commands","title":"Host Commands","text":"<p>To provide host commands, place a Bash script in <code>.ddev/commands/host</code>. For example, a PhpStorm launcher to make the <code>ddev phpstorm</code> command might go in <code>.ddev/commands/host/phpstorm</code> with these contents. The <code>OSTypes</code> and <code>HostBinaryExists</code> annotations are optional, but are useful to prevent the command from showing up if it\u2019s not useful to the user.</p> <pre><code>#!/usr/bin/env bash\n\n## Description: Open PhpStorm with the current project\n## Usage: phpstorm\n## Example: \"ddev phpstorm\"\n## OSTypes: darwin\n## HostBinaryExists: \"/Applications/PhpStorm.app\"\n\n# Example is macOS-specific, but easy to adapt to any OS\nopen -a PhpStorm.app ${DDEV_APPROOT}\n</code></pre>","boost":2},{"location":"users/extend/custom-commands/#container-commands","title":"Container Commands","text":"<p>To provide a command which will execute in a container, add a Bash script to <code>.ddev/commands/&lt;container_name&gt;</code>, for example, <code>.ddev/commands/web/mycommand</code>. The Bash script will be executed inside the named container. For example, see the several standard DDEV script-based web container commands.</p> <p>You can run commands in custom containers as well as standard DDEV <code>web</code> and <code>db</code> containers. Use the service name, like <code>.ddev/commands/solr/&lt;command&gt;</code>. The only catch with a custom container is that your service must mount <code>/mnt/ddev-global-cache</code> like the <code>web</code> and <code>db</code> containers do; the <code>volumes</code> section of <code>docker-compose.&lt;servicename&gt;.yaml</code> needs:</p> <pre><code>    volumes:\n      - ddev-global-cache:/mnt/ddev-global-cache\n</code></pre> <p>For example, to add a <code>solrtail</code> command that runs in a Solr service, add <code>.ddev/commands/solr/solrtail</code> with:</p> <pre><code>#!/usr/bin/env bash\n\n## Description: Tail the main solr log\n## Usage: solrtail\n## Example: ddev solrtail\n\ntail -f /opt/solr/server/logs/solr.log\n</code></pre>","boost":2},{"location":"users/extend/custom-commands/#global-commands","title":"Global Commands","text":"<p>Global commands work exactly the same as project-level commands, but they need to go in your global <code>.ddev</code> directory. Your home directory has a <code>.ddev/commands</code> in it, where you can add host, web, or db commands.</p> <p>Changes to the command files in the global <code>.ddev</code> directory need a <code>ddev start</code> for changes to be picked up by a project, as the global commands are copied to the project on start.</p>","boost":2},{"location":"users/extend/custom-commands/#shell-command-examples","title":"Shell Command Examples","text":"<p>There are many examples of global and project-level custom/shell commands that ship with DDEV you can adapt for your own use. They can be found in your <code>~/.ddev/commands/*</code> directories and in your project\u2019s <code>.ddev/commands/*</code> directories. There you\u2019ll see how to provide usage, examples, and how to use arguments provided to the commands. For example, the <code>xdebug</code> command shows simple argument processing and the launch command demonstrates flag processing.</p>","boost":2},{"location":"users/extend/custom-commands/#command-line-completion","title":"Command Line Completion","text":"<p>If your custom command has a set of pre-determined valid arguments it can accept, you can use the <code>AutocompleteTerms</code>. For command flag completion, use the <code>Flags</code> annotation.</p> <p>For dynamic completion, you can create a separate script with the same name in a directory named <code>autocomplete</code>. For example, if your command is in <code>~/.ddev/commands/web/my-command</code>, your autocompletion script will be in <code>~/.ddev/commands/web/autocomplete/my-command</code>.</p> <p>When you press tab on the command line after your command, the associated autocomplete script will be executed. The current command line (starting with the name of your command) will be passed into the completion script as arguments. If there is a space at the end of the command line, an empty argument will be included.</p> <p>For example:</p> <ul> <li><code>ddev my-command &lt;tab&gt;</code> will pass <code>my-command</code> and an empty argument into the autocomplete script.</li> <li><code>ddev my-command som&lt;tab&gt;</code> will pass <code>my-command</code>, and <code>som</code> into the autocomplete script.</li> </ul> <p>The autocomplete script should echo the valid arguments as a string separated by line breaks. You don\u2019t need to filter the arguments by the last argument string (e.g. if the last argument is <code>som</code>, you don\u2019t need to filter out any arguments that don\u2019t start with <code>som</code>). That will be handled for you before the result is given to your shell as completion suggestions.</p> <p>The web container\u2019s <code>nvm</code> autocomplete script shows how this can be used to forward completion requests to a relevant script in the container.</p>","boost":2},{"location":"users/extend/custom-commands/#environment-variables-provided","title":"Environment Variables Provided","text":"<p>A number of environment variables are provided to these command scripts. These are generally supported, but please avoid using undocumented environment variables. Useful variables for host scripts are:</p> <ul> <li><code>DDEV_APPROOT</code>: File system location of the project on the host</li> <li><code>DDEV_DATABASE</code>: Database in use, in format <code>type:version</code> (example: <code>mariadb:11.4</code>)</li> <li><code>DDEV_DATABASE_FAMILY</code>: Database \u201cfamily\u201d (example: <code>mysql</code>, <code>postgres</code>), useful for database connection URLs</li> <li><code>DDEV_DOCROOT</code>: Relative path from approot to docroot</li> <li><code>DDEV_GID</code>: Group ID the <code>web</code> container runs as</li> <li><code>DDEV_GLOBAL_DIR</code>: Path to global configuration directory</li> <li><code>DDEV_GOARCH</code>: Architecture (<code>arm64</code>, <code>amd64</code>)</li> <li><code>DDEV_GOOS</code>: Operating system (<code>windows</code>, <code>darwin</code>, <code>linux</code>)</li> <li><code>DDEV_HOSTNAME</code>: Comma-separated list of FQDN hostnames</li> <li><code>DDEV_HOST_DB_PORT</code>: Localhost port of the database server</li> <li><code>DDEV_HOST_HTTP_PORT</code>: Localhost port for HTTP on web server</li> <li><code>DDEV_HOST_HTTPS_PORT</code>: Localhost port for HTTPS on web server</li> <li><code>DDEV_HOST_MAILPIT_PORT</code>: Localhost port for Mailpit</li> <li><code>DDEV_HOST_WEBSERVER_PORT</code>: Localhost port of the web server</li> <li><code>DDEV_MAILPIT_HTTP_PORT</code>: Router Mailpit port for HTTP</li> <li><code>DDEV_MAILPIT_HTTPS_PORT</code>: Router Mailpit port for HTTPS</li> <li><code>DDEV_MUTAGEN_ENABLED</code>: <code>true</code> if Mutagen is enabled</li> <li><code>DDEV_PHP_VERSION</code>: Current PHP version</li> <li><code>DDEV_PRIMARY_URL</code>: Primary project URL</li> <li><code>DDEV_PRIMARY_URL_PORT</code>: Port of the primary project URL, defaults to 80 for HTTP and 443 for HTTPS</li> <li><code>DDEV_PRIMARY_URL_WITHOUT_PORT</code>: Primary project URL without port</li> <li><code>DDEV_PROJECT</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_PROJECT_STATUS</code>: Project status determined from the <code>web</code> and <code>db</code> services health, like <code>starting</code>, <code>running</code>, <code>stopped</code>, <code>paused</code>, or another status returned from Docker, including <code>healthy</code>, <code>unhealthy</code>, <code>exited</code>, <code>restarting</code></li> <li><code>DDEV_PROJECT_TYPE</code>: <code>backdrop</code>, <code>drupal</code>, <code>typo3</code>,<code>wordpress</code>, etc.</li> <li><code>DDEV_ROUTER_HTTP_PORT</code>: Router port for HTTP</li> <li><code>DDEV_ROUTER_HTTPS_PORT</code>: Router port for HTTPS</li> <li><code>DDEV_SCHEME</code>: Scheme of primary project URL</li> <li><code>DDEV_SITENAME</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_TLD</code>: Top-level project domain, like <code>ddev.site</code></li> <li><code>DDEV_UID</code>: User ID the <code>web</code> container runs as</li> <li><code>DDEV_USER</code>: Username the <code>web</code> container runs as</li> <li><code>DDEV_XHGUI_HTTP_PORT</code>: Router XHGui port for HTTP</li> <li><code>DDEV_XHGUI_HTTPS_PORT</code>: Router XHGui port for HTTPS</li> <li><code>DDEV_WEBSERVER_TYPE</code>: <code>nginx-fpm</code>, <code>apache-fpm</code>, <code>generic</code></li> </ul> <p>Useful variables for container scripts are:</p> <ul> <li><code>DDEV_APPROOT</code>: Absolute path to the project files within the web container</li> <li><code>DDEV_DATABASE</code>: Database in use, in format <code>type:version</code> (example: <code>mariadb:11.4</code>)</li> <li><code>DDEV_DATABASE_FAMILY</code>: Database \u201cfamily\u201d (example: <code>mysql</code>, <code>postgres</code>), useful for database connection URLs</li> <li><code>DDEV_DOCROOT</code>: Relative path from approot to docroot</li> <li><code>DDEV_FILES_DIR</code>: Deprecated, first directory of user-uploaded files</li> <li><code>DDEV_FILES_DIRS</code>: Comma-separated list of directories of user-uploaded files</li> <li><code>DDEV_GID</code>: Group ID the <code>web</code> container runs as</li> <li><code>DDEV_HOSTNAME</code>: Comma-separated list of FQDN hostnames</li> <li><code>DDEV_MUTAGEN_ENABLED</code>: <code>true</code> if Mutagen is enabled</li> <li><code>DDEV_PHP_VERSION</code>: Current PHP version</li> <li><code>DDEV_PRIMARY_URL</code>: Primary URL for the project</li> <li><code>DDEV_PRIMARY_URL_PORT</code>: Port of the primary project URL, defaults to 80 for HTTP and 443 for HTTPS</li> <li><code>DDEV_PRIMARY_URL_WITHOUT_PORT</code>: Primary project URL without port</li> <li><code>DDEV_PROJECT</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_PROJECT_TYPE</code>: <code>backdrop</code>, <code>drupal</code>, <code>typo3</code>,<code>wordpress</code>, etc.</li> <li><code>DDEV_ROUTER_HTTP_PORT</code>: Router port for HTTP</li> <li><code>DDEV_ROUTER_HTTPS_PORT</code>: Router port for HTTPS</li> <li><code>DDEV_SCHEME</code>: Scheme of primary project URL</li> <li><code>DDEV_SITENAME</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_TLD</code>: Top-level project domain, like <code>ddev.site</code></li> <li><code>DDEV_UID</code>: User ID the <code>web</code> container runs as</li> <li><code>DDEV_USER</code>: Username the <code>web</code> container runs as</li> <li><code>DDEV_VERSION</code>: Version of the currently running <code>ddev</code> binary</li> <li><code>DDEV_WEBSERVER_TYPE</code>: <code>nginx-fpm</code>, <code>apache-fpm</code>, <code>generic</code></li> <li><code>IS_DDEV_PROJECT</code>: If <code>true</code>, PHP is running under DDEV</li> </ul>","boost":2},{"location":"users/extend/custom-commands/#annotations-supported","title":"Annotations Supported","text":"<p>Custom commands support various annotations in the header for providing additional information to the user.</p>","boost":2},{"location":"users/extend/custom-commands/#description-annotation","title":"<code>Description</code> Annotation","text":"<p><code>Description</code> should briefly describe the command in its help message.</p> <p>Usage: <code>## Description: &lt;command-description&gt;</code></p> <p>Example: <code>## Description: my great custom command</code></p>","boost":2},{"location":"users/extend/custom-commands/#usage-annotation","title":"<code>Usage</code> Annotation","text":"<p><code>Usage</code> should explain how to use the command in its help message.</p> <p>Usage: <code>## Usage: &lt;command-usage&gt;</code></p> <p>Example: <code>## Usage: commandname [flags] [args]</code></p>","boost":2},{"location":"users/extend/custom-commands/#example-annotation","title":"<code>Example</code> Annotation","text":"<p><code>Example</code> should demonstrate how the command might be used. Use <code>\\n</code> to force a line break.</p> <p>Usage: <code>## Example: &lt;command-example&gt;</code></p> <p>Example: <code>## Example: commandname\\ncommandname -h</code></p>","boost":2},{"location":"users/extend/custom-commands/#aliases-annotation","title":"<code>Aliases</code> Annotation","text":"<p>If your command should have one or more aliases, add the <code>Aliases</code> annotation. Multiple aliases are separated by a comma:</p> <p>Usage: <code>## Aliases: &lt;list-of-aliases&gt;</code></p> <p>Example: <code>## Aliases: cacheclear,cache-clear,cache:clear</code></p>","boost":2},{"location":"users/extend/custom-commands/#flags-annotation","title":"<code>Flags</code> Annotation","text":"<p><code>Error: unknown flag</code> or <code>Error: unknown shorthand flag</code></p> <p>Starting with DDEV v1.24.7, unknown flags are no longer parsed when using the <code>Flags</code> annotation. To avoid errors, either list all supported flags explicitly or remove the <code>Flags</code> annotation.</p> <p><code>Flags</code> should explain any available flags, including their shorthand when relevant, for the help message. It has to be encoded according the following definition:</p> <p>If no flags are specified, the command will have its flags parsing disabled. Global flags like <code>--help</code> will not work unless the command supports them.</p> <p>You can still do <code>ddev help &lt;command&gt;</code> to see the command\u2019s provided usage help.</p> <p>Usage: <code>## Flags: &lt;json-definition&gt;</code></p> <p>This is the minimal usage of a <code>Flags</code> definition:</p> <p>Example: <code>## Flags: [{\"Name\":\"flag\",\"Usage\":\"sets the flag option\"}]</code></p> <p>Output:</p> <pre><code>Flags:\n  -h, --help          help for ddev\n      --flag          sets the flag option\n</code></pre> <p>Multiple flags are separated by a comma:</p> <p>Example: <code>## Flags: [{\"Name\":\"flag1\",\"Shorthand\":\"f\",\"Usage\":\"flag1 usage\"},{\"Name\":\"flag2\",\"Usage\":\"flag2 usage\"}]</code></p> <p>Output:</p> <pre><code>Flags:\n  -h, --help          help for ddev\n  -f, --flag1         flag1 usage\n      --flag2         flag2 usage\n</code></pre> <p>The following fields can be used for a flag definition:</p> <ul> <li><code>Name</code>: the name as it appears on command line</li> <li><code>Shorthand</code>: one-letter abbreviated flag</li> <li><code>Usage</code>: help message</li> <li><code>Type</code>: possible values are <code>bool</code>, <code>string</code>, <code>int</code>, <code>uint</code> (defaults to <code>bool</code>)</li> <li><code>DefValue</code>: default value for usage message</li> <li><code>NoOptDefVal</code>: default value, if the flag is on the command line without any options</li> <li><code>Annotations</code>: used by cobra.Command Bash autocomplete code (see https://github.com/spf13/cobra/blob/main/site/content/completions/bash.md)</li> </ul>","boost":2},{"location":"users/extend/custom-commands/#autocompleteterms-annotation","title":"<code>AutocompleteTerms</code> Annotation","text":"<p>If your command accepts specific arguments, and you know ahead of time what those arguments are, you can use this annotation to provide those arguments for autocompletion.</p> <p>Usage: <code>## AutocompleteTerms: [&lt;list-of-valid-arguments&gt;]</code></p> <p>Example: <code>## AutocompleteTerms: [\"enable\",\"disable\",\"toggle\",\"status\"]</code></p>","boost":2},{"location":"users/extend/custom-commands/#canrunglobally-annotation","title":"<code>CanRunGlobally</code> Annotation","text":"<p>This annotation is only available for global host commands.</p> <p>Use <code>CanRunGlobally: true</code> if your global host command can be safely run even if the current working directory isn\u2019t inside a DDEV project.</p> <p>This will make your command available to run regardless of what your current working directory is when you run it.</p> <p>This annotation will have no effect if you are also using one of the following annotations:</p> <ul> <li><code>ProjectTypes</code></li> <li><code>DBTypes</code></li> </ul> <p>Example: <code>## CanRunGlobally: true</code></p>","boost":2},{"location":"users/extend/custom-commands/#projecttypes-annotation","title":"<code>ProjectTypes</code> Annotation","text":"<p>If your command should only be visible for a specific project type, <code>ProjectTypes</code> will allow you to define the supported types. This is especially useful for global custom commands. See Quickstart for many CMSes for more information about the supported project types. Multiple types are separated by a comma.</p> <p>Usage: <code>## ProjectTypes: &lt;list-of-project-types&gt;</code></p> <p>Example: <code>## ProjectTypes: drupal7,drupal,backdrop</code></p>","boost":2},{"location":"users/extend/custom-commands/#ostypes-annotation-host-commands-only","title":"<code>OSTypes</code> Annotation (Host Commands Only)","text":"<p>If your host command should only run on one or more operating systems, add the <code>OSTypes</code> annotation. Multiple types are separated by a comma. Valid types are:</p> <ul> <li><code>darwin</code> for macOS</li> <li><code>windows</code> for Windows</li> <li><code>linux</code> for Linux</li> </ul> <p>Usage: <code>## OSTypes: &lt;list-of-os-types&gt;</code></p> <p>Example: <code>## OSTypes: darwin,linux</code></p>","boost":2},{"location":"users/extend/custom-commands/#hostbinaryexists-annotation-host-commands-only","title":"<code>HostBinaryExists</code> Annotation (Host Commands Only)","text":"<p>If your host command should only run if a particular file exists, add the <code>HostBinaryExists</code> annotation.</p> <p>Usage: <code>## HostBinaryExists: &lt;path/to/file&gt;</code></p> <p>Example: <code>## HostBinaryExists: /Applications/Sequel ace.app</code></p>","boost":2},{"location":"users/extend/custom-commands/#dbtypes-annotation","title":"<code>DBTypes</code> Annotation","text":"<p>If your command should only be available for a particular database type, add the <code>DBTypes</code> annotation. Multiple types are separated by a comma. Valid types the available database types.</p> <p>Usage: <code>## DBTypes: &lt;type&gt;</code></p> <p>Example: <code>## DBTypes: postgres</code></p>","boost":2},{"location":"users/extend/custom-commands/#hostworkingdir-annotation-container-commands-only","title":"<code>HostWorkingDir</code> Annotation (Container Commands Only)","text":"<p>If your container command should run from the directory you are running the command in the host, add the <code>HostWorkingDir</code> annotation.</p> <p>Example: <code>## HostWorkingDir: true</code></p>","boost":2},{"location":"users/extend/custom-commands/#execraw-annotation-container-commands-only","title":"<code>ExecRaw</code> Annotation (Container Commands Only)","text":"<p>Use <code>ExecRaw: true</code> to pass command arguments directly to the container as-is.</p> <p>For example, when <code>ExecRaw</code> is true, <code>ddev yarn --help</code> returns the help for <code>yarn</code>, not DDEV\u2019s help for the <code>ddev yarn</code> command.</p> <p>We recommend using this annotation for all container commands. The default behavior is retained to avoid breaking existing commands.</p> <p>Example: <code>## ExecRaw: true</code></p>","boost":2},{"location":"users/extend/custom-commands/#mutagensync-annotation","title":"<code>MutagenSync</code> Annotation","text":"<p>Use <code>MutagenSync: true</code> to ensure Mutagen sync runs before and after the command (where Mutagen is enabled and the project is running).</p> <p>We recommend using this annotation if your <code>host</code> or <code>web</code> command can modify, add, or remove files in the project directory.</p>","boost":2},{"location":"users/extend/custom-commands/#known-windows-issues","title":"Known Windows Issues","text":"","boost":2},{"location":"users/extend/custom-commands/#line-endings","title":"Line Endings","text":"<p>If you\u2019re editing a custom command to be run in a container, it must have LF line endings and not traditional Windows CRLF line endings. Remember that a custom command in a container is a script that must execute in a Linux environment.</p>","boost":2},{"location":"users/extend/custom-commands/#bash","title":"Bash","text":"<p>Commands can\u2019t be executed if DDEV can\u2019t find <code>bash</code>. If you\u2019re running inside Git Bash in most any terminal, this shouldn\u2019t be an issue, and DDEV should be able to find <code>git-bash</code> if it\u2019s in <code>C:\\Program Files\\Git\\bin</code> as well. But if neither of those is true, add the directory of <code>bash.exe</code> to your <code>PATH</code> environment variable.</p>","boost":2},{"location":"users/extend/custom-compose-files/","title":"Defining Additional Services with Docker Compose","text":""},{"location":"users/extend/custom-compose-files/#prerequisite","title":"Prerequisite","text":"<p>Much of DDEV\u2019s customization ability and extensibility comes from leveraging features and functionality provided by Docker and Docker Compose. Some working knowledge of these tools is required in order to customize or extend the environment DDEV provides.</p> <p>There are many examples of custom docker-compose files. The best examples are in the many available maintained DDEV add-ons.</p>"},{"location":"users/extend/custom-compose-files/#background","title":"Background","text":"<p>Under the hood, DDEV uses a private copy of docker-compose to define and run the multiple containers that make up the local environment for a project. <code>docker-compose</code> (also called <code>docker compose</code>) supports defining multiple compose files to facilitate sharing Compose configurations between files and projects, and DDEV is designed to leverage this ability.</p> <p>To add custom configuration or additional services to your project, create <code>docker-compose</code> files in the <code>.ddev</code> directory. DDEV will process any files with the <code>docker-compose.*.yaml</code> naming convention and merge them into a full docker-compose file.</p> <p>Don\u2019t modify <code>.ddev/.ddev-docker-compose-base.yaml</code> or <code>.ddev/.ddev-docker-compose-full.yaml</code>!</p> <p>The main docker-compose file is <code>.ddev/.ddev-docker-compose-base.yaml</code>, reserved exclusively for DDEV\u2019s use. It\u2019s overwritten every time a project is started, so any edits will be lost. If you need to add configuration, use an additional <code>.ddev/docker-compose.&lt;whatever&gt;.yaml</code> file instead.</p>"},{"location":"users/extend/custom-compose-files/#docker-composeyaml-examples","title":"<code>docker-compose.*.yaml</code> Examples","text":"<p>For most HTTP-based services, use <code>expose</code> with <code>HTTP_EXPOSE</code> and <code>HTTPS_EXPOSE</code> environment variables. This approach allows multiple projects to run simultaneously without port conflicts:</p> <pre><code>services:\n  dummy-service:\n    container_name: \"ddev-${DDEV_SITENAME}-dummy-service\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    expose:\n      - \"9999\"\n    environment:\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n      - HTTP_EXPOSE=9998:9999\n      - HTTPS_EXPOSE=9999:9999\n</code></pre> <p>Avoid using <code>ports</code> - it prevents multiple projects from running</p> <p>Direct port binding with <code>ports</code> should be avoided for most services because it prevents multiple projects with the same service from running simultaneously. Only use <code>ports</code> for non-HTTP services that cannot work through the DDEV router.</p> <p>Only use <code>ports</code> for non-HTTP services that must bind directly to localhost, such as database connections or other protocols that cannot be routed through HTTP/HTTPS:</p> <pre><code>services:\n  special-service:\n    ports:\n    - \"9999:9999\"  # Use only when HTTP routing is not possible\n</code></pre>"},{"location":"users/extend/custom-compose-files/#customizing-existing-services","title":"Customizing Existing Services","text":"<p>You can also modify existing DDEV services like the <code>web</code> container without adding new services. This is useful for adding environment variables, volumes, or build customizations:</p> <pre><code>services:\n  web:\n    environment:\n      - CUSTOM_ENV_VAR=value\n    volumes:\n      - ./custom-config:/etc/custom-config:ro\n</code></pre> <p>For more complex customizations, you can add a custom build stage to an existing service:</p> <pre><code>services:\n  web:\n    build:\n      context: .\n      dockerfile_inline: |\n        FROM ddev-webserver\n        RUN apt-get update &amp;&amp; apt-get install -y custom-package\n        COPY custom-script.sh /usr/local/bin/\n</code></pre>"},{"location":"users/extend/custom-compose-files/#confirming-docker-compose-configurations","title":"Confirming docker-compose Configurations","text":"<p>To better understand how DDEV parses your custom docker-compose files, run <code>ddev utility compose-config</code> or review the <code>.ddev/.ddev-docker-compose-full.yaml</code> file. This prints the final, DDEV-generated docker-compose configuration when starting your project.</p>"},{"location":"users/extend/custom-compose-files/#conventions-for-defining-additional-services","title":"Conventions for Defining Additional Services","text":"<p>When defining additional services for your project, we recommend following these conventions to ensure DDEV handles your service the same way DDEV handles default services.</p> <ul> <li>The container name should be <code>ddev-${DDEV_SITENAME}-&lt;servicename&gt;</code>. This ensures the auto-generated Traefik routing configuration matches your custom service.</li> <li> <p>Provide containers with required labels:</p> <pre><code>services:\n  dummy-service:\n    image: ${YOUR_DOCKER_IMAGE:-example/example:latest}\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n</code></pre> </li> <li> <p>When using a custom <code>build</code> configuration with <code>dockerfile_inline</code> or <code>Dockerfile</code>, define the <code>image</code> with the <code>-${DDEV_SITENAME}-built</code> suffix:</p> <pre><code>services:\n  dummy-service:\n    image: ${YOUR_DOCKER_IMAGE:-example/example:latest}-${DDEV_SITENAME}-built\n    build:\n      dockerfile_inline: |\n        ARG YOUR_DOCKER_IMAGE=\"scratch\"\n        FROM $${YOUR_DOCKER_IMAGE}\n        # ...\n      args:\n        YOUR_DOCKER_IMAGE: ${YOUR_DOCKER_IMAGE:-example/example:latest}\n</code></pre> <p>This enables DDEV to operate in offline mode once the base image has been pulled.</p> </li> <li> <p>Exposing ports for service: you can expose the port for a service to be accessible as <code>projectname.ddev.site:portNum</code> while your project is running. This is achieved by the following configurations for the container(s) being added:</p> <ul> <li> <p>Define only the internal port in the <code>expose</code> section for docker-compose; use <code>ports:</code> only if the port will be bound directly to <code>localhost</code>, as may be required for non-HTTP services.</p> </li> <li> <p>To expose a web interface to be accessible over HTTP, define the following environment variables in the <code>environment</code> section for docker-compose:</p> <ul> <li><code>VIRTUAL_HOST=$DDEV_HOSTNAME</code> You can set a subdomain with <code>VIRTUAL_HOST=mysubdomain.$DDEV_HOSTNAME</code>. You can also specify an arbitrary hostname like <code>VIRTUAL_HOST=extra.ddev.site</code>.</li> <li><code>HTTP_EXPOSE=portNum</code> The <code>hostPort:containerPort</code> convention may be used here to expose a container\u2019s port to a different external port. To expose multiple ports for a single container, define the ports as comma-separated values.</li> <li><code>HTTPS_EXPOSE=&lt;exposedPortNumber&gt;:portNum</code> This will expose an HTTPS interface on <code>&lt;exposedPortNumber&gt;</code> to the host (and to the <code>web</code> container) as <code>https://&lt;project&gt;.ddev.site:exposedPortNumber</code>. To expose multiple ports for a single container, use comma-separated definitions, as in <code>HTTPS_EXPOSE=9998:80,9999:81</code>, which would expose HTTP port 80 from the container as <code>https://&lt;project&gt;.ddev.site:9998</code> and HTTP port 81 from the container as <code>https://&lt;project&gt;.ddev.site:9999</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"users/extend/custom-compose-files/#interacting-with-additional-services","title":"Interacting with Additional Services","text":"<p><code>ddev exec</code>, <code>ddev ssh</code>, and <code>ddev logs</code> interact with containers on an individual basis.</p> <p>By default, these commands interact with the <code>web</code> container for a project. All of these commands, however, provide a <code>--service</code> or <code>-s</code> flag allowing you to specify the service name of the container to interact with. For example, if you added a service to provide Apache Solr, and the service was named <code>solr</code>, you would be able to run <code>ddev logs --service solr</code> to retrieve the Solr container\u2019s logs.</p>"},{"location":"users/extend/custom-compose-files/#third-party-services-may-need-to-trust-ddev-webserver","title":"Third Party Services May Need To Trust <code>ddev-webserver</code>","text":"<p>Sometimes a third-party service (defined in a <code>.ddev/docker-compose.*.yaml</code> file) needs to consume content from the <code>ddev-webserver</code> container. For example, a PDF generator such as Gotenberg might need to read in-container images or text to generate a PDF, or a testing service might need to read data to perform tests.</p> <p>By default, a third-party service does not trust DDEV\u2019s <code>mkcert</code> certificate authority (CA). In such cases, you have three main options:</p> <ul> <li>Use plain HTTP between the containers.</li> <li>Configure the third-party service to ignore HTTPS/TLS errors.</li> <li>Make the third-party service trust DDEV\u2019s CA.</li> </ul>"},{"location":"users/extend/custom-compose-files/#option-1-use-http-between-containers","title":"Option 1: Use HTTP Between Containers","text":"<p>Using HTTP is the simplest solution. For instance, the <code>ddev-selenium-standalone-chrome</code> service consumes web content by accessing the <code>ddev-webserver</code> over plain HTTP, see its configuration here. In this case, the <code>selenium-chrome</code> container interacts with the <code>web</code> container via <code>http://web</code> instead of HTTPS.</p>"},{"location":"users/extend/custom-compose-files/#option-2-ignore-tls-errors","title":"Option 2: Ignore TLS Errors","text":"<p>This solution configures the third-party service to ignore certificate errors. For example, if it uses cURL, you can disable verification with:</p> <pre><code>curl --insecure https://web\n# or\ncurl --insecure https://&lt;project&gt;.ddev.site\n</code></pre>"},{"location":"users/extend/custom-compose-files/#option-3-make-the-container-trust-ddevs-certificate-authority","title":"Option 3: Make the Container Trust DDEV\u2019s Certificate Authority","text":"<p>A more advanced solution is to configure the third-party container to trust the same self-signed certificate used by the <code>ddev-webserver</code> container:</p> <pre><code># .ddev/docker-compose.example.yaml\nservices:\n  example:\n    container_name: ddev-${DDEV_SITENAME}-example\n    # Run `mkcert -install` on container start\n    # (choose either this or the `post_start` approach, not both):\n    command: \"bash -c 'mkcert -install &amp;&amp; original-start-command-from-image'\"\n    # Or run `mkcert -install` on container post_start\n    # (choose either this or the `command` approach, not both):\n    post_start:\n      - command: mkcert -install\n    # Add an image and a build stage so we can add `mkcert`, etc.\n    # The Dockerfile for the build stage goes in the `.ddev/example/` directory\n    image: ${YOUR_DOCKER_IMAGE:-example/example:latest}-${DDEV_SITENAME}-built\n    build:\n      context: example\n      args:\n        YOUR_DOCKER_IMAGE: ${YOUR_DOCKER_IMAGE:-example/example:latest}\n    environment:\n      - HTTP_EXPOSE=3001:3000\n      - HTTPS_EXPOSE=3000:3000\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n    # Adding external_links allows connections to `https://example.ddev.site`,\n    # which then can go through `ddev-router`\n    # Tip: external_links are not needed anymore in DDEV v1.24.9+\n    external_links:\n      - ddev-router:${DDEV_SITENAME}.${DDEV_TLD}\n    labels:\n      com.ddev.approot: ${DDEV_APPROOT}\n      com.ddev.site-name: ${DDEV_SITENAME}\n    restart: 'no'\n    volumes:\n      - .:/mnt/ddev_config\n      # `ddev-global-cache` gets mounted so we have the CAROOT\n      # This is required so that the CA is available for `mkcert` to install\n      # and for custom commands to work\n      - ddev-global-cache:/mnt/ddev-global-cache\n</code></pre> <p>And the corresponding <code>Dockerfile</code>:</p> <pre><code># .ddev/example/Dockerfile\nARG YOUR_DOCKER_IMAGE=\"scratch\"\nFROM $YOUR_DOCKER_IMAGE\n# Define CAROOT for mkcert\nENV CAROOT=/mnt/ddev-global-cache/mkcert\n# Switch to root if needed (skip if already root)\nUSER root\n# Optionally install sudo if missing\nRUN (apt-get update || true) &amp;&amp; apt-get install -y --no-install-recommends sudo \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n# Allow the `example` user passwordless sudo for `mkcert -install`\nRUN mkdir -p /etc/sudoers.d &amp;&amp; \\\n    echo \"example ALL=(ALL) NOPASSWD: ALL\" &gt; /etc/sudoers.d/example &amp;&amp; \\\n    chmod 0440 /etc/sudoers.d/example\n# Install mkcert for the correct architecture\nARG TARGETARCH\nRUN mkdir -p /usr/local/bin &amp;&amp; \\\n    curl --fail -JL -s -o /usr/local/bin/mkcert \"https://dl.filippo.io/mkcert/latest?for=linux/${TARGETARCH}\" &amp;&amp; \\\n    chmod +x /usr/local/bin/mkcert\n# Switch back to non-root user\nUSER example\n</code></pre>"},{"location":"users/extend/custom-compose-files/#matching-container-user-to-host-user","title":"Matching Container User to Host User","text":"<p>When mounting host directories for file editing, it\u2019s often necessary to align container user permissions with those of the host user. This prevents ownership or permission mismatches when files are created or modified inside the container.</p>"},{"location":"users/extend/custom-compose-files/#option-1-run-as-the-host-user","title":"Option 1: Run as the Host User","text":"<p>The simplest way is to run the container using the same UID and GID as the host user. DDEV automatically provides these values through its environment variables <code>DDEV_UID</code> and <code>DDEV_GID</code>.</p> <pre><code># .ddev/docker-compose.example.yaml\nservices:\n  example:\n    container_name: ddev-${DDEV_SITENAME}-example\n    image: ${YOUR_DOCKER_IMAGE:-example/example:latest}\n    labels:\n      com.ddev.approot: ${DDEV_APPROOT}\n      com.ddev.site-name: ${DDEV_SITENAME}\n    restart: 'no'\n    # Run the container as the same user/group as the host\n    user: \"${DDEV_UID}:${DDEV_GID}\"\n    volumes:\n      - .:/mnt/ddev_config\n      - ddev-global-cache:/mnt/ddev-global-cache\n      # Mount the project root to /var/www/html inside the container\n      - ../:/var/www/html\n</code></pre>"},{"location":"users/extend/custom-compose-files/#option-2-create-matching-user-inside-container","title":"Option 2: Create Matching User Inside Container","text":"<p>If you need a more sophisticated user setup, similar to what <code>ddev-webserver</code> uses, you can create a user inside the container during the build process that matches the host user\u2019s UID and GID.</p> <pre><code># .ddev/docker-compose.example.yaml\nservices:\n  example:\n    container_name: ddev-${DDEV_SITENAME}-example\n    image: ${YOUR_DOCKER_IMAGE:-example/example:latest}-${DDEV_SITENAME}-built\n    build:\n      context: example\n      args:\n        YOUR_DOCKER_IMAGE: ${YOUR_DOCKER_IMAGE:-example/example:latest}\n        username: ${DDEV_USER}\n        uid: ${DDEV_UID}\n        gid: ${DDEV_GID}\n    labels:\n      com.ddev.approot: ${DDEV_APPROOT}\n      com.ddev.site-name: ${DDEV_SITENAME}\n    restart: 'no'\n    # Run the container as the same user/group as the host\n    user: \"${DDEV_UID}:${DDEV_GID}\"\n    volumes:\n      - .:/mnt/ddev_config\n      - ddev-global-cache:/mnt/ddev-global-cache\n      # Mount the project root to /var/www/html inside the container\n      - ../:/var/www/html\n</code></pre> <p>And the corresponding <code>Dockerfile</code>:</p> <pre><code># .ddev/example/Dockerfile\nARG YOUR_DOCKER_IMAGE=\"scratch\"\nFROM $YOUR_DOCKER_IMAGE\n# Switch to root if needed (skip if already root)\nUSER root\n# Accept build arguments for user creation\nARG username\nARG uid\nARG gid\n# Ensure tty group exists\nRUN getent group tty || groupadd tty\n# Create group and user, trying multiple methods for compatibility\nRUN (groupadd --gid \"$gid\" \"$username\" || groupadd \"$username\" || true) &amp;&amp; \\\n    (useradd -G tty -l -m -s \"/bin/bash\" --gid \"$username\" --comment '' --uid \"$uid\" \"$username\" || \\\n    useradd -G tty -l -m -s \"/bin/bash\" --gid \"$username\" --comment '' \"$username\" || \\\n    useradd -G tty -l -m -s \"/bin/bash\" --gid \"$gid\" --comment '' \"$username\" || \\\n    useradd -G tty -l -m -s \"/bin/bash\" --comment '' \"$username\")\n# Switch to the created user\nUSER \"$username\"\n</code></pre>"},{"location":"users/extend/custom-compose-files/#optional-services","title":"Optional Services","text":"<p>Services in named Docker Compose profiles will not automatically be started on <code>ddev start</code>. This is useful when you want to define a service that is not always needed, but can be started by an additional command when it is time to use it. In this way, it doesn\u2019t use system resources unless needed. In this example, the <code>busybox</code> container will only be started if the <code>busybox</code> profile is requested, for example with <code>ddev start --profiles=busybox</code>. More than one service can be labeled for a single Docker Compose profile.</p> <p>Run <code>ddev start --profiles='*'</code> to start all defined profiles.</p> <pre><code>services:\n  busybox:\n    image: busybox:stable\n    command: tail -f /dev/null\n    profiles:\n      - busybox\n    container_name: ddev-${DDEV_SITENAME}-busybox\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n</code></pre>"},{"location":"users/extend/custom-docker-services/","title":"Custom Docker Compose Services","text":"<p>When you need services that aren\u2019t available as DDEV add-ons, or require deep customization beyond what add-ons provide, you can create custom Docker Compose services using <code>docker-compose.*.yaml</code> files.</p> <p>From Custom Services to Add-ons</p> <p>Many successful custom services eventually become DDEV add-ons so they can be shared with teams, between projects, or with the broader community. If you find your custom service useful and stable, consider converting it to an add-on using the DDEV Add-on Template.</p>","boost":2},{"location":"users/extend/custom-docker-services/#when-to-use-custom-services","title":"When to Use Custom Services","text":"<p>Use custom Docker Compose services when:</p> <ul> <li>You need a custom or highly specialized service</li> <li>You require deep customization of service configuration</li> <li>You\u2019re prototyping or experimenting with service configurations</li> <li>The service doesn\u2019t justify creating a full add-on yet</li> <li>You need tight integration with your specific project setup</li> </ul> <p>Use add-ons when:</p> <ul> <li>An add-on is already available that provides a standard, tested service (Redis, Elasticsearch, Solr)</li> <li>You want automatic configuration and setup</li> </ul> <p>See Using Add-ons for pre-built add-ons.</p>","boost":2},{"location":"users/extend/custom-docker-services/#creating-custom-services","title":"Creating Custom Services","text":"<p>Create <code>docker-compose.*.yaml</code> files in your project\u2019s <code>.ddev</code> directory. DDEV automatically processes any files matching this pattern and merges them into the full docker-compose configuration.</p>","boost":2},{"location":"users/extend/custom-docker-services/#basic-service-example","title":"Basic Service Example","text":"<p>Create <code>.ddev/docker-compose.myservice.yaml</code>:</p> <pre><code>services:\n  myservice:\n    container_name: \"ddev-${DDEV_SITENAME}-myservice\"\n    image: nginx:alpine\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"8080\"\n    environment:\n      - VIRTUAL_HOST=${DDEV_HOSTNAME}\n      - HTTP_EXPOSE=8080:8080\n      - HTTPS_EXPOSE=8081:8080\n    volumes:\n      - \".:/mnt/ddev_config\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#service-configuration-best-practices","title":"Service Configuration Best Practices","text":"","boost":2},{"location":"users/extend/custom-docker-services/#required-labels","title":"Required Labels","text":"<p>Always include these labels for proper DDEV integration:</p> <pre><code>labels:\n  com.ddev.site-name: ${DDEV_SITENAME}\n  com.ddev.approot: ${DDEV_APPROOT}\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#container-naming","title":"Container Naming","text":"<p>Use consistent naming with the DDEV project:</p> <pre><code>container_name: \"ddev-${DDEV_SITENAME}-servicename\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#restart-policy","title":"Restart Policy","text":"<p>Set restart policy to prevent issues:</p> <pre><code>restart: \"no\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#port-exposure","title":"Port Exposure","text":"<p>For HTTP services that should be accessible via ddev-router:</p> <pre><code>ports:\n  - \"8080\"  # Expose port to Docker network\nenvironment:\n  - VIRTUAL_HOST=${DDEV_HOSTNAME}\n  - HTTP_EXPOSE=8080:8080    # HTTP access\n  - HTTPS_EXPOSE=8081:8080   # HTTPS access\n</code></pre> <p>For direct port binding (can cause conflicts between projects):</p> <pre><code>ports:\n  - \"9999:9999\"  # Bind to host port 9999\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#volume-mounts","title":"Volume Mounts","text":"<p>Mount your <code>.ddev</code> directory for configuration access:</p> <pre><code>volumes:\n  - \".:/mnt/ddev_config\"\n</code></pre> <p>Mount project files if needed:</p> <pre><code>volumes:\n  - \"../:/var/www/html:cached\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#customizing-ddev-describe-output","title":"Customizing ddev describe Output","text":"<p>You can add custom descriptions that appear in <code>ddev describe</code> output using the <code>x-ddev</code> extension field. This is helpful for providing information about credentials, URLs, or usage instructions for your custom services.</p> <pre><code>services:\n  rabbitmq:\n    container_name: \"ddev-${DDEV_SITENAME}-rabbitmq\"\n    image: rabbitmq:3-management-alpine\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"15672\"\n    environment:\n      - VIRTUAL_HOST=${DDEV_HOSTNAME}\n      - HTTP_EXPOSE=15672:15672\n      - RABBITMQ_DEFAULT_USER=rabbitmq\n      - RABBITMQ_DEFAULT_PASS=rabbitmq\n    x-ddev:\n      # Can be multi-line block\n      describe-info: |\n        User: rabbitmq\n        Pass: rabbitmq\n      # Or single line string\n      describe-url-port: \"extra help here\"\n</code></pre> <p>The <code>x-ddev.describe-url-port</code> value appears in the URL/Port column when running <code>ddev describe</code> and the <code>x-ddev-describe-info</code> value appears in the <code>info</code> column, making it easy for team members to see important service information without digging through documentation and configuration files.</p>","boost":2},{"location":"users/extend/custom-docker-services/#advanced-service-examples","title":"Advanced Service Examples","text":"","boost":2},{"location":"users/extend/custom-docker-services/#sql-server-database-service","title":"SQL Server Database Service","text":"<p>This example shows a custom SQL Server database service, useful when you need a database not natively supported by DDEV.</p> <p>Create <code>.ddev/docker-compose.sqlsrv.yaml</code>:</p> <pre><code>services:\n  sqlsrv:\n    container_name: \"ddev-${DDEV_SITENAME}-sqlsrv\"\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"1433:1433\"  # Direct port binding for SQL Server protocol\n    environment:\n      - SA_PASSWORD=Password123!\n      - ACCEPT_EULA=Y\n      - MSSQL_PID=Express\n    volumes:\n      - \"sqlsrv-data:/var/opt/mssql\"\n      - \".:/mnt/ddev_config\"\n    # Platform specification for ARM64 compatibility\n    platform: linux/amd64\n\nvolumes:\n  sqlsrv-data:\n    external: true\n    name: \"${DDEV_SITENAME}-sqlsrv-data\"\n</code></pre> <p>Non-HTTP Services Require Direct Port Binding</p> <p>SQL Server uses a proprietary protocol that cannot be routed through the DDEV router, so it requires direct <code>ports</code> binding. This means only one project can use SQL Server at a time unless you change the port.</p>","boost":2},{"location":"users/extend/custom-docker-services/#service-with-custom-configuration","title":"Service with Custom Configuration","text":"<p>Create <code>.ddev/docker-compose.elasticsearch.yaml</code>:</p> <pre><code>services:\n  elasticsearch:\n    container_name: \"ddev-${DDEV_SITENAME}-elasticsearch\"\n    image: elasticsearch:8.11.0\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"9200\"\n    environment:\n      - VIRTUAL_HOST=${DDEV_HOSTNAME}\n      - HTTP_EXPOSE=9200:9200\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    volumes:\n      - \"elasticsearch-data:/usr/share/elasticsearch/data\"\n      - \"./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro\"\n\nvolumes:\n  elasticsearch-data:\n    external: true\n    name: \"${DDEV_SITENAME}-elasticsearch-data\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#multi-service-setup","title":"Multi-Service Setup","text":"<p>Create <code>.ddev/docker-compose.cache.yaml</code>:</p> <pre><code>services:\n  redis:\n    container_name: \"ddev-${DDEV_SITENAME}-redis\"\n    image: redis:7-alpine\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"6379\"\n\n  memcached:\n    container_name: \"ddev-${DDEV_SITENAME}-memcached\"\n    image: memcached:alpine\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    restart: \"no\"\n    ports:\n      - \"11211\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#environment-variables-and-configuration","title":"Environment Variables and Configuration","text":"","boost":2},{"location":"users/extend/custom-docker-services/#available-ddev-variables","title":"Available DDEV Variables","text":"<p>Use these variables in your service definitions:</p> <ul> <li><code>${DDEV_SITENAME}</code> - Project name</li> <li><code>${DDEV_HOSTNAME}</code> - Primary hostname</li> <li><code>${DDEV_APPROOT}</code> - Full path to project root</li> <li><code>${DDEV_DOCROOT}</code> - Document root (relative to project root)</li> <li><code>${DDEV_PHP_VERSION}</code> - PHP version</li> <li><code>${DDEV_WEBSERVER_TYPE}</code> - Web server type</li> <li><code>${DDEV_DATABASE_FAMILY}</code> - Database family (<code>mysql</code>, <code>postgres</code>)</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#custom-environment-variables","title":"Custom Environment Variables","text":"<p>Define project-specific variables in <code>.ddev/.env</code>:</p> <pre><code>MYSERVICE_VERSION=latest\nMYSERVICE_MEMORY=512m\n</code></pre> <p>Then use in your service:</p> <pre><code>services:\n  myservice:\n    image: myservice:${MYSERVICE_VERSION:-latest}\n    environment:\n      - MEMORY_LIMIT=${MYSERVICE_MEMORY:-256m}\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#service-specific-environment-files","title":"Service-Specific Environment Files","text":"<p>Use <code>.ddev/.env.servicename</code> for service-specific variables:</p> <pre><code>ddev dotenv set .ddev/.env.myservice --memory-limit 1024m --debug-mode true\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#testing-and-debugging-services","title":"Testing and Debugging Services","text":"","boost":2},{"location":"users/extend/custom-docker-services/#check-service-status","title":"Check Service Status","text":"<pre><code>ddev logs myservice\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#verify-configuration","title":"Verify Configuration","text":"<pre><code>ddev utility compose-config\n</code></pre> <p>This shows the complete merged docker-compose configuration.</p>","boost":2},{"location":"users/extend/custom-docker-services/#connect-to-service","title":"Connect to Service","text":"<pre><code>ddev exec --service=myservice bash\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#network-connectivity","title":"Network Connectivity","text":"<p>Test connectivity from the web container:</p> <pre><code>ddev exec \"curl -s http://myservice:8080/health\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#service-integration-patterns","title":"Service Integration Patterns","text":"","boost":2},{"location":"users/extend/custom-docker-services/#database-integration","title":"Database Integration","text":"<p>Add database connection info to web container in <code>.ddev/docker-compose.web-env.yaml</code>:</p> <pre><code>services:\n  web:\n    environment:\n      - MYDB_HOST=mydb\n      - MYDB_PORT=5432\n      - MYDB_DATABASE=myproject\n      - MYDB_USER=db\n      - MYDB_PASSWORD=db\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#configuration-file-mounting","title":"Configuration File Mounting","text":"<p>Mount configuration from your project in <code>.ddev/docker-compose.config.yaml</code>:</p> <pre><code>services:\n  myservice:\n    volumes:\n      - \"./config/myservice.conf:/etc/myservice/myservice.conf:ro\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#initialization-scripts","title":"Initialization Scripts","text":"<p>Run initialization scripts in <code>.ddev/docker-compose.init.yaml</code>:</p> <pre><code>services:\n  myservice:\n    volumes:\n      - \"./scripts/init.sh:/docker-entrypoint-initdb.d/init.sh:ro\"\n</code></pre>","boost":2},{"location":"users/extend/custom-docker-services/#troubleshooting","title":"Troubleshooting","text":"","boost":2},{"location":"users/extend/custom-docker-services/#common-issues","title":"Common Issues","text":"<p>Port conflicts: Multiple projects using the same service may conflict. Use project-specific ports or let DDEV handle routing.</p> <p>Service won\u2019t start: Check <code>ddev logs servicename</code> for error messages.</p> <p>Network connectivity: Ensure services are on the same Docker network (automatic with DDEV).</p> <p>File permissions: Use appropriate volume mount options (<code>:cached</code>, <code>:ro</code>).</p>","boost":2},{"location":"users/extend/custom-docker-services/#debugging-steps","title":"Debugging Steps","text":"<ol> <li>Verify syntax: <code>ddev utility compose-config</code></li> <li>Check logs: <code>ddev logs servicename</code></li> <li>Test connectivity: <code>ddev exec \"ping servicename\"</code></li> <li>Inspect container: <code>ddev exec --service=servicename bash</code></li> </ol>","boost":2},{"location":"users/extend/custom-docker-services/#migration-from-ddev-contrib","title":"Migration from ddev-contrib","text":"<p>Many services previously documented in ddev-contrib have been converted to official add-ons. Check DDEV Add-on Registry first before creating custom services.</p>","boost":2},{"location":"users/extend/custom-docker-services/#still-available-in-ddev-contrib","title":"Still Available in ddev-contrib","text":"<ul> <li>Old PHP Versions: Old PHP Versions</li> <li>Specialized configurations: Various experimental and niche services</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#best-practices","title":"Best Practices","text":"","boost":2},{"location":"users/extend/custom-docker-services/#performance","title":"Performance","text":"<ul> <li>Use specific image tags instead of <code>latest</code></li> <li>Set appropriate resource limits</li> <li>Use volume caching options (<code>:cached</code>)</li> <li>Minimize container layers and size</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#security","title":"Security","text":"<ul> <li>Don\u2019t expose unnecessary ports to the host</li> <li>Use non-root users when possible</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#maintainability","title":"Maintainability","text":"<ul> <li>Document your service configuration</li> <li>Use meaningful container names</li> <li>Group related services in single files</li> <li>Comment complex configurations</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#team-sharing","title":"Team Sharing","text":"<ul> <li>Include service documentation in your project readme</li> <li>Use environment variables for customizable values</li> <li>Provide setup and testing instructions</li> <li>Consider creating an add-on for reusable services</li> </ul>","boost":2},{"location":"users/extend/custom-docker-services/#converting-to-add-ons","title":"Converting to Add-ons","text":"<p>If your custom service becomes stable and useful for multiple projects, consider converting it to a DDEV add-on. This allows you to:</p> <ul> <li>Share the service with your team across projects</li> <li>Contribute to the DDEV community</li> <li>Benefit from automatic installation and configuration</li> <li>Add version management and updates</li> </ul> <p>Steps to convert:</p> <ol> <li>Create an add-on repository from DDEV Add-on Template</li> <li>Move your service configuration to the add-on</li> <li>Add installation actions and configuration options</li> <li>Create tests and documentation</li> <li>Publish and share with the community</li> </ol> <p>See Creating Add-ons for detailed instructions.</p> <p>Custom Docker Compose services provide the ultimate flexibility for customizing your DDEV environment. While add-ons are recommended for common services, custom services let you integrate exactly what your project needs, with the potential to evolve into shareable add-ons.</p>","boost":2},{"location":"users/extend/custom-tls-certificates/","title":"Custom TLS Certificates","text":"<p>It\u2019s possible to use \u201creal\u201d TLS certificates issued by a CA rather than the local-development-oriented <code>mkcert</code> command.</p> <ol> <li>Obtain a certificate and key from Let\u2019s Encrypt or another source.</li> <li>Install the certificate and key in your project\u2019s <code>.ddev/custom_certs</code> directory.</li> <li>The files should be named <code>&lt;projectname&gt;.crt</code> and <code>&lt;projectname&gt;.key</code>, for example <code>exampleproj.crt</code> and <code>exampleproj.key</code>.</li> <li>Run <code>ddev start</code> and verify using a browser that you\u2019re using the right certificate.</li> </ol>"},{"location":"users/extend/customization-extendibility/","title":"Extending and Customizing Environments","text":"<p>DDEV provides several ways to customize and extend project environments.</p>","boost":3},{"location":"users/extend/customization-extendibility/#choosing-the-right-approach","title":"Choosing the Right Approach","text":"<p>Different customization needs require different approaches. Use this decision tree to find the best solution:</p>","boost":3},{"location":"users/extend/customization-extendibility/#need-a-service-like-redis-elasticsearch-or-solr","title":"\ud83c\udfaf Need a service like Redis, Elasticsearch, or Solr?","text":"<p>\u2192 Use DDEV Add-ons</p> <ul> <li>Pre-built, tested, and maintained</li> <li>Automatic installation and configuration</li> <li>Easy updates and management</li> <li>Cross-platform compatibility</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#need-a-highly-customized-or-specialized-service","title":"\ud83d\udd27 Need a highly customized or specialized service?","text":"<p>\u2192 Use Custom Docker Compose Services</p> <ul> <li>Full control over service configuration</li> <li>Custom images and complex setups</li> <li>Project-specific requirements</li> <li>Can evolve into add-ons later</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#need-to-modify-existing-container-behavior","title":"\u2699\ufe0f Need to modify existing container behavior?","text":"<p>\u2192 Use configuration approaches below:</p> <ul> <li>Environment variables</li> <li>Custom configuration files (PHP, nginx, Apache)</li> <li>Hooks for automation</li> <li>Image customization</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#want-to-create-reusable-extensions","title":"\ud83d\udc68\u200d\ud83d\udcbb Want to create reusable extensions?","text":"<p>\u2192 Create DDEV Add-ons</p> <ul> <li>Share with teams and community</li> <li>PHP or bash-based actions</li> <li>Version management and updates</li> <li>Automatic installation flows</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#environment-variables-for-containers-and-services","title":"Environment Variables for Containers and Services","text":"<p>You can set custom environment variables in several places:</p> <ol> <li> <p>An optional, project-level <code>.ddev/.env</code> file provides environment variables to all DDEV containers, including any additional services or add-ons. It can look something like this:</p> <pre><code>MY_ENV_VAR=\"someval\"\nMY_OTHER_ENV_VAR=\"someotherval\"\n</code></pre> </li> <li> <p>With DDEV v1.23.5+, an optional, project-level <code>.ddev/env.*</code> file (where <code>*</code> is a service name, like <code>web</code>, <code>db</code>, <code>redis</code>, etc.) provides environment variables to specific services or add-ons. For example, <code>.ddev/.env.redis</code> file can look something like this:</p> <pre><code>REDIS_TAG=\"7-bookworm\"\nREDIS_FOO=\"bar\"\n</code></pre> <p>Use the <code>ddev dotenv set</code> command to set environment variables from command line:</p> <pre><code>ddev dotenv set .ddev/.env.redis --redis-tag 7-bookworm --redis-foo bar\n</code></pre> <p>If variables should be expanded only in <code>.ddev/docker-compose.*.yaml</code> files, use a different filename, for example, <code>.ddev/.env.redis-build</code>.</p> </li> <li> <p>The global <code>web_environment</code> setting in <code>.ddev/global_config.yaml</code>.</p> <pre><code>web_environment:\n    - MY_ENV_VAR=someval\n    - MY_OTHER_ENV_VAR=someotherval\n</code></pre> </li> <li> <p>The project\u2019s <code>web_environment</code> setting in <code>.ddev/config.yaml</code> or <code>.ddev/config.*.yaml</code>:</p> <pre><code>web_environment:\n    - MY_ENV_VAR=someval\n    - MY_OTHER_ENV_VAR=someotherval\n</code></pre> </li> </ol> <p>If you\u2019d rather use the CLI to set the project or global <code>web_environment</code> value, you can use the <code>ddev config</code> command:</p> <pre><code># Set MY_ENV_VAR for the project\nddev config --web-environment-add=\"MY_ENV_VAR=someval\"\n\n# Set MY_ENV_VAR globally\nddev config global --web-environment-add=\"MY_ENV_VAR=someval\"\n</code></pre> <p>You can use the <code>--web-environment</code> flag to overwrite existing values rather than adding them.</p> <p>Don\u2019t check in sensitive values!</p> <p>Sensitive variables like API keys should not be checked in with your project. You might use an <code>.env</code> file and not check that in, but offer a <code>.env.example</code> with expected keys that don\u2019t have values. Some use global configuration for sensitive values, as that\u2019s not normally checked in either. (If you provide a <code>.env.example</code> it can be checked in, overriding the <code>.ddev/.gitignore</code>, with <code>git add -f .ddev/.env.example</code>.)</p>","boost":3},{"location":"users/extend/customization-extendibility/#altering-the-in-container-path","title":"Altering the In-Container <code>$PATH</code>","text":"<p>Sometimes it\u2019s easiest to put the command you need into the existing <code>$PATH</code> using a symbolic link rather than changing the in-container <code>$PATH</code>. For example, the project <code>bin</code> directory is already included the <code>$PATH</code>. So if you have a command you want to run that\u2019s not already in the <code>$PATH</code>, you can add a symlink.</p> <p>Examples:</p> <ul> <li>On Craft CMS, the <code>craft</code> script is often in the project root, which is not in the <code>$PATH</code>. But if you <code>mkdir bin &amp;&amp; ln -s craft bin/craft</code> you should be able to run <code>ddev exec craft</code>. (Note however that <code>ddev craft</code> takes care of this for you.)</li> <li>On projects where the <code>vendor</code> directory is not in the project root (Acquia projects, for example, have <code>composer.json</code> and <code>vendor</code> in the <code>docroot</code> directory), you can <code>mkdir bin &amp;&amp; ln -s docroot/vendor/bin/drush bin/drush</code> to put <code>drush</code> in your <code>$PATH</code>. (With projects like this, make sure to set <code>composer_root: docroot</code> so that <code>ddev composer</code> works properly.)</li> </ul> <p>You can also modify the <code>PATH</code> environment variable by adding a script to <code>&lt;project&gt;/.ddev/homeadditions/.bashrc.d/</code> or (global) <code>~/.ddev/homeadditions/.bashrc.d/</code>. For example, if your project vendor directory is not in the expected place (<code>/var/www/html/vendor/bin</code>) you can add a <code>&lt;project&gt;/.ddev/homeadditions/.bashrc.d/path.sh</code>:</p> <pre><code>export PATH=$PATH:/var/www/html/somewhereelse/vendor/bin\n</code></pre>","boost":3},{"location":"users/extend/customization-extendibility/#changing-php-version","title":"Changing PHP Version","text":"<p>The project\u2019s <code>.ddev/config.yaml</code> file defines the PHP version to use. The <code>php_version</code> can be <code>5.6</code> through <code>8.4</code>, and new versions are added when they are released by the PHP Foundation.</p>","boost":3},{"location":"users/extend/customization-extendibility/#older-versions-of-php","title":"Older Versions of PHP","text":"<p>Support for older versions of PHP (&lt; 5.6) is available on ddev-contrib via custom docker-compose files.</p> <p>If your project requires multiple versions of PHP, and one of them is EOL, you can install it using this technique.</p>","boost":3},{"location":"users/extend/customization-extendibility/#changing-web-server-type","title":"Changing Web Server Type","text":"<p>DDEV supports nginx with php-fpm by default (<code>nginx-fpm</code>), and Apache with php-fpm (<code>apache-fpm</code>). You can change this with the <code>webserver_type</code> config option, or using the <code>ddev config</code> command with the <code>--webserver-type</code> flag.</p>","boost":3},{"location":"users/extend/customization-extendibility/#adding-services-to-a-project","title":"Adding Services to a Project","text":"<p>DDEV provides everything you need to build a modern PHP application on your local machine. More complex web applications, however, often require integration with services beyond the usual requirements of a web and database server\u2014maybe Apache Solr, Redis, Varnish, or many others. While DDEV likely won\u2019t ever provide all of these additional services out of the box, it\u2019s designed to provide simple ways to customize the environment and meet your project\u2019s needs without reinventing the wheel.</p> <p>A collection of vetted service configurations is available in the Additional Services Documentation. For pre-built solutions, see Using Add-ons.</p> <p>If you need to create a service configuration for your project, see Defining Additional Services with Docker Compose.</p>","boost":3},{"location":"users/extend/customization-extendibility/#using-nodejs-with-ddev","title":"Using Node.js with DDEV","text":"<p>There are many ways to deploy Node.js in any project, so DDEV tries to let you set up any possibility you can come up with.</p> <ul> <li>You can choose any Node.js version you want (including minor and older versions) in <code>.ddev/config.yaml</code> with <code>nodejs_version</code>.</li> <li><code>ddev nvm</code> gives you the full capabilities of Node Version Manager.</li> <li><code>ddev npm</code> and <code>ddev yarn</code> provide shortcuts to the <code>npm</code> and <code>yarn</code> commands inside the container, and their caches are persistent.</li> <li>You can run Node.js daemons using <code>web_extra_daemons</code>.</li> <li>You can expose Node.js ports via <code>ddev-router</code> by using <code>web_extra_exposed_ports</code>.</li> <li>You can manually run Node.js scripts using <code>ddev exec &lt;script&gt;</code> or <code>ddev exec node &lt;script&gt;</code>.</li> </ul> <p>Please share your techniques!</p> <p>There are several ways to share your favorite Node.js tips and techniques. Best are DDEV add-ons and Stack Overflow.</p>","boost":3},{"location":"users/extend/customization-extendibility/#using-nodejs-as-ddevs-primary-web-server","title":"Using Node.js as DDEV\u2019s primary web server","text":"<p>In DDEV v1.24.3+, you can use the <code>generic</code> web server type and provide your own web server inside the <code>web</code> container. As a result, you can use <code>webserver_type: generic</code> and use <code>web_extra_daemons</code> and <code>web_extra_exposed_ports</code> to provide your own web server. The Node.js quickstart shows how to do this with an Express Node.js server and also with a SvelteKit server.</p>","boost":3},{"location":"users/extend/customization-extendibility/#running-extra-daemons-in-the-web-container","title":"Running Extra Daemons in the Web Container","text":"<p>There are several ways to run processes inside the <code>web</code> container.</p> <ol> <li>Manually execute them as needed, with <code>ddev exec</code>, for example.</li> <li>Run them with a <code>post-start</code> hook.</li> <li>Run them automatically using <code>web_extra_daemons</code>.</li> </ol> <p>Daemons requiring network access should bind to <code>0.0.0.0</code>, not to <code>localhost</code> or <code>127.0.0.1</code></p> <p>Many examples on the internet show starting daemons starting up and binding to <code>127.0.0.1</code> or <code>localhost</code>. Those examples are assuming that network consumers are on the same network interface, but with a DDEV-based solution the network server is essentially on a different computer from the host computer (workstation). If the host computer needs to have connectivity, then bind to <code>0.0.0.0</code> (meaning \u201call network interfaces\u201d) rather than <code>127.0.0.1</code> or <code>localhost</code> (which means only allow access from the local network). A ReactPHP example would be:  <pre><code>$socket = new React\\Socket\\SocketServer('0.0.0.0:3000');\n</code></pre>  instead of:  <pre><code>$socket = new React\\Socket\\SocketServer('127.0.0.1:3000');\n</code></pre>  To expose your daemon to the workstation and browser, see Exposing Extra Ports via <code>ddev-router</code>.</p>","boost":3},{"location":"users/extend/customization-extendibility/#running-extra-daemons-with-a-post-start-hook","title":"Running Extra Daemons with a <code>post-start</code> Hook","text":"<p>Daemons can be run with a <code>post-start</code> <code>exec</code> hook or automatically started using <code>supervisord</code>.</p> <p>A simple <code>post-start</code> exec hook in <code>.ddev/config.yaml</code> might look like:</p> <pre><code>hooks:\n  post-start:\n    - exec: \"nohup php --docroot=/var/www/html/something -S 0.0.0.0:6666 &amp;\"\n</code></pre>","boost":3},{"location":"users/extend/customization-extendibility/#running-extra-daemons-using-web_extra_daemons","title":"Running Extra Daemons Using <code>web_extra_daemons</code>","text":"<p>If you need extra daemons to start up automatically inside the web container, you can add them using <code>web_extra_daemons</code> in <code>.ddev/config.yaml</code>.</p> <p>You might be running Node.js daemons that serve a particular purpose, like <code>browsersync</code>, or more general daemons like a <code>cron</code> daemon.</p> <p>For example, you could use this configuration to run two instances of the Node.js HTTP server for different directories:</p> <pre><code>web_extra_daemons:\n  - name: \"http-1\"\n    command: \"/var/www/html/node_modules/.bin/http-server -p 3000\"\n    directory: /var/www/html\n  - name: \"http-2\"\n    command: \"/var/www/html/node_modules/.bin/http-server /var/www/html/sub -p 3000\"\n    directory: /var/www/html\n</code></pre> <p>How to view the results of a daemon start attempt?</p> <p>See <code>ddev logs</code> or <code>docker logs ddev-&lt;project&gt;-web</code>.</p> <ul> <li><code>directory</code> should be the absolute path inside the container to the directory where the daemon should run.</li> <li><code>command</code> is best as a simple binary with its arguments, but Bash features like <code>cd</code> or <code>&amp;&amp;</code> work. If the program to be run is not in the <code>ddev-webserver</code> <code>$PATH</code> then it should have the absolute in-container path to the program to be run, like <code>/var/www/html/node_modules/.bin/http-server</code>.</li> <li><code>web_extra_daemons</code> is a shortcut for adding a configuration to <code>supervisord</code>, which organizes daemons inside the web container. If the default settings are inadequate for your use, you can write a complete config file for your daemon.</li> <li>Your daemon is expected to run in the foreground, not to daemonize itself, <code>supervisord</code> will take care of that.</li> <li>To debug and/or get your daemon running to begin with, experiment with running it manually inside <code>ddev ssh</code>. Then when it works perfectly implement auto-start with <code>web_extra_daemons</code>.</li> <li>You can manually restart all daemons with <code>ddev exec supervisorctl restart webextradaemons:*</code> or <code>ddev exec supervisorctl restart webextradaemons:&lt;yourdaemon&gt;</code>. (<code>supervisorctl stop</code> and <code>supervisorctl start</code> are available as you would expect.)</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#exposing-extra-ports-via-ddev-router","title":"Exposing Extra Ports via <code>ddev-router</code>","text":"<p>If your <code>web</code> container has additional HTTP servers running inside it on different ports, those can be exposed using <code>web_extra_exposed_ports</code> in <code>.ddev/config.yaml</code>. For example, this configuration would expose a <code>node-vite</code> HTTP server running on port 3000 inside the <code>web</code> container, via <code>ddev-router</code>, to ports 9998 (HTTP) and 9999 (HTTPS), so it could be accessed via <code>https://&lt;project&gt;.ddev.site:9999</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: node-vite\n    container_port: 3000\n    http_port: 9998\n    https_port: 9999\n</code></pre> <p>The configuration below would expose a Node.js server running in the <code>web</code> container on port 3000 as <code>https://&lt;project&gt;.ddev.site:3000</code> and a \u201csomething\u201d server running in the web container on port 4000 as <code>https://&lt;project&gt;.ddev.site:4000</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: nodejs\n    container_port: 3000\n    http_port: 2999\n    https_port: 3000\n  - name: something\n    container_port: 4000\n    https_port: 4000\n    http_port: 3999\n</code></pre> <p>Fill in all three fields even if you don\u2019t intend to use the <code>https_port</code>!</p> <p>If you don\u2019t add <code>https_port</code>, then it defaults to <code>0</code> and <code>ddev-router</code> will fail to start.</p>","boost":3},{"location":"users/extend/customization-extendibility/#exposing-extra-non-http-ports","title":"Exposing Extra Non-HTTP Ports","text":"<p>While the <code>web_extra_exposed_ports</code> gracefully handles running multiple DDEV projects at the same time, it can\u2019t forward ports for non-HTTP TCP or UDP daemons. Instead, ports can be added in a <code>docker-compose.*.yaml</code> file. This file does not need to specify an additional services. For example, this configuration exposes port 5900 for a VNC server.</p> <p>In <code>.ddev/docker-compose.vnc.yaml</code>:</p> <pre><code>services:\n  web:\n    ports:\n      - \"5900:5900\"\n</code></pre> <p>If multiple projects declare the same port, only the first project will be able to start successfully. Consider making services like this disabled by default, especially if they aren\u2019t needed in day to day use.</p>","boost":3},{"location":"users/extend/customization-extendibility/#custom-nginx-configuration","title":"Custom nginx Configuration","text":"<p>When you run <code>ddev restart</code> using <code>nginx-fpm</code>, DDEV creates a configuration customized to your project type in <code>.ddev/nginx_full/nginx-site.conf</code>. You can edit and override the configuration by removing the <code>#ddev-generated</code> line and doing whatever you need with it. After each change, run <code>ddev restart</code>. (For updates without restart, see Troubleshooting nginx Configuration.)</p> <p>You can also have more than one config file in the <code>.ddev/nginx_full</code> directory, and each will be loaded when DDEV starts. This can be used for serving multiple docroots and other techniques.</p>","boost":3},{"location":"users/extend/customization-extendibility/#troubleshooting-nginx-configuration","title":"Troubleshooting nginx Configuration","text":"<ul> <li>Any errors in your configuration may cause the <code>web</code> container to fail and try to restart. If you see that behavior, use <code>ddev logs</code> to diagnose.</li> <li>The configuration is copied into the container during restart. Therefore it is not possible to edit the host file for the changes to take effect. You may want to edit the file directly inside the container at <code>/etc/nginx/sites-enabled/</code>. (For example, run <code>ddev ssh</code> to get into the container.)</li> <li>You can run <code>ddev exec nginx -t</code> to test whether your configuration inside the container is valid. (Or run <code>ddev ssh</code> and run <code>nginx -t</code>.)</li> <li>You can reload the nginx configuration by running either <code>ddev restart</code> or editing the configuration inside the container at <code>/etc/nginx/sites-enabled/</code> and running <code>ddev exec nginx -s reload</code> on the host system (inside the container run <code>nginx -s reload</code>).</li> <li>The alias <code>Alias \"/phpstatus\" \"/var/www/phpstatus.php\"</code> is required for the health check script to work.</li> </ul>","boost":3},{"location":"users/extend/customization-extendibility/#multiple-docroots-in-nginx-advanced","title":"Multiple Docroots in nginx (Advanced)","text":"<p>It\u2019s easiest to have different web servers in different DDEV projects, and DDEV projects can easily communicate with each other, but some sites require more than one docroot for a single project codebase. Sometimes this is because there\u2019s an API in the same codebase but using different code, or different code for different languages, etc.</p> <p>The generated <code>.ddev/nginx_full/seconddocroot.conf.example</code> demonstrates how to do this. You can create as many of these as you want: change the <code>servername</code> and the <code>root</code> and customize as needed.</p>","boost":3},{"location":"users/extend/customization-extendibility/#nginx-snippets","title":"nginx Snippets","text":"<p>To add an nginx snippet to the default config, add an nginx config file as <code>.ddev/nginx/&lt;something&gt;.conf</code>.</p> <p>For example, to make all HTTP URLs redirect to their HTTPS equivalents you might add <code>.ddev/nginx/redirect.conf</code> with this stanza:</p> <pre><code>    if ($http_x_forwarded_proto = \"http\") {\n      return 301 https://$host$request_uri;\n    }\n</code></pre> <p>After adding a snippet, run <code>ddev restart</code> to make it take effect.</p>","boost":3},{"location":"users/extend/customization-extendibility/#custom-apache-configuration","title":"Custom Apache Configuration","text":"<p>If you\u2019re using <code>webserver_type: apache-fpm</code> in your <code>.ddev/config.yaml</code>, you can override the default site configuration by editing or replacing the DDEV-provided <code>.ddev/apache/apache-site.conf</code> configuration.</p> <p>When you run <code>ddev restart</code> using <code>apache-fpm</code>, DDEV creates a configuration customized to your project type in <code>.ddev/apache/apache-site.conf</code>. You can edit and override the configuration by removing the <code>#ddev-generated</code> line and doing whatever you need with it. After each change, run <code>ddev restart</code>.</p> <ul> <li>Edit the <code>.ddev/apache/apache-site.conf</code>.</li> <li>Remove the <code>#ddev-generated</code> to signal to DDEV that you\u2019re taking control of the file.</li> <li>Add your configuration changes.</li> <li>Save your configuration file and run <code>ddev restart</code>. If you encounter issues with your configuration or the project fails to start, use <code>ddev logs</code> to inspect the logs for possible Apache configuration errors.</li> <li>Use <code>ddev exec apachectl -t</code> to do a general Apache syntax check.</li> <li>The alias <code>Alias \"/phpstatus\" \"/var/www/phpstatus.php\"</code> is required for the health check script to work.</li> <li>Any errors in your configuration may cause the <code>web</code> container to fail. If you see that behavior, use <code>ddev logs</code> to diagnose.</li> </ul> <p>Important!</p> <p>Changes to <code>.ddev/apache/apache-site.conf</code> take place on a <code>ddev restart</code>. You can also <code>ddev exec apachectl -k graceful</code> to reload the Apache configuration.</p>","boost":3},{"location":"users/extend/customization-extendibility/#custom-php-configuration-phpini","title":"Custom PHP Configuration (<code>php.ini</code>)","text":"<p>You can provide additional PHP configuration for a project by creating a directory called <code>.ddev/php/</code> and adding any number of <code>*.ini</code> PHP configuration files.</p> <p>You should generally limit your override to any specific option(s) you need to customize. Every file in <code>.ddev/php/</code> will be copied into <code>/etc/php/[version]/(cli|fpm)/conf.d</code>, so it\u2019s possible to replace files that already exist in the container. Common usage is to put custom overrides in a file called <code>my-php.ini</code>. Make sure you include the section header that goes with each item (like <code>[PHP]</code>).</p> <p>One interesting implication of this behavior is that it\u2019s possible to disable extensions by replacing the configuration file that loads them. For instance, if you were to create an empty file at <code>.ddev/php/20-xdebug.ini</code>, it would replace the configuration that loads Xdebug, which would cause Xdebug to not be loaded!</p> <p>To load the new configuration, run <code>ddev restart</code>.</p> <p>An example file in <code>.ddev/php/my-php.ini</code> might look like this:</p> <pre><code>[PHP]\nmax_execution_time = 240;\n</code></pre>","boost":3},{"location":"users/extend/customization-extendibility/#custom-mysqlmariadb-configuration-mycnf","title":"Custom MySQL/MariaDB configuration (<code>my.cnf</code>)","text":"<p>You can provide additional MySQL/MariaDB configuration for a project by creating a directory called <code>.ddev/mysql/</code> and adding any number of <code>*.cnf</code> MySQL configuration files. These files will be automatically included when MySQL is started. Make sure that the section header is included in the file.</p> <p>An example file in <code>.ddev/mysql/no_utf8mb4.cnf</code> might be:</p> <pre><code>[mysqld]\nserver-id = 2\ncollation-server = utf8_general_ci\ncharacter-set-server = utf8\ninnodb_large_prefix=false\n</code></pre> <p>To load the new configuration, run <code>ddev restart</code>.</p>","boost":3},{"location":"users/extend/customization-extendibility/#custom-postgresql-configuration","title":"Custom PostgreSQL Configuration","text":"<p>If you\u2019re using PostgreSQL, a default <code>posgresql.conf</code> is provided in <code>.ddev/postgres/postgresql.conf</code>. If you need to alter it, remove the <code>#ddev-generated</code> line and <code>ddev restart</code>.</p>","boost":3},{"location":"users/extend/customization-extendibility/#extending-configyaml-with-custom-configyaml-files","title":"Extending <code>config.yaml</code> with Custom <code>config.*.yaml</code> Files","text":"<p>You may add additional <code>config.*.yaml</code> files to organize additional commands as you see fit for your project and team.</p> <p>For example, many teams commit their <code>config.yaml</code> and share it throughout the team, but some team members may require overrides to the checked-in version specifically for their environment and not checked in. For example, a team member may want to use a <code>router_http_port</code> other than the team default due to a conflict in their development environment. In this case they could add <code>.ddev/config.ports.yaml</code>:</p> <pre><code># My machine can\u2019t use port 80 so override with port 8080, but don\u2019t check this in!\nrouter_http_port: 8080\n</code></pre> <p>Extra <code>config.*.yaml</code> files are loaded in lexicographic order, so <code>config.a.yaml</code> will be overridden by <code>config.b.yaml</code>.</p> <p>Team members may choose to use <code>config.local.yaml</code> for local non-committed config changes, for example. <code>config.local.yaml</code> and <code>config.*.local.yaml</code> are gitignored by default.</p> <p><code>config.*.yaml</code> update configuration according to these rules:</p> <ol> <li>Simple fields like <code>router_http_port</code> or <code>webserver_type</code> are overwritten.</li> <li>Lists of strings like <code>additional_hostnames</code> or <code>additional_fqdns</code> are merged.</li> <li>The list of environment variables in <code>web_environment</code> are \u201csmart merged\u201d: if you add the same environment variable with a different value, the value in the override file will replace the value from <code>config.yaml</code>.</li> <li>Hook specifications in the <code>hooks</code> variable are merged.</li> </ol> <p>If you need to override existing values, set <code>override_config: true</code> in the <code>config.*.yaml</code> where the override behavior should take place. Since <code>config.*.yaml</code> files are normally merged into the configuration, some things can\u2019t be overridden normally. For example, if you have <code>use_dns_when_possible: false</code> you can\u2019t override it with a merge and you can\u2019t erase existing hooks or all environment variables. However, with <code>override_config: true</code> in a particular <code>config.*.yaml</code> file,</p> <pre><code>override_config: true\nuse_dns_when_possible: false\n</code></pre> <p>can override the existing values, and</p> <pre><code>override_config: true\nhooks:\n  post-start: []\n</code></pre> <p>or</p> <pre><code>override_config: true\nadditional_hostnames: []\n</code></pre> <p>can have their intended affect.</p> <p><code>override_config</code> affects only behavior of the <code>config.*.yaml</code> file it exists in.</p> <p>To experiment with the behavior of a set of <code>config.*.yaml</code> files, use the <code>ddev utility configyaml</code> file; it\u2019s especially valuable with the <code>yq</code> command, for example <code>ddev utility configyaml | yq</code>.</p>","boost":3},{"location":"users/extend/customization-extendibility/#explicit-supervisord-configuration-for-additional-daemons","title":"Explicit <code>supervisord</code> Configuration for Additional Daemons","text":"<p>Although most extra daemons (like Node.js daemons, etc.) can be configured easily using web_extra_daemons, there may be situations where you want complete control of the <code>supervisord</code> configuration.</p> <p>In these case you can create a <code>.ddev/web-build/&lt;daemonname&gt;.conf</code> with configuration like:</p> <pre><code>[program:daemonname]\ncommand=/var/www/html/path/to/daemon\ndirectory=/var/www/html/\nautorestart=true\nstartretries=3\nstdout_logfile=/var/tmp/logpipe\nstdout_logfile_maxbytes=0\nredirect_stderr=true\n</code></pre> <p>And create a <code>.ddev/web-build/Dockerfile.&lt;daemonname&gt;</code> to install the config file:</p> <pre><code>ADD daemonname.conf /etc/supervisor/conf.d\n</code></pre> <p>Full details for advanced configuration possibilities are in Supervisor docs.</p>","boost":3},{"location":"users/extend/customizing-images/","title":"Customizing Docker Images","text":"<p>It\u2019s common to have a requirement for the <code>web</code> or <code>db</code> images which isn\u2019t bundled with them by default. There are two ways to extend these Docker images:</p> <ol> <li><code>webimage_extra_packages</code> and <code>dbimage_extra_packages</code> in <code>.ddev/config.yaml</code>.</li> <li>An add-on Dockerfile in your project\u2019s <code>.ddev/web-build</code> or <code>.ddev/db-build</code>.</li> </ol>"},{"location":"users/extend/customizing-images/#adding-extra-debian-packages-with-webimage_extra_packages-and-dbimage_extra_packages","title":"Adding Extra Debian Packages with <code>webimage_extra_packages</code> and <code>dbimage_extra_packages</code>","text":"<p>You can add extra Debian packages with lines like this in <code>.ddev/config.yaml</code>:</p> <pre><code>webimage_extra_packages: [\"php${DDEV_PHP_VERSION}-tidy\", \"php${DDEV_PHP_VERSION}-yac\"]\ndbimage_extra_packages: [telnet, netcat, sudo]\n</code></pre> <p>Then the additional packages will be built into the containers during <code>ddev start</code>.</p>"},{"location":"users/extend/customizing-images/#adding-php-extensions","title":"Adding PHP Extensions","text":""},{"location":"users/extend/customizing-images/#php-extensions-supported-by-debsuryorg","title":"PHP Extensions supported by <code>deb.sury.org</code>","text":"<p>If a PHP extension is supported by the upstream package management from <code>deb.sury.org</code>, you\u2019ll be able to add it with minimal effort. Test to see if it\u2019s available using <code>ddev exec '(sudo apt-get update || true) &amp;&amp; sudo apt-get install php${DDEV_PHP_VERSION}-&lt;extension&gt;'</code>, for example, <code>ddev exec '(sudo apt-get update || true) &amp;&amp; sudo apt-get install php${DDEV_PHP_VERSION}-imap'</code>. If that works, then the extension is supported, and you can add <code>webimage_extra_packages: [\"php${DDEV_PHP_VERSION}-&lt;extension&gt;\"]</code> to your <code>.ddev/config.yaml</code> file.</p>"},{"location":"users/extend/customizing-images/#pecl-php-extensions-not-supported-by-debsuryorg","title":"PECL PHP Extensions not supported by <code>deb.sury.org</code>","text":"<p>Few people need pecl extensions</p> <p>Most people don\u2019t need to install PHP extensions that aren\u2019t supported by <code>deb.sury.org</code>, so you only need to go down this path if you have very particular needs.</p> <p>If a PHP extension is not supported by the upstream package management from <code>deb.sury.org</code>, you\u2019ll install it via pecl using a <code>.ddev/web-build/Dockerfile</code>. You can search for the extension on pecl.php.net to find the package name. (This technique can also be used to get newer versions of PHP extensions than are available in the <code>deb.sury.org</code> distribution.)</p> <p>For example, a <code>.ddev/web-build/Dockerfile.mcrypt</code> might look like this:</p> <pre><code>ENV extension=mcrypt\nSHELL [\"/bin/bash\", \"-c\"]\n# Install the needed development packages\nRUN (apt-get update || true) &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# mcrypt happens to require libmcrypt-dev\nRUN apt-get install -y libmcrypt-dev\nRUN pecl install ${extension}\nRUN echo \"extension=${extension}.so\" &gt; /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini &amp;&amp; chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\nRUN phpenmod ${extension}\n</code></pre> <p>A <code>.ddev/web-build/Dockerfile.xlswriter</code> to add <code>xlswriter</code> might be:</p> <pre><code>ENV extension=xlswriter\nSHELL [\"/bin/bash\", \"-c\"]\n# Install the needed development packages\nRUN (apt-get update || true) &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# xlswriter requires libz-dev\nRUN sudo apt-get install -y libz-dev\nRUN echo | pecl install ${extension}\nRUN echo \"extension=${extension}.so\" &gt; /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini &amp;&amp; chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\nRUN phpenmod ${extension}\n</code></pre> <p>A <code>.ddev/web-build/Dockerfile.xdebug</code> (overriding the <code>deb.sury.org</code> version) might look like this:</p> <pre><code># This example installs xdebug from pecl instead of the standard deb.sury.org package\nENV extension=xdebug\nSHELL [\"/bin/bash\", \"-c\"]\nRUN phpdismod xdebug\n# Install the needed development packages\nRUN (apt-get update || true) &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# Remove the standard Xdebug provided by deb.sury.org\nRUN apt-get remove php${DDEV_PHP_VERSION}-xdebug || true\nRUN pecl install ${extension}\n# Use the standard xdebug.ini from source\nADD https://raw.githubusercontent.com/ddev/ddev/main/containers/ddev-php-base/ddev-php-files/etc/php/8.2/mods-available/xdebug.ini /etc/php/${DDEV_PHP_VERSION}/mods-available\nRUN chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/xdebug.ini\n# ddev xdebug handles enabling module so we don't enable here\n#RUN phpenmod ${extension}\n</code></pre>"},{"location":"users/extend/customizing-images/#adding-locales","title":"Adding Locales","text":"<p>The web image ships by default with a small number of locales, which work for most usages, including <code>en_CA</code>, <code>en_US</code>, <code>en_GB</code>, <code>es_ES</code>, <code>es_MX</code>, <code>pt_BR</code>, <code>pt_PT</code>, <code>de_DE</code>, <code>de_AT</code>, <code>fr_CA</code>, <code>fr_FR</code>, <code>ja_JP</code>, and <code>ru_RU</code>.</p> <p>If you need other locales, you can install all of them by adding <code>locales-all</code> to your <code>webimage_extra_packages</code>. For example, in <code>.ddev/config.yaml</code>:</p> <pre><code>webimage_extra_packages: [locales-all]\n</code></pre>"},{"location":"users/extend/customizing-images/#adding-extra-dockerfiles-for-webimage-and-dbimage","title":"Adding Extra Dockerfiles for <code>webimage</code> and <code>dbimage</code>","text":"<p>For more complex requirements, you can add:</p> <ul> <li><code>.ddev/web-build/Dockerfile</code></li> <li><code>.ddev/web-build/Dockerfile.*</code></li> <li><code>.ddev/db-build/Dockerfile</code></li> <li><code>.ddev/db-build/Dockerfile.*</code></li> </ul> <p>These files\u2019 content will be inserted into the constructed Dockerfile for each image. They are inserted after most of the rest of the things that are done to build the image, and are done in alphabetical order, so <code>Dockerfile</code> is inserted first, followed by <code>Dockerfile.*</code> in alphabetical order.</p> <p>For certain use cases, you might need to add directives very early on the Dockerfile like proxy settings or SSL termination. You can use <code>pre.</code> variants for this that are inserted before what DDEV adds to build the image:</p> <ul> <li><code>.ddev/web-build/pre.Dockerfile.*</code></li> <li><code>.ddev/web-build/pre.Dockerfile</code></li> <li><code>.ddev/db-build/pre.Dockerfile.*</code></li> <li><code>.ddev/db-build/pre.Dockerfile</code></li> </ul> <p>Finally, to support Multi-stage builds and other more complex use cases, you can use <code>prepend.</code> variants that are inserted before everything else, on top of the generated Dockerfile.</p> <ul> <li><code>.ddev/web-build/prepend.Dockerfile.*</code></li> <li><code>.ddev/web-build/prepend.Dockerfile</code></li> <li><code>.ddev/db-build/prepend.Dockerfile.*</code></li> <li><code>.ddev/db-build/prepend.Dockerfile</code></li> </ul> <p>Multi-stage builds are useful to anyone who has struggled to optimize Dockerfiles while keeping them easy to read and maintain.</p> <p>Examine the resultant generated Dockerfile (which you will never edit directly), at <code>.ddev/.webimageBuild/Dockerfile</code>. You can force a rebuild with <code>ddev utility rebuild</code>. <code>ddev utility rebuild</code> is also great because it shows you the entire process of the build for debugging.</p> <p>Examples of possible Dockerfiles are <code>.ddev/web-build/Dockerfile.example</code> and <code>.ddev/db-build/Dockerfile.example</code>, created in your project when you run <code>ddev config</code>.</p> <p>You can use the <code>.ddev/*-build</code> directory as the Docker \u201ccontext\u201d directory as well. So for example, if a file named <code>file.txt</code> exists in <code>.ddev/web-build</code>, you can use <code>ADD file.txt /</code> in the Dockerfile.</p> <p>An example web image <code>.ddev/web-build/Dockerfile</code> might be:</p> <pre><code>RUN npm install -g gatsby-cli\n</code></pre> <p>Another example would be installing <code>phpcs</code> globally (see Stack Overflow answer):</p> <pre><code>ENV COMPOSER_HOME=/usr/local/composer\n\n# We try to avoid relying on Composer to download global, so in `phpcs` case we can use the PHAR.\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs &amp;&amp; chmod +x /usr/local/bin/phpcs\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf &amp;&amp; chmod +x /usr/local/bin/phpcbf\n\n# If however we need to download a package, we use `cgr` for that.\nRUN composer global require consolidation/cgr\nRUN $COMPOSER_HOME/vendor/bin/cgr drupal/coder:^8.3.1\nRUN $COMPOSER_HOME/vendor/bin/cgr dealerdirect/phpcodesniffer-composer-installer\n\n# Register Drupal\u2019s code sniffer rules.\nRUN phpcs --config-set installed_paths $COMPOSER_HOME/global/drupal/coder/vendor/drupal/coder/coder_sniffer --verbose\n# Make Codesniffer config file writable for ordinary users in container.\nRUN chmod 666 /usr/local/bin/CodeSniffer.conf\n# Make `COMPOSER_HOME` writable if regular users need to use it.\nRUN chmod -R ugo+rw $COMPOSER_HOME\n# Now turn it off, because ordinary users will want to be using the default.\nENV COMPOSER_HOME=\"\"\n</code></pre> <p>An example Multi-stage web image could have a  <code>.ddev/web-build/prepend.Dockerfile</code>:</p> <pre><code># If we want to use any of the build time environment variables injected by ddev\n# on the prepend.Dockerfile* variants we need to manually declare them to make\n# them available using the ARG instruction.\n# Only $BASE_IMAGE is already added as it must be global to be used on FROM \n# statements. \nFROM $BASE_IMAGE AS build-stage-go\n\n# While we are not using $uid and $gid in the code below, this serves as an example\n# of how any of the other DDEV's build variables must be defined. \nARG uid\nARG gid\n\n# install go\nRUN set -eux; \\\n    GO_VERSION=$(curl -fsSL \"https://go.dev/dl/?mode=json\" | jq -r \".[0].version\"); \\\n    AARCH=$(dpkg --print-architecture); \\\n    wget -q https://go.dev/dl/${GO_VERSION}.linux-${AARCH}.tar.gz -O go.tar.gz; \\\n    tar -C /usr/local -xzf go.tar.gz; \\\n    rm go.tar.gz;\n</code></pre> <p>And then a <code>Dockerfile</code>:</p> <pre><code># Copy entire go directory from the build stage defined above.\nCOPY --from=build-stage-go /usr/local/go /usr/local\n</code></pre> <p>Remember that the Dockerfile is building a Docker image that will be used later with DDEV. At the time the Dockerfile is executing, your code is not mounted and the container is not running, the image is being built. So for example, an <code>npm install</code> in <code>/var/www/html</code> will not do anything to your project because the code is not there at image building time.</p>"},{"location":"users/extend/customizing-images/#build-time-environment-variables","title":"Build Time Environment Variables","text":"<p>The following environment variables are available for the web Dockerfile to use at build time:</p> <ul> <li><code>$BASE_IMAGE</code>: the base image, like <code>ddev/ddev-webserver:v1.24.0</code> (global scope)</li> <li><code>$username</code>: the username inferred from your host-side username</li> <li><code>$uid</code>: the user ID inferred from your host-side user ID</li> <li><code>$gid</code>: the group ID inferred from your host-side group ID</li> <li><code>$DDEV_PHP_VERSION</code>: the PHP version declared in your project configuration</li> <li><code>$TARGETARCH</code>: The build target architecture, like <code>arm64</code> or <code>amd64</code></li> <li><code>$TARGETOS</code>: The build target operating system (always <code>linux</code>)</li> <li><code>$TARGETPLATFORM</code>: <code>linux/amd64</code> or <code>linux/arm64</code> depending on the machine it\u2019s been executed on</li> </ul> <p>Only <code>$BASE_IMAGE</code> is automatically available in <code>prepend.Dockerfile*</code> variants</p> <p>If you need to use any of the other variables you will need to manually add them to your <code>prepend.Dockerfile*</code> files using ARG instructions.</p> <p>For example, a Dockerfile might want to build an extension for the configured PHP version like this using <code>$DDEV_PHP_VERSION</code> to specify the proper version:</p> <pre><code>ENV extension=xhprof\nENV extension_repo=https://github.com/longxinH/xhprof\nENV extension_version=v2.3.8\n\nRUN (apt-get update || true) &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests autoconf build-essential libc-dev php-pear php${DDEV_PHP_VERSION}-dev pkg-config zlib1g-dev\nRUN mkdir -p /tmp/php-${extension} &amp;&amp; cd /tmp/php-${extension} &amp;&amp; git clone ${extension_repo} .\nWORKDIR /tmp/php-${extension}/extension\nRUN git checkout ${extension_version}\nRUN phpize\nRUN ./configure\nRUN make install\nRUN echo \"extension=${extension}.so\" &gt; /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\n</code></pre> <p>An example of using <code>$TARGETARCH</code> would be:</p> <pre><code>RUN curl --fail -JL -s -o /usr/local/bin/mkcert \"https://dl.filippo.io/mkcert/latest?for=linux/${TARGETARCH}\"\n</code></pre>"},{"location":"users/extend/customizing-images/#adding-eol-versions-of-php","title":"Adding EOL Versions of PHP","text":"<p>If your project requires multiple versions of PHP\u2014such as using PHP 8.3 but also needing an older, unsupported, unmaintained version like PHP 7.4 for specific scripts\u2014and you don\u2019t want to fully switch to PHP 7.4 with <code>ddev config --php-version=7.4</code>, you can install it using the <code>pre.Dockerfile.*</code> technique from the previous section.</p> <p>Create a <code>.ddev/web-build/pre.Dockerfile.php7.4</code> file with the following content:</p> <pre><code>RUN /usr/local/bin/install_php_extensions.sh \"php7.4\" \"${TARGETARCH}\"\n</code></pre> <p>After restarting the project, you can use PHP 7.4 with the command <code>ddev exec php7.4 -v</code>.</p>"},{"location":"users/extend/customizing-images/#installing-into-the-home-directory","title":"Installing into the home directory","text":"<p>The in-container home directory is rebuilt when you run <code>ddev restart</code>, so if you have something that installs into the home directory (like <code>~/.cache</code>) you\u2019ll want to switch users in the Dockerfile. In this example, <code>npx playwright install</code> installs a number of things into <code>~/.cache</code>, so we\u2019ll switch to the proper user before executing it, and switch back to the <code>root</code> user after installation to avoid surprises with any other Dockerfile that may follow.</p> <pre><code>USER $username\n# This is an example of creating a file in the home directory\nRUN touch ~/${username}-was-here\n# `npx playwright` installs lots of things in ~/.cache\nRUN npx playwright install\nRUN npx playwright install-deps\nUSER root\n</code></pre>"},{"location":"users/extend/customizing-images/#debugging-the-dockerfile-build","title":"Debugging the Dockerfile Build","text":"<p>It can be complicated to figure out what\u2019s going on when building a Dockerfile, and even more complicated when you\u2019re seeing it go by as part of <code>ddev start</code>.</p> <ol> <li>Use <code>ddev ssh</code> first of all to pioneer the steps you want to take. You can do all the things you need to do there and see if it works. If you\u2019re doing something that affects PHP, you may need to <code>sudo killall -USR2 php-fpm</code> for it to take effect.</li> <li>Put the steps you pioneered into <code>.ddev/web-build/Dockerfile</code> as above.</li> <li>If you can\u2019t figure out what\u2019s failing or why, running <code>ddev utility rebuild</code> will show the full output of the build process. You can also run <code>export DDEV_VERBOSE=true &amp;&amp; ddev start</code> to see what\u2019s happening during the <code>ddev start</code> Dockerfile build.</li> </ol>"},{"location":"users/extend/database-types/","title":"Database Server Types","text":"<p>DDEV supports many versions of the MariaDB, MySQL, and PostgreSQL database servers.</p> <p>The following database types are currently supported:</p> <ul> <li>MariaDB 5.5-10.8, 10.11, 11.4, 11.8</li> <li>MySQL 5.5-8.0, 8.4</li> <li>Postgres 9-17</li> </ul> <p>The default database type is MariaDB, and the default version is currently 10.11.</p> <p>For very old database types and situations see Using DDEV to spin up a legacy PHP application. New LTS versions of each of these are typically added soon after they are released. The very old versions are kept for compatibility with older projects.</p> <p>You could set these using the <code>ddev config</code> command like this:</p> <ul> <li><code>ddev config --database=mysql:5.7</code></li> <li><code>ddev config --database=mariadb:10.11</code></li> <li><code>ddev config --database=postgres:14</code></li> </ul> <p>Or by editing the <code>database</code> setting in <code>.ddev/config.yaml</code>:</p> <pre><code>database:\n  type: mysql\n  version: 5.7\n</code></pre> <pre><code>database:\n  type: mariadb\n  version: 10.11\n</code></pre> <pre><code>database:\n  type: postgres\n  version: 14\n</code></pre>"},{"location":"users/extend/database-types/#checking-the-existing-database-andor-migrating","title":"Checking the Existing Database and/or Migrating","text":"<p>Since the existing binary database may not be compatible with changes to your configuration, you need to check and/or migrate your database.</p> <ul> <li><code>ddev utility get-volume-db-version</code> will show the current binary database type.</li> <li><code>ddev utility check-db-match</code> will show if your configured project matches the binary database type.</li> <li><code>ddev utility migrate-database</code> allows an automated attempt at migrating your database to a different type/version.<ul> <li>This only works with databases of type <code>mysql</code> or <code>mariadb</code>.</li> <li>MySQL 8.0 has diverged in syntax from most of its predecessors, including earlier MySQL and all MariaDB versions. As a result, you may not be able to migrate from databases of type <code>mysql:8.0</code> because dumps from MySQL 8.0 often have keywords or other features not supported elsewhere.</li> <li>Examples: <code>ddev utility migrate-database mariadb:10.7</code>, <code>ddev utility migrate-database mysql:8.0</code>.</li> </ul> </li> </ul>"},{"location":"users/extend/database-types/#caveats","title":"Caveats","text":"<ul> <li>If you change the database type or version in an existing project, the existing database will not be compatible with your change, so you\u2019ll want to use <code>ddev export-db</code> to save a dump first.</li> <li>When you change database type, destroy the existing database using <code>ddev delete --omit-snapshot</code> before changing, then after <code>ddev start</code> use <code>ddev import-db</code> to import the dump you saved.</li> <li>Snapshots are always per database type and database version. So if you have snapshots from MariaDB 10.2 and you switch to MariaDB 10.5, don\u2019t expect to be able to restore the old snapshot.</li> </ul>"},{"location":"users/extend/database-types/#other-databases-types","title":"Other databases types","text":"<p>Through add-ons, additional database types are also supported. The following official add-ons are available:</p> <ul> <li><code>ddev/ddev-mongo</code></li> <li><code>ddev/ddev-sqlsrv</code></li> </ul> <p>Use <code>ddev add-on list --all</code> to see a list of all add-ons, including additional community-supported database types.</p>"},{"location":"users/extend/in-container-configuration/","title":"In-Container Home Directory and Shell Configuration","text":"<p>Custom shell configuration (Bash or your preferred shell), your usual Git configuration, a Composer <code>auth.json</code> and more can be achieved within your containers.</p> <p>Place all your dotfiles in your global<code>~/.ddev/homeadditions</code> or your project\u2019s <code>.ddev/homeadditions</code> directory and DDEV will use these in your project\u2019s <code>web</code> containers.</p> <p>Ignore <code>.ddev/.homeadditions</code>!</p> <p>A hidden/transient <code>.ddev/.homeadditions</code>\u2014emphasis on the leading <code>.</code>\u2014is used for processing global <code>homeadditions</code> and should be ignored.</p> <p>On <code>ddev start</code>, DDEV attempts to create a user inside the <code>web</code> and <code>db</code> containers with the same name and user ID as the one you have on the host machine.</p> <p>DDEV looks for the <code>homeadditions</code> directory both in the global <code>~/.ddev/homeadditions</code> directory and the project-level <code>.ddev/homeadditions</code> directory, and will copy their contents recursively into the in-container home directory during <code>ddev start</code>. Project <code>homeadditions</code> contents override the global <code>homeadditions</code>.</p> <p>Usage examples:</p> <ul> <li>If you use Git inside the container, you may want to symlink your <code>~/.gitconfig</code> into <code>~/.ddev/homeadditions</code> or the project\u2019s <code>.ddev/homeadditions</code> so that in-container <code>git</code> commands use whatever username and email you\u2019ve configured on your host machine. For example, <code>ln -s ~/.gitconfig ~/.ddev/homeadditions/.gitconfig</code>.</li> <li> <p>If you use SSH inside the container and want to use your <code>.ssh/config</code>, consider <code>mkdir -p ~/.ddev/homeadditions/.ssh &amp;&amp; ln -s ~/.ssh/config ~/.ddev/homeadditions/.ssh/config</code>. Some people will be able to symlink their entire <code>.ssh</code> directory, <code>ln -s ~/.ssh ~/.ddev/homeadditions/.ssh</code>. If you provide your own <code>.ssh/config</code> though, please make sure it includes these lines:</p> <pre><code>UserKnownHostsFile=/home/.ssh-agent/known_hosts\nStrictHostKeyChecking=accept-new\n</code></pre> </li> <li> <p>If you need to add a script or other executable component into the project (or global configuration), you can put it in the project or global <code>.ddev/homeadditions/bin</code> directory and <code>~/bin/&lt;script</code> will be created inside the container. This is useful for adding a script to one project or every project, or for overriding standard scripts, as <code>~/bin</code> is first in the <code>$PATH</code> in the <code>web</code> container.</p> </li> <li>If you use private, password-protected Composer repositories with Satis, for example, and use a global <code>auth.json</code>, you might want to <code>mkdir -p ~/.ddev/homeadditions/.composer &amp;&amp; ln -s ~/.composer/auth.json ~/.ddev/homeadditions/.composer/auth.json</code>, but be careful that you exclude it from getting checked in by using a <code>.gitignore</code> or equivalent.</li> <li>You can add small scripts to the <code>.bashrc.d</code> directory and they will be executed on <code>ddev ssh</code>. For example, add a <code>~/.ddev/homeadditions/.bashrc.d/whereami</code> containing <code>echo \"I am in the $(hostname) container\"</code> and (after <code>ddev restart</code>) when you <code>ddev ssh</code> that will be executed.</li> <li>If you have a favorite <code>.bashrc</code>, copy it into either the global or project <code>homeadditions</code>.</li> <li> <p>If you like the traditional <code>ll</code> Bash alias for <code>ls -l</code>, add a <code>.ddev/homeadditions/.bash_aliases</code> with these contents:</p> <pre><code>alias ll=\"ls -lhA\"\n</code></pre> </li> </ul>"},{"location":"users/extend/in-container-configuration/#using-no_color-inside-containers","title":"Using <code>NO_COLOR</code> Inside Containers","text":"<p>To set the <code>NO_COLOR</code> variable in all containers across all projects, define the <code>NO_COLOR</code> environment variable in your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>), outside of DDEV, for example:</p> <pre><code>export NO_COLOR=1\n</code></pre> <p><code>NO_COLOR=1</code> can also be implicitly set using <code>simple_formatting</code> option.</p>"},{"location":"users/extend/in-container-configuration/#using-pager-inside-containers","title":"Using <code>PAGER</code> Inside Containers","text":"<p>To set the <code>PAGER</code> variable in the <code>web</code> and <code>db</code> containers across all projects, define the <code>DDEV_PAGER</code> environment variable in your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>), outside of DDEV, for example:</p> <pre><code>export DDEV_PAGER=\"less -SFXR\"\n</code></pre>"},{"location":"users/extend/traefik-router/","title":"Router Customization and Debugging (Traefik)","text":"<p>DDEV uses the well-known open-source Traefik for its router container.</p> <p>DDEV\u2019s router plays an important role in its container architecture, receiving HTTP and HTTPS traffic for requests like <code>*.ddev.site</code> and delivering them to the appropriate project\u2019s web container.</p>"},{"location":"users/extend/traefik-router/#traefik-configuration","title":"Traefik Configuration","text":"<p>Before continuing, it\u2019s important to note that very few users ever experiment with custom Traefik configuration. This is an advanced topic, and the vast majority of users never need to know anything about it, as DDEV generates all the necessary configuration. In general you don\u2019t need to understand Traefik configuration.</p> <p>However, you can fully customize the router\u2019s Traefik configuration. (DDEV uses the Traefik <code>v3</code> rule syntax.)</p> <p>All Traefik configuration uses the file provider, not the Docker provider. Even though the Traefik daemon itself is running inside the <code>ddev-router</code> container, it uses mounted files for configuration, rather than listening to the Docker socket.</p> <p>Tip</p> <p>Like other DDEV configuration, any file with <code>#ddev-generated</code> will be overwritten unless you choose to \u201ctake over\u201d it yourself. You can do this by removing the <code>#ddev-generated</code> line. DDEV will stop making changes to that file, and you\u2019ll be responsible for updating it.</p>"},{"location":"users/extend/traefik-router/#traefik-static-configuration","title":"Traefik Static Configuration","text":"<p>Static configuration is automatically generated in the <code>~/.ddev/traefik</code> directory. \u201cStatic\u201d configuration means Traefik configuration which is only read when the router is started.</p> <ul> <li><code>.static_config.yaml</code> (a hidden file) is the configuration that gets used. It is not to be edited; it is generated from DDEV\u2019s base configuration while merging any files named <code>static_config.*.yaml</code>. It is read on router startup, and does not change until the router starts again (normally after <code>ddev poweroff</code>).</li> <li> <p>Additional static configuration may be added by adding <code>static_config.*.yaml</code> files, which will be merged into the generated <code>.static_config.yaml</code>. For example, a <code>static_config.loglevel.yaml</code> might override logging configuration, a <code>static_config.plugin.yaml</code> might contain external Traefik plugins, or a <code>static_config.dnschallenge.yaml</code> might provide configuration for additional <code>certificatesResolvers</code>. Merging is done with an override strategy, meaning that the final file in alphanumeric sort to touch a particular element of the YAML structure wins.     Some examples of <code>static_config.*.yaml</code> files are:</p> <ul> <li> <p><code>static_config.loglevel.yaml</code>:</p> <pre><code># Enable extensive error and access logging\nlog:\n  level: DEBUG\naccessLog:\n  filters:\n    statusCodes: {}\n</code></pre> </li> <li> <p><code>static_config.cloudflare.yaml</code>:</p> <pre><code>certificatesResolvers:\n  acme-dnsChallenge:\n    acme:\n      email: admin@example.com\n      dnsChallenge:\n        provider: cloudflare\n</code></pre> </li> <li> <p><code>static_config.fail2ban.yaml</code></p> <pre><code>experimental:\n  plugins:\n    fail2ban:\n      moduleName: \"github.com/tomMoulard/fail2ban\"\n      version: \"v0.8.1\"\n</code></pre> </li> </ul> </li> <li> <p><code>certs/default_cert.*</code> files are the default DDEV-generated certificates, normally created by <code>mkcert</code>.</p> </li> <li><code>config/default_config.yaml</code> contains global dynamic configuration, including pointers to the default certificates. It is possible to add other Traefik configuration in the <code>config</code> directory, which will apply to all projects. For example, a <code>config/router_middlewares.yaml</code> file might provide middleware implementations that would apply to all projects.</li> </ul>"},{"location":"users/extend/traefik-router/#project-traefik-configuration","title":"Project Traefik Configuration","text":"<p>Project-specific configuration is automatically generated in the project\u2019s <code>.ddev/traefik/config</code> directory. For example, a project named <code>example</code> will have a <code>.ddev/traefik/config/example.yaml</code> which describes the routers, middlewares, and services generated by default for that project. These are based on the base hostname, <code>additional_hostnames</code>, and <code>additional_fqdns</code> defined for the project. They also include support for add-ons and services that use <code>HTTP_EXPOSE</code>, <code>HTTPS_EXPOSE</code>, and <code>VIRTUAL_HOST</code> configurations (see Conventions for Defining Additional Services for more details).</p> <ul> <li>The <code>certs</code> directory contains the <code>&lt;projectname&gt;.crt</code> and <code>&lt;projectname&gt;.key</code> certificate generated for the project.</li> <li> <p>The <code>config/&lt;projectname&gt;.yaml</code> file contains the configuration for the project, including information about routers, services, and certificates.</p> <ul> <li>If you alter a <code>config/&lt;projectname&gt;.yaml</code> file, you need to remove the <code>#ddev-generated</code> from the top of the file, so it won\u2019t be overwritten on the next <code>ddev start</code>.</li> <li>It is possible to add additional files in <code>config</code> that you own and manage that add additional facilities. For example, a <code>config/example_middlewares.yaml</code> would be read by the router and used. It\u2019s important that the filename be keyed by the project name, and usually its contents need to be unique to the project. For example, if it defines middleware implementations, they should usually be limited to the project. For example, an extra file might be:</li> </ul> <pre><code>http:\n  middlewares:\n    example-redirectHttps:\n      redirectScheme:\n        scheme: https\n        permanent: true\n</code></pre> </li> </ul>"},{"location":"users/extend/traefik-router/#router-docker-compose-customization","title":"Router <code>docker-compose</code> Customization","text":"<p>The default Docker Compose configuration for the router container is found in <code>~/.ddev/.router-compose.yaml</code>. It is quite unusual to override this configuration, but it can be overridden in the same way project configuration can be overridden (project <code>.ddev/docker-compose.*.yaml</code>). These ultimately get merged into <code>~/.ddev/.router-compose-full.yaml</code></p> <p>You can create a <code>~/.ddev/router-compose.*.yaml</code>. For example, as <code>~/.ddev/router-compose.cloudflare.yaml</code> might contain environment variables like this:</p> <pre><code>services:\n  ddev-router:\n    environment:\n      - CLOUDFLARE_EMAIL=you@example.com\n      - CLOUDFLARE_API_KEY=some-key\n</code></pre>"},{"location":"users/extend/traefik-router/#troubleshooting-traefik-routing","title":"Troubleshooting Traefik Routing","text":"<p>Traefik provides a dynamic description of its configuration you can visit at <code>http://localhost:10999</code>. When things seem to be going wrong, run <code>ddev poweroff</code> and then start your project again by running <code>ddev start</code>. Examine the router\u2019s logs to see what the Traefik daemon is doing (or failing at) by running <code>docker logs ddev-router</code> or <code>docker logs -f ddev-router</code>. The Traefik logs are set to a minimal set by default, but you can enable much more extensive logging and access logs with a <code>static_config.loglevel.yaml</code> as described above.</p> <p>If you encounter Traefik file watcher errors on Linux systems, these are common solutions:</p>"},{"location":"users/extend/traefik-router/#error-adding-file-watcher-no-space-left-on-device","title":"Error adding file watcher: no space left on device","text":"<p>This error appears in the router logs, <code>docker logs ddev-router</code>, as:</p> <p>ERR Cannot start the provider *file.Provider error=\u201derror adding file watcher: no space left on device\u201d</p> <p>This indicates that the system has reached the limit for inotify watches. First, check the current value:</p> <pre><code>sysctl fs.inotify.max_user_watches\n</code></pre> <p>Then create a configuration file to increase the limit (for example, if the current value is <code>65536</code>, you can increase it to <code>524288</code>):</p> <pre><code>echo 'fs.inotify.max_user_watches=524288' | sudo tee -a /etc/sysctl.d/60-inotify.conf\n</code></pre> <p>Apply the changes without restarting the system:</p> <pre><code>sudo sysctl -p /etc/sysctl.d/60-inotify.conf\n</code></pre>"},{"location":"users/extend/traefik-router/#error-creating-file-watcher-too-many-open-files","title":"Error creating file watcher: too many open files","text":"<p>This error appears in the router logs, <code>docker logs ddev-router</code>, as:</p> <p>ERR Cannot start the provider *file.Provider error=\u201derror creating file watcher: too many open files\u201d</p> <p>This indicates that too many inotify instances are open. First, check the current value:</p> <pre><code>sysctl fs.inotify.max_user_instances\n</code></pre> <p>Then create a configuration file to increase the limit (for example, if the current value is <code>128</code>, you can increase it to <code>8192</code>):</p> <pre><code>echo 'fs.inotify.max_user_instances=8192' | sudo tee -a /etc/sysctl.d/60-inotify.conf\n</code></pre> <p>Apply the changes without restarting the system:</p> <pre><code>sudo sysctl -p /etc/sysctl.d/60-inotify.conf\n</code></pre>"},{"location":"users/extend/using-add-ons/","title":"Using DDEV Add-ons","text":"<p>DDEV add-ons are pre-packaged extensions that add functionality to your development environment with a single command. They handle installation, configuration, and integration automatically.</p>","boost":3},{"location":"users/extend/using-add-ons/#add-ons-vs-custom-docker-compose-services","title":"Add-ons vs. Custom Docker Compose Services","text":"<p>Use add-ons when:</p> <ul> <li>A standard, tested service is available as an add-on (Redis, Elasticsearch, Solr)</li> <li>You want automatic configuration and setup</li> </ul> <p>Use custom Docker Compose services when:</p> <ul> <li>You need a custom or highly specialized service</li> <li>You require deep customization of the service configuration</li> <li>You\u2019re prototyping or experimenting with service configurations</li> </ul> <p>See Defining Additional Services with Docker Compose for custom Docker Compose service setup.</p>","boost":3},{"location":"users/extend/using-add-ons/#discovering-add-ons","title":"Discovering Add-ons","text":"","boost":3},{"location":"users/extend/using-add-ons/#web-based-add-on-registry","title":"Web-based Add-on Registry","text":"<p>Use DDEV Add-on Registry to discover, explore, and leave comments on available add-ons.</p>","boost":3},{"location":"users/extend/using-add-ons/#command-line-discovery","title":"Command Line Discovery","text":"<p>List all available add-ons:</p> <pre><code>ddev add-on list\n</code></pre> <p>Search for specific add-ons by name or description:</p> <pre><code># Search for Redis-related add-ons\nddev add-on search redis\n\n# Search with multiple terms (all must be present)\nddev add-on search redis web\n\n# Search with multiple terms using quotes (currently same behavior)\nddev add-on search \"redis commander\"\n</code></pre>","boost":3},{"location":"users/extend/using-add-ons/#installing-add-ons","title":"Installing Add-ons","text":"","boost":3},{"location":"users/extend/using-add-ons/#public-add-ons","title":"Public Add-ons","text":"<p>Install any public add-on using the repository format:</p> <pre><code>ddev add-on get &lt;owner&gt;/&lt;repo&gt;\n</code></pre> <p>Examples:</p> <pre><code># Download the official Redis add-on\nddev add-on get ddev/ddev-redis\n\n# Get debug info about `ddev add-on get` failure\nddev add-on get ddev/ddev-redis --verbose\n\n# Download the official Redis add-on, version v1.0.4\nddev add-on get ddev/ddev-redis --version v1.0.4\n\n# Download the Drupal Solr add-on from its v1.2.3 release tarball\nddev add-on get https://github.com/ddev/ddev-drupal-solr/archive/refs/tags/v1.2.3.tar.gz\n\n# Download the Drupal Contrib add-on from its main branch tarball\nddev add-on get https://github.com/ddev/ddev-drupal-contrib/tarball/main\n\n# Download the OpenSearch add-on from a pull request #15 tarball\nddev add-on get https://github.com/ddev/ddev-opensearch/tarball/refs/pull/15/head\n\n# Copy an add-on available in another directory\nddev add-on get /path/to/package\n\n# Copy an add-on from a tarball in another directory\nddev add-on get /path/to/tarball.tar.gz\n\n# Download the official Redis add-on and install it into a project named \"my-project\"\nddev add-on get ddev/ddev-redis --project my-project\n</code></pre> <p>Add-ons are installed into your project\u2019s <code>.ddev</code> directory and automatically integrated with your project configuration.</p>","boost":3},{"location":"users/extend/using-add-ons/#private-add-ons","title":"Private Add-ons","text":"<p>Add-ons from private GitHub repositories are supported, but you have to provide a GitHub token with the correct privileges to allow access to them:</p> <ul> <li>Fine-grained personal access tokens with the <code>contents:read</code> scope are recommended for better security.</li> <li>Classic tokens with the <code>repo</code> scope also work.</li> </ul> <p>Can I reuse my token from a different environment variable?</p> <p>Yes, supported environment variables include:</p> <ul> <li><code>DDEV_GITHUB_TOKEN</code> (highest priority)</li> <li><code>GH_TOKEN</code> (lower priority than <code>DDEV_GITHUB_TOKEN</code>)</li> <li><code>GITHUB_TOKEN</code> (lowest priority)</li> </ul> <pre><code>export DDEV_GITHUB_TOKEN=&lt;your-github-token&gt;\n\n# Get the private add-on from the latest stable release\nddev add-on get &lt;owner&gt;/&lt;repo&gt;\n\n# Or get a tarball for a specific branch, tag, or commit SHA\nddev add-on get https://api.github.com/repos/&lt;owner&gt;/&lt;repo&gt;/tarball/&lt;ref&gt;\n\n# Note: the format below may not work with fine-grained tokens\nddev add-on get https://github.com/&lt;owner&gt;/&lt;repo&gt;/tarball/&lt;ref&gt;\n</code></pre> <p>Private repositories on other platforms:</p> <pre><code>git clone &lt;private-repo-url&gt; /tmp/private-addon\nddev add-on get /tmp/private-addon\n</code></pre>","boost":3},{"location":"users/extend/using-add-ons/#managing-add-ons","title":"Managing Add-ons","text":"","boost":3},{"location":"users/extend/using-add-ons/#view-installed-add-ons","title":"View Installed Add-ons","text":"<pre><code>ddev add-on list --installed\n</code></pre>","boost":3},{"location":"users/extend/using-add-ons/#update-an-add-on","title":"Update an Add-on","text":"<pre><code>ddev add-on get &lt;owner&gt;/&lt;repo&gt;\n</code></pre> <p>This updates to the latest version while preserving your customizations.</p>","boost":3},{"location":"users/extend/using-add-ons/#remove-an-add-on","title":"Remove an Add-on","text":"<pre><code>ddev add-on remove &lt;addon-name&gt;\n</code></pre> <p>This cleanly removes all add-on files and configurations.</p>","boost":3},{"location":"users/extend/using-add-ons/#customizing-add-on-configuration","title":"Customizing Add-on Configuration","text":"<p>Sometimes you need to customize an add-on\u2019s default configuration.</p>","boost":3},{"location":"users/extend/using-add-ons/#method-1-environment-variables-recommended","title":"Method 1: Environment Variables (Recommended)","text":"<p>Many add-ons support customization through environment variables. For example, to change the Redis version in <code>ddev-redis</code>:</p> <pre><code>ddev dotenv set .ddev/.env.redis --redis-tag 7-bookworm\nddev restart\n</code></pre> <p>This sets <code>REDIS_TAG=\"7-bookworm\"</code> which the add-on uses during service startup.</p> <p>You can also edit the <code>.ddev/.env.redis</code> file directly:</p> <pre><code>REDIS_TAG=\"7-bookworm\"\nREDIS_FOO=\"bar\"\n</code></pre> <p>Check add-on documentation</p> <p>Each add-on documents its available environment variables. Check the add-on\u2019s GitHub repository for configuration options.</p>","boost":3},{"location":"users/extend/using-add-ons/#method-2-docker-compose-override","title":"Method 2: Docker Compose Override","text":"<p>For more complex customizations, create an override file. For example, <code>.ddev/docker-compose.redis_extra.yaml</code>:</p> <pre><code>services:\n  redis:\n    image: redis:7-bookworm\n    command: [\"redis-server\", \"--maxmemory\", \"256mb\"]\n</code></pre> <p>This approach:</p> <ul> <li>Maintains your customizations when updating the add-on</li> <li>Allows complex service modifications</li> <li>Doesn\u2019t require modifying the original add-on files</li> </ul> <p>Note</p> <p>Remove the <code>#ddev-generated</code> line from any add-on file you customize directly, but using override files is preferred.</p>","boost":3},{"location":"users/extend/using-add-ons/#official-add-ons","title":"Official Add-ons","text":"","boost":3},{"location":"users/extend/using-add-ons/#database-and-caching","title":"Database and Caching","text":"<ul> <li><code>ddev/ddev-redis</code> - Redis cache and data store service</li> <li><code>ddev/ddev-memcached</code> - High-performance Memcached caching service</li> <li><code>ddev/ddev-mongo</code> - MongoDB database support</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#search-and-analytics","title":"Search and Analytics","text":"<ul> <li><code>ddev/ddev-elasticsearch</code> - Elasticsearch full-text search and analytics engine</li> <li><code>ddev/ddev-opensearch</code> - OpenSearch analytics, logging, and full-text search</li> <li><code>ddev/ddev-solr</code> - Apache Solr server setup for search indexing</li> <li><code>ddev/ddev-drupal-solr</code> - Apache Solr search engine integration for Drupal</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#development-tools","title":"Development Tools","text":"<ul> <li><code>ddev/ddev-adminer</code> - Adminer web-based MySQL, MariaDB, PostgreSQL database browser</li> <li><code>ddev/ddev-phpmyadmin</code> - Web-based phpMyAdmin interface for MySQL, MariaDB</li> <li><code>ddev/ddev-redis-commander</code> - Redis Commander Web UI for use with Redis service</li> <li><code>ddev/ddev-browsersync</code> - Live-reload and HTTPS auto-refresh on file changes</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#platform-and-cloud-integration","title":"Platform and Cloud Integration","text":"<ul> <li><code>ddev/ddev-upsun</code> - Upsun Fixed (formerly Platform.sh) and Flex integration for project syncing and workflows</li> <li><code>ddev/ddev-ibexa-cloud</code> - Pull projects and data from Ibexa Cloud</li> <li><code>ddev/ddev-minio</code> - MinIO S3-compatible object storage solution</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#specialized-services","title":"Specialized Services","text":"<ul> <li><code>ddev/ddev-rabbitmq</code> - RabbitMQ message broker, queue manager</li> <li><code>ddev/ddev-cron</code> - Run scheduled tasks and cron jobs inside web container</li> <li><code>ddev/ddev-ioncube</code> - Enable ionCube PHP loaders for encoded files</li> <li><code>ddev/ddev-selenium-standalone-chrome</code> - Headless Chrome browser testing with Selenium</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#development-environment","title":"Development Environment","text":"<ul> <li><code>ddev/ddev-drupal-contrib</code> - Contrib module development environment for Drupal projects</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#troubleshooting-add-ons","title":"Troubleshooting Add-ons","text":"","boost":3},{"location":"users/extend/using-add-ons/#check-add-on-status","title":"Check Add-on Status","text":"<pre><code>ddev describe\n</code></pre> <pre><code>ddev logs -s &lt;service&gt;\n</code></pre> <p>This shows logs from an add-on\u2019s service.</p>","boost":3},{"location":"users/extend/using-add-ons/#explore-add-on-files","title":"Explore Add-on Files","text":"<pre><code>ls -la .ddev/\n</code></pre> <p>Look for files created by the add-on, typically:</p> <ul> <li><code>docker-compose.&lt;addon-name&gt;.yaml</code></li> <li>Configuration files in <code>.ddev/&lt;addon-name&gt;/</code></li> <li>Custom commands in <code>.ddev/commands/</code></li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#restart-services","title":"Restart Services","text":"<pre><code>ddev restart\n</code></pre> <p>This restarts all services and applies any configuration changes.</p>","boost":3},{"location":"users/extend/using-add-ons/#review-add-on-configuration","title":"Review Add-on Configuration","text":"<pre><code>ddev utility compose-config\n</code></pre> <p>This shows the final Docker Compose configuration including add-on services.</p>","boost":3},{"location":"users/extend/using-add-ons/#common-issues","title":"Common Issues","text":"<p>Service not starting: Check <code>ddev logs -s &lt;service&gt;</code> for error messages from the add-on service.</p> <p>Configuration not applied: Ensure you\u2019ve run <code>ddev restart</code> after making configuration changes.</p>","boost":3},{"location":"users/extend/using-add-ons/#getting-help","title":"Getting Help","text":"<ul> <li>Add-on documentation: Check the add-on\u2019s GitHub repository readme</li> <li>DDEV Discord: Join the DDEV Discord for community support</li> <li>GitHub Issues: Report add-on-specific issues to the add-on\u2019s repository</li> <li>Stack Overflow: Use the ddev tag</li> </ul>","boost":3},{"location":"users/extend/using-add-ons/#next-steps","title":"Next Steps","text":"<ul> <li>Create custom add-ons: See Creating Add-ons</li> <li>Manual services: See Defining Additional Services with Docker Compose</li> <li>Advanced customization: See Extending and Customizing Environments</li> </ul>","boost":3},{"location":"users/install/","title":"Installation","text":"<p>Whatever system you\u2019re on, you\u2019ll first need to install a Docker provider, then install DDEV, and optionally configure your browser.</p> <p>For the best experience, consider performance tuning and enabling shell completion.</p>"},{"location":"users/install/configuring-browsers/","title":"Configuring Browsers for DDEV projects","text":"<p>Most DDEV users can ignore this page. The standard instructions in DDEV Installation do everything that is needed. These instructions are for unusual browsers or OS environments.</p> <p>DDEV generates SSL certificates to enable local projects to use the HTTPS protocol. It uses a custom root Certificate Authority (CA) to generate SSL certificates for <code>*.ddev.site</code> domains.</p> <p>However, since this is a custom CA, web browsers display an ERR_CERT_AUTHORITY_INVALID warning when trying to access a local DDEV site over HTTPS.</p> <p>To eliminate this warning, you can install the custom root CA into your browser.</p> <p>For default browsers, this works automatically using the mkcert utility.</p> <p>For custom browsers (such as Firefox Developer Edition, Vivaldi, etc.), manual steps may be required.</p> <p>Want to learn more about HTTPS in DDEV?</p> <p>See Hostnames and Wildcards and DDEV, Oh My! for more information on DDEV hostname resolution.</p>"},{"location":"users/install/configuring-browsers/#adding-the-ddev-root-certificate-authority-to-browsers","title":"Adding the DDEV Root Certificate Authority to Browsers","text":"<p>The steps to install the root CA depend on the browser, but they generally follow this process:</p> <ol> <li>Use <code>mkcert -CAROOT</code> to locate the directory with the generated root certificate. Inside, you should find a <code>rootCA.pem</code> file. If it\u2019s missing, run <code>mkcert -install</code> command.</li> <li>Open your browser and navigate to the preferences or settings.</li> <li>Find the Certificate Manager, typically located in the \u201cSecurity\u201d section of the preferences.</li> <li>Click the \u201cView Certificates\u201d button.</li> <li>Go to the \u201cAuthorities\u201d tab.</li> <li>Click the \u201cImport\u201d button to add a custom authority certificate.</li> <li>Import the <code>rootCA.pem</code> file to install the root certificate authority.</li> </ol> <p>Still having issues?</p> <p>Check out this specific mkcert thread for additional troubleshooting.</p>"},{"location":"users/install/ddev-installation/","title":"DDEV Installation","text":"<p>Once you\u2019ve installed a Docker provider, you\u2019re ready to install DDEV!</p> macOSLinuxWindowsCodespacesManual"},{"location":"users/install/ddev-installation/#macos","title":"macOS","text":""},{"location":"users/install/ddev-installation/#homebrew","title":"Homebrew","text":"<p>Homebrew is the easiest and most reliable way to install and upgrade DDEV:</p> <pre><code># Install DDEV\nbrew install ddev/ddev/ddev\n\n# One-time initialization of mkcert\nmkcert -install\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p>"},{"location":"users/install/ddev-installation/#install-script","title":"Install Script","text":"<p>The install script is another option. It downloads, verifies, and sets up the <code>ddev</code> executable:</p> <pre><code># Download and run the install script\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> Do you still have an old version after installing or upgrading? <p>If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> executable must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to install DDEV v1.23.5\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.23.5\n</code></pre>"},{"location":"users/install/ddev-installation/#linux","title":"Linux","text":""},{"location":"users/install/ddev-installation/#debianubuntu","title":"Debian/Ubuntu","text":"<p>DDEV\u2019s Debian and RPM packages work with <code>apt</code> and <code>yum</code> repositories and most variants that use them, including Windows WSL2:</p> <pre><code># Add DDEV\u2019s GPG key to your keyring\nsudo sh -c 'echo \"\"'\nsudo apt-get update &amp;&amp; sudo apt-get install -y curl\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg &gt; /dev/null\nsudo chmod a+r /etc/apt/keyrings/ddev.gpg\n\n# Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list &gt;/dev/null\n\n# Update package information and install DDEV\nsudo sh -c 'echo \"\"'\nsudo apt-get update &amp;&amp; sudo apt-get install -y ddev\n\n# One-time initialization of mkcert\nmkcert -install\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> Do you still have an old version after installing or upgrading? <p>If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> executable must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p> Need to remove a previously-installed variant? <p>If you previously used DDEV\u2019s install script, you can remove that version:</p> <pre><code>sudo rm -f /usr/local/bin/ddev /usr/local/bin/mkcert /usr/local/bin/*ddev_nfs_setup.sh\n</code></pre> <p>If you previously installed DDEV with Homebrew, you can run <code>brew unlink ddev</code> to get rid of the Homebrew version.</p>"},{"location":"users/install/ddev-installation/#fedora-red-hat-etc","title":"Fedora, Red Hat, etc.","text":"<pre><code># Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho '[ddev]\nname=ddev\nbaseurl=https://pkg.ddev.com/yum/\ngpgcheck=0\nenabled=1' | perl -p -e 's/^ +//' | sudo tee /etc/yum.repos.d/ddev.repo &gt;/dev/null\n\n# Install DDEV\nsudo sh -c 'echo \"\"'\nsudo dnf install --refresh ddev\n\n# One-time initialization of mkcert\nmkcert -install\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> <p>Signed yum repository support will be added in the future.</p>"},{"location":"users/install/ddev-installation/#arch-linux","title":"Arch Linux","text":"<p>We maintain the ddev-bin package in AUR for Arch-based systems including Arch Linux, EndeavourOS and Manjaro. Install with <code>yay</code> or your AUR tool of choice.</p> <pre><code># Install DDEV\nyay -S ddev-bin\n\n# One-time initialization of mkcert\nmkcert -install\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p>"},{"location":"users/install/ddev-installation/#homebrew-amd64-only","title":"Homebrew (AMD64 only)","text":"<pre><code># Install DDEV using Homebrew\nbrew install ddev/ddev/ddev\n\n# One-time initialization of mkcert\nmkcert -install\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> <p> </p> <p>The install script is another option. It downloads, verifies, and sets up the <code>ddev</code> executable:</p> <pre><code># Download and run the install script\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to install DDEV v1.23.5\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.23.5\n</code></pre> Do you still have an old version after installing or upgrading? <p>If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> executable must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p>"},{"location":"users/install/ddev-installation/#install-script-linux","title":"Install Script","text":""},{"location":"users/install/ddev-installation/#windows","title":"Windows","text":"<p>You can install DDEV on Windows using the Windows installer or manual installation:</p>"},{"location":"users/install/ddev-installation/#important-considerations-for-wsl2-and-ddev","title":"Important Considerations for WSL2 and DDEV","text":"<ul> <li>You must use WSL2, not WSL version 1.   Use <code>wsl.exe -l -v</code> to see the versions of the distros you are using they should be v2.</li> <li>WSL2 offers a faster, smoother experience.   It\u2019s more performant, and you\u2019re less likely to have obscure Windows problems.</li> <li>Execute DDEV commands inside WSL2.   You\u2019ll want to run DDEV commands inside Ubuntu, for example, and never on the Windows side in PowerShell or Git Bash.</li> <li>Projects should live under the home directory of the Linux filesystem.   WSL2\u2019s Linux filesystem (e.g. <code>/home/&lt;your_username&gt;</code>) is much faster and has proper permissions, so keep your projects there and not in the slower Windows filesystem (<code>/mnt/c</code>).</li> <li>Custom hostnames (non <code>ddev.site</code> hostnames) are managed via the Windows hosts file, not within WSL2.   DDEV attempts to manage custom hostnames via the Windows-side hosts file\u2014usually at <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>.</li> </ul> <p>The WSL2 install process involves:</p> <ul> <li>Installing WSL2 and installing an Ubuntu distro (or some other distro if you\u2019re installing manually).</li> <li>Optionally installing Docker Desktop or Rancher Desktop for Windows and enabling WSL2 integration with the distro (if you\u2019re using the Docker/Rancher Desktop approach).</li> <li>Running the DDEV installer and choosing the approach you have chosen.</li> </ul>"},{"location":"users/install/ddev-installation/#install-wsl2-and-a-distro-first","title":"Install WSL2 and a Distro First","text":"<p>Before you begin installing DDEV or Docker, make sure WSL2 works: <pre><code>wsl --install\n# Reboot is often required after this command.\nwsl --update\n# Keeping WSL updated helps to ensure that DDEV installs successfully.\nwsl --install Ubuntu --name DDEV # the name DDEV is just a suggestion.\n# You'll be required to set up a default username and password for the distro.\n</code></pre></p>"},{"location":"users/install/ddev-installation/#windows-installer","title":"Windows Installer","text":"<p>You must have WSL2 installed before you can install DDEV on Windows. If you\u2019re using DDEV\u2019s WSL2 options (recommended) then you also must have created a distro (like suggested \u201cDDEV\u201d distro above) before you can install DDEV.</p> <p>The easiest way to install DDEV on Windows is to use the DDEV Windows installer, which can handle different installation scenarios:</p> <ol> <li>Download the Windows installer from the DDEV releases page.</li> <li> <p>Run the installer and choose your installation type:</p> <ul> <li>Docker CE inside WSL2 (Recommended): The installer will automatically install Docker CE in your WSL2 environment. This is the fastest and most reliable option.</li> <li>Docker Desktop/Rancher Desktop: Choose this if you already have Docker Desktop or Rancher Desktop installed or prefer to use them.</li> <li>Traditional Windows: Choose this for non-WSL2 installations (requires Docker Desktop or Rancher Desktop). Note that both Docker Desktop and Rancher Desktop themselves use WSL2, but you will interact with DDEV in Git Bash, PowerShell, or Cmd on the Windows side.</li> </ul> </li> </ol> <p>The installer will automatically configure DDEV for your chosen Docker provider and WSL2 environment.</p> <p>Windows Installer Silent Mode</p> <p>The Windows installer supports silent mode for automated installations and testing:</p> <pre><code># WSL2 with Docker CE and specified distro\n./ddev_windows_amd64_installer.exe /S /docker-ce /distro=DDEV\n\n# WSL2 with Docker Desktop and specified distro\n./ddev_windows_amd64_installer.exe /S /docker-desktop /distro=Ubuntu\n\n# Traditional Windows (requires Docker Desktop/Rancher Desktop)\n./ddev_windows_installer.exe /S /traditional\n\n# Get help with all options\n./ddev_windows_amd64_installer.exe /help\n</code></pre> <p>The <code>/S</code> flag makes the installation completely silent. Use <code>/distro=&lt;name&gt;</code> to specify your WSL2 distribution name (required for WSL2 options).</p>"},{"location":"users/install/ddev-installation/#manual-installation","title":"Manual Installation","text":"<p>If you prefer to install DDEV manually on WSL2, it\u2019s not hard. These techniques can be used to install on a non-Ubuntu distro, and can be adapted for Yum-based or ArchLinux-based distros as well:</p> <ol> <li>In PowerShell, run <code>mkcert.exe -install</code> and follow the prompt to install the Certificate Authority.</li> <li>In PowerShell, run <code>$env:CAROOT=\"$(mkcert -CAROOT)\"; setx CAROOT $env:CAROOT; If ($Env:WSLENV -notlike \"*CAROOT/up:*\") { $env:WSLENV=\"CAROOT/up:$env:WSLENV\"; setx WSLENV $Env:WSLENV }</code>. This will set WSL2 to use the Certificate Authority installed on the Windows side, so your Windows-side browser can trust it.</li> <li>In PowerShell, run <code>wsl --update</code> to make sure you have a current WSL version.</li> <li>In PowerShell, run <code>wsl --install &lt;distro-type&gt; --name DDEV</code>, for example <code>wsl --install Debian --name DDEV</code>. This will install the WSL2 distro for you. (The name \u201cDDEV\u201d is just a suggestion; you can use any name you like.)</li> <li>Docker CE: Follow the instructions in the Linux install section here to install Docker CE and DDEV. In addition, <code>sudo apt-get install -y docker-ce ddev ddev-wsl2</code> (or the equivalent <code>dnf</code> or other package manager commands).</li> <li>Docker Desktop for Windows (if used, this is not preferred):<ul> <li>Download and install the installer from docker.com. Choose the WSL2-based configuration. Start Docker Desktop. It may prompt you to log out and log in again, or reboot.</li> <li>Go to Docker Desktop\u2019s Settings \u2192 Resources \u2192 WSL integration \u2192 enable integration for your distro. Now <code>docker</code> commands will be available from within your WSL2 distro.</li> </ul> </li> <li>Double-check your distro: <code>echo $CAROOT</code> should show something like <code>/mnt/c/Users/&lt;you&gt;/AppData/Local/mkcert</code></li> <li>Check that Docker is working inside Ubuntu (or your distro) by running <code>docker ps</code> in the distro.</li> <li>Open the WSL2 terminal, for example <code>Debian</code> from the Windows start menu.</li> <li>In WSL2, run <code>mkcert -install</code>.</li> <li>Note that the older manual PowerShell script may be instructional if you\u2019re setting up a non-Ubuntu distro. It has been replaced by the Windows installer, but could be adapted for other distros.</li> </ol> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> <p>You have now installed DDEV on WSL2. If you\u2019re using WSL2 for DDEV, remember to run all <code>ddev</code> commands inside the WSL2 distro, and make sure your projects are in the WSL2 filesystem (e.g. <code>/home/&lt;your_username&gt;/projects</code>) and not in the Windows filesystem (e.g. <code>/mnt/c/Users/&lt;your_username&gt;/projects</code>).</p> <p>Path to certificates</p> <p>If you get the prompt <code>Installing to the system store is not yet supported on this Linux</code>, you may need to add <code>/usr/sbin</code> to the <code>$PATH</code> so that <code>/usr/sbin/update-ca-certificates</code> can be found.</p> <p>Windows Firefox Trusted CA</p> <p>The <code>mkcert -install</code> step on Windows isn\u2019t enough for Firefox. You need to configure your browser.</p>"},{"location":"users/install/ddev-installation/#github-codespaces","title":"GitHub Codespaces","text":"<p>You can use DDEV in remote GitHub Codespaces without having to run Docker locally; you only need a browser and an internet connection.</p> <p>Start by creating a <code>.devcontainer/devcontainer.json</code> file in your GitHub repository:</p> <pre><code>{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:debian-12\",\n    \"features\": {\n        \"ghcr.io/devcontainers/features/docker-in-docker:2\": {\n            \"version\": \"latest\"\n        },\n        \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n    },\n    \"postCreateCommand\": \"echo 'it should all be set up'\"\n}\n</code></pre> <p>Launch your repository in Codespaces:</p> <p></p> <p></p> <p>DDEV is now available within your new codespace instance:</p> <p></p> <p>Run <code>ddev config</code> to start a new blank project - or install a CMS.</p> <p>Run <code>ddev start</code> if there is already a configured DDEV project in your repository.</p> <p>Troubleshooting:</p> <p>If there are errors after restarting a codespace, use <code>ddev restart</code> or <code>ddev poweroff</code>.</p> <p>You can also use the commands</p> <ul> <li>\u201cCodespaces: Rebuild container\u201d</li> <li>\u201cCodespaces: Full rebuild container\u201d (Beware: database will be deleted)</li> </ul> <p>via the Visual Studio Code Command Palette:</p> <ul> <li>\u2318 + SHIFT + P on a Mac</li> <li>CTRL + SHIFT + P on Windows/Linux</li> <li>from the Application Menu, click View &gt; Command Palette (Firefox)</li> </ul> <p>If you need DDEV-specific assistance or have further questions, see support.</p> <p>Your updated <code>devcontainer.json</code> file may differ depending on your project, but you should have <code>install-ddev</code> in the <code>features</code> section.</p> <p>Normal Linux installation also works</p> <p>You can also install DDEV as if it were on any normal Linux installation.</p>"},{"location":"users/install/ddev-installation/#docker-integration","title":"Docker integration","text":"<p>DDEV in Codespaces relies on <code>docker-in-docker</code>, which must be added manually to the features when using <code>\"mcr.microsoft.com/devcontainers/base:debian-12\"</code>. See <code>devcontainers/features</code> for general support and issues regarding Docker-support.</p>"},{"location":"users/install/ddev-installation/#ddevs-router-is-not-used","title":"DDEV\u2019s router is not used","text":"<p>Since Codespaces handles all the routing, the internal DDEV router will not be used on Codespaces. Therefore config settings like <code>web_extra_exposed_ports</code> will have no effect.</p> <p>You can expose ports via the <code>ports</code> setting, which is usually not recommended if you work locally due to port conflicts. But you can load these additional Docker compose files only when Codespaces is detected. See Defining Additional Services for more information.</p> <pre><code>services:\n    web:\n        ports:\n            - \"5174:5174\"\n</code></pre>"},{"location":"users/install/ddev-installation/#default-environment-variables","title":"Default environment variables","text":"<p>Codespace instances already provide some default environment values. You can inherit and inject them in your <code>.ddev/config.yaml</code>:</p> <pre><code>web_environment:\n    - CODESPACES\n    - CODESPACE_NAME\n    - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN\n</code></pre>"},{"location":"users/install/ddev-installation/#advanced-usage-via-devcontainerjson","title":"Advanced usage via devcontainer.json","text":"<p>A lot more customization is possible via the <code>devcontainer.json</code>-configuration. You can install Visual Studio Code extensions by default or run commands automatically.</p>"},{"location":"users/install/ddev-installation/#postcreatecommand","title":"postCreateCommand","text":"<p>The <code>postCreateCommand</code> lets you run commands automatically when a new codespace is launched. DDEV commands are available here.</p> <p>The event is triggered on: fresh creation, rebuilds and full rebuilds. <code>ddev poweroff</code> is used in this example to avoid errors on rebuilds since some Docker containers are kept.</p> <p>You usually want to use a separate bash script to do this, as docker might not yet be available when the command starts to run.</p> <pre><code>{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:debian-12\",\n    \"features\": {\n        \"ghcr.io/devcontainers/features/docker-in-docker:2\": {\n            \"version\": \"latest\"\n        },\n        \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n    },\n    \"portsAttributes\": {\n        \"3306\": {\n            \"label\": \"database\"\n        },\n        \"8027\": {\n            \"label\": \"mailpit\"\n        },\n        \"8080\": {\n            \"label\": \"web http\"\n        },\n        \"8443\": {\n            \"label\": \"web https\"\n        }\n    },\n    \"postCreateCommand\": \"bash .devcontainer/setup_project.sh\"\n}\n</code></pre> <pre><code>#!/usr/bin/env bash\nset -ex\n\nwait_for_docker() {\n  while true; do\n    docker ps &gt; /dev/null 2&gt;&amp;1 &amp;&amp; break\n    sleep 1\n  done\n  echo \"Docker is ready.\"\n}\n\nwait_for_docker\n\n# download images beforehand, optional\nddev utility download-images\n\n# avoid errors on rebuilds\nddev poweroff\n\n# start ddev project automatically\nddev start -y\n\n# further automated install / setup steps, e.g.\nddev composer install\n</code></pre> <p>To check for errors during the <code>postCreateCommand</code> action, use the command</p> <ul> <li>\u201cCodespaces: View creation log\u201d</li> </ul> <p>via the Visual Studio Code Command Palette:</p> <ul> <li>\u2318 + SHIFT + P on a Mac</li> <li>CTRL + SHIFT + P on Windows/Linux</li> <li>from the Application Menu, click View &gt; Command Palette (Firefox)</li> </ul> <p></p>"},{"location":"users/install/ddev-installation/#manual","title":"Manual","text":"<p>DDEV is a single executable, so installation on any OS is a matter of copying the <code>ddev</code> executable for your architecture into the appropriate system path on your machine.</p> <ul> <li>Download and extract the latest DDEV release for your architecture.</li> <li>Move <code>ddev</code> to <code>/usr/local/bin</code> with <code>mv ddev /usr/local/bin/</code> (may require <code>sudo</code>), or another directory in your <code>$PATH</code> as preferred.</li> <li>Run <code>ddev</code> to test your installation. You should see DDEV\u2019s command usage output.</li> <li> <p>As a one-time initialization, run <code>mkcert -install</code>, which may require your <code>sudo</code> password.</p> <p>If you don\u2019t have <code>mkcert</code> installed, download the latest release for your architecture and <code>sudo mv &lt;downloaded_file&gt; /usr/local/bin/mkcert &amp;&amp; sudo chmod +x /usr/local/bin/mkcert</code>.</p> </li> <li> <p>For unusual browsers and situations that don\u2019t automatically support the <code>mkcert</code> certificate authority, configure your browser.</p> </li> </ul>"},{"location":"users/install/ddev-upgrade/","title":"Upgrading DDEV","text":"<p>Installing and upgrading DDEV are nearly the same thing, because you\u2019re upgrading the <code>ddev</code> binary that talks with Docker. You can update this file like other software on your system, whether it\u2019s with a package manager or traditional installer.</p> <p><code>ddev --version</code> shows an old version</p> <p>If you have installed or upgraded DDEV to the latest version, but when you check the actual version with <code>ddev --version</code>, it shows an older version, please refer to Why do I have an old DDEV?</p> macOSLinuxWindowsCodespacesManual"},{"location":"users/install/ddev-upgrade/#macos","title":"macOS","text":""},{"location":"users/install/ddev-upgrade/#homebrew-most-common","title":"Homebrew (Most Common)","text":"<pre><code># Upgrade DDEV to the latest version\nbrew upgrade ddev/ddev/ddev\n</code></pre>"},{"location":"users/install/ddev-upgrade/#install-script-unusual","title":"Install Script (Unusual)","text":"<pre><code># Download and run the script to replace the DDEV binary\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre>"},{"location":"users/install/ddev-upgrade/#verify-new-version","title":"Verify New Version","text":"<p>Use <code>ddev --version</code> to find out the version of the <code>ddev</code> binary in your <code>$PATH</code>. If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> binary must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to update to DDEV v1.24.6\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.24.6\n</code></pre>"},{"location":"users/install/ddev-upgrade/#linux","title":"Linux","text":""},{"location":"users/install/ddev-upgrade/#debianubuntu-including-wsl2","title":"Debian/Ubuntu (including WSL2)","text":"<pre><code># Update package information and all packages including DDEV\nsudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre>"},{"location":"users/install/ddev-upgrade/#fedora-red-hat-etc","title":"Fedora, Red Hat, etc.","text":"<pre><code># Upgrade the DDEV package\nsudo dnf upgrade ddev\n</code></pre>"},{"location":"users/install/ddev-upgrade/#arch-linux","title":"Arch Linux","text":"<pre><code># Upgrade the DDEV package\nyay -Syu ddev-bin\n</code></pre>"},{"location":"users/install/ddev-upgrade/#verify-new-version_1","title":"Verify New Version","text":"<p>Use <code>ddev --version</code> to find out the version of the <code>ddev</code> binary in your <code>$PATH</code>. If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> binary must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p>"},{"location":"users/install/ddev-upgrade/#windows","title":"Windows","text":""},{"location":"users/install/ddev-upgrade/#wsl2-docker","title":"WSL2 + Docker","text":"<p>If you\u2019re using WSL2, the upgrade process is the same regardless of how you installed DDEV.</p> <p>Open the WSL2 terminal, for example \u201cUbuntu\u201d from the Windows start menu, and run the following:</p> <pre><code># Upgrade the DDEV package\nsudo apt-get update &amp;&amp; sudo apt-get upgrade -y\n</code></pre> <p>You can also download and run the DDEV Windows Installer again, and it will do the upgrade for you. Make sure to choose the type of installation you have (Docker CE or Docker/Rancher Desktop).</p>"},{"location":"users/install/ddev-upgrade/#verify-new-version_2","title":"Verify New Version","text":"<p>Use <code>ddev --version</code> to find out the version of the <code>ddev</code> binary in your <code>$PATH</code>. If <code>ddev --version</code> still shows an older version than you installed or upgraded to, use <code>which -a ddev</code> to find out where another version of the <code>ddev</code> binary must be installed. See the \u201cWhy Do I Have An Old DDEV\u201d FAQ.</p>"},{"location":"users/install/ddev-upgrade/#traditional-windows","title":"Traditional Windows","text":"<p>Download and run the Windows installer (for your architecture, most often AMD64) for the latest DDEV release (<code>ddev_windows_&lt;architecture&gt;_installer.&lt;version&gt;.exe</code>).</p>"},{"location":"users/install/ddev-upgrade/#github-codespaces","title":"GitHub Codespaces","text":"<pre><code># Update package information and all packages including DDEV\nsudo apt-get update &amp;&amp; sudo apt-get upgrade -y\n</code></pre>"},{"location":"users/install/ddev-upgrade/#manual","title":"Manual","text":"<p>Upgrade using the exact same manual install process:</p> <ul> <li>Download and extract the latest DDEV release for your architecture.</li> <li>Move <code>ddev</code> to <code>/usr/local/bin</code> with <code>mv ddev /usr/local/bin/</code> (may require <code>sudo</code>), or another directory in your <code>$PATH</code> as preferred.</li> <li>Run <code>ddev --version</code> to confirm you\u2019re running the expected version.</li> </ul>"},{"location":"users/install/docker-installation/","title":"Docker Installation","text":"<p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> macOSLinuxWindowsCodespaces <p></p>"},{"location":"users/install/docker-installation/#macos","title":"macOS","text":"<p>Install one of the supported Docker providers:</p> <ul> <li>OrbStack: Recommended, easiest to install, most performant, commercial, not open-source.</li> <li>Lima: Free, open-source.</li> <li>Docker Desktop: Familiar, popular, not open-source, may require license, may be unstable.</li> <li>Rancher Desktop: Free, open-source, simple installation, slower startup.</li> <li>Colima: Free, open-source. Depends on separate Lima installation (managed by Homebrew).</li> </ul>"},{"location":"users/install/docker-installation/#orbstack","title":"OrbStack","text":"<p>OrbStack is a newer Docker provider that is very popular with DDEV users because it\u2019s fast, lightweight, and easy to install. It\u2019s a good choice for most users. It is not open-source, and it is not free for professional use.</p> <ol> <li>Install OrbStack with <code>brew install orbstack</code> or download it directly.</li> <li>Run the OrbStack app (from Applications) to finish setup, choosing \u201cDocker\u201d as the option. Answer any prompts to allow OrbStack access.</li> </ol>"},{"location":"users/install/docker-installation/#lima","title":"Lima","text":"<p>Lima is a free and open-source project supported by the Cloud Native Computing Foundation.</p> <ol> <li>Install Lima with <code>brew install lima</code>.</li> <li>If you don\u2019t have the <code>docker</code> client (if <code>docker help</code> fails) then install it with <code>brew install docker</code>.</li> <li>Create a 100GB VM in Lima with 4 CPUs, 6GB memory, and Cloudflare DNS. Adjust to your own needs: <pre><code>limactl create --name=default --vm-type=vz --mount-type=virtiofs --mount-writable --memory=6 --cpus=4 --disk=100 template://docker\ndocker context create lima-default --docker \"host=unix://$HOME/.lima/default/sock/docker.sock\"\ndocker context use lima-default\n</code></pre> After the initial run above, you can use <code>limactl start</code>.  Run <code>limactl list</code> to see configured setup.</li> </ol> <p>When your computer restarts, you\u2019ll need to <code>limactl start</code> again.</p> <p>Docker contexts let the Docker client point at the right Docker server</p> <p>The Docker provider you\u2019re using is selected with <code>docker context</code>. You can see the available contexts with <code>docker context ls</code> and the currently selected one with <code>docker context show</code>. With the setup above you\u2019ll want <code>docker context use lima-default</code>.</p> <p>Lima only mounts filesystems in your home directory unless you do further configuration</p> <p>By default, Lima only works with DDEV projects in your home directory. You must have your projects somewhere in your home directory for DDEV to work unless you do additional configuration. If your project is not in your home directory, you must add additional mounts, as described in mounts example.</p>"},{"location":"users/install/docker-installation/#docker-desktop-for-mac","title":"Docker Desktop for Mac","text":"<p>Docker Desktop for Mac can be downloaded from docker.com. It has long been supported by DDEV and has extensive automated testing. It is not open-source, may require a license for many users, and sometimes has stability problems.</p> <p>Ports unavailable?</p> <p>If you get messages like <code>Ports are not available... exposing port failed... is vmnetd running?</code> it means you need to check the \u201cAllow privileged port mapping (requires password)\u201d checkbox in the \u201cAdvanced\u201d section of the Docker Desktop configuration. You may have to stop and restart Docker Desktop, and you may have to turn it off, restart Docker Desktop, turn it on again, restart Docker Desktop. (More extensive problem resolution is in Docker Desktop issue.)</p>"},{"location":"users/install/docker-installation/#rancher-desktop","title":"Rancher Desktop","text":"<p>Rancher Desktop is an easy-to-install free and open-source Docker provider. Install from Rancher Desktop. It has automated testing with DDEV. When installing, choose only the Docker option and turn off Kubernetes.</p>"},{"location":"users/install/docker-installation/#colima","title":"Colima","text":"<p>Colima is a free and open-source project which bundles Lima.</p> <ol> <li>Install Colima with <code>brew install colima</code>, which also installs Lima and other dependencies.</li> <li>If you don\u2019t have the <code>docker</code> client (if <code>docker help</code> fails) then install it with <code>brew install docker</code>.</li> <li> <p>Start Colima with 4 CPUs, 6GB memory, 100GB storage, and Cloudflare DNS, adjusting as needed:</p> <pre><code>colima start --cpu 4 --memory 6 --disk 100 --vm-type=vz --mount-type=virtiofs --dns=1.1.1.1\n</code></pre> </li> </ol> <p>After the initial run above, you can use <code>colima start</code> or use <code>colima start -e</code> to edit the configuration file. Run <code>colima status</code> at any time to check Colima\u2019s status.</p> <p>Docker contexts let the Docker client point at the right Docker server</p> <p>Colima activates its own Docker context to prevent conflicts with Docker Desktop. If you run <code>docker context ls</code>, you\u2019ll see a list of available contexts where the currently-active one is indicated with a <code>*</code>\u2014which will be <code>colima</code> after you\u2019ve started it. You can change to the default (Docker Desktop) with <code>docker context use default</code> or change back with <code>docker context use colima</code>. This means you can run Docker Desktop and Colima at the same time, but be mindful of which context you\u2019re pointing at!</p> <p>Colima can only work in your home directory unless you do further configuration</p> <p>By default, Colima only works with DDEV projects in your home directory. You need to have your projects somewhere in your home directory for DDEV to work unless you do additional configuration. See the <code>~/.colima/default/colima.yaml</code> for more information, or notes in colima.yaml.</p>"},{"location":"users/install/docker-installation/#migrating-projects-between-docker-providers","title":"Migrating Projects Between Docker Providers","text":"<ul> <li>OrbStack has built-in migration of images and volumes from Docker Desktop.</li> <li>Move projects between other Docker providers using How can I migrate from one Docker provider to another?.</li> </ul>"},{"location":"users/install/docker-installation/#linux","title":"Linux","text":"<p>Docker Desktop for Linux may work but does not have automated test coverage</p> <p>Casual manual testing of Docker Desktop for Linux seems to work, but DDEV does not have explicit support for it and does not have automated testing.</p> <p>The best way to install Docker on Linux is to use your native package management tool (<code>apt</code>, <code>dnf</code>, etc.) with the official Docker repository. While many Linux distributions provide Docker packages in their own repositories, these are often outdated and may not include the latest features required for stability in a development environment like DDEV. To ensure you\u2019re using a supported version, install Docker directly from the official Docker repository. </p> <p>Follow these distribution-specific instructions to set up Docker Engine from the official Docker repository:</p> <ul> <li>Ubuntu</li> <li>CentOS</li> <li>Debian</li> <li>Fedora</li> <li>binaries</li> </ul> <p>Linux installation absolutely requires adding your Linux user to the <code>docker</code> group, and configuring the Docker daemon to start at boot. Don\u2019t install rootless mode, it is not supported by DDEV. See Post-installation steps for Linux.</p> <p>Don\u2019t <code>sudo</code> with <code>docker</code> or <code>ddev</code></p> <p>Don\u2019t use <code>sudo</code> with the <code>docker</code> command. If you find yourself needing it, you haven\u2019t finished the installation. You also shouldn\u2019t use <code>sudo</code> with <code>ddev</code> unless it\u2019s specifically for the <code>ddev hostname</code> command.</p> <p>On systems without <code>systemd</code> or its equivalent\u2014mostly if you\u2019re installing inside WSL2\u2014you\u2019ll need to manually start Docker with <code>service docker start</code> or the equivalent in your distro. You can add this to your shell profile.</p>"},{"location":"users/install/docker-installation/#windows","title":"Windows","text":"<p>For initial installation of DDEV on Windows, you can use one of the following Docker providers:</p> <ul> <li>Docker CE inside WSL2 - The most popular, performant, and best-supported way to run DDEV on Windows. No additional software is required; Docker CE will be installed by the DDEV installer. This approach does not work for traditional Windows (non-WSL2) installations.</li> <li>Docker Desktop for Windows - A popular choice that works with both traditional Windows and WSL2. It has extensive automated testing with DDEV, but has some performance and reliability problems. It is not open-source and may require a license for many users. This approach works for both traditional Windows and WSL2 installations.</li> <li>Rancher Desktop for Windows - A free and open-source Docker provider that has been manually tested with DDEV on traditional Windows, but does not have automated testing. This approach works for both traditional Windows and WSL2 installations.</li> </ul>"},{"location":"users/install/docker-installation/#using-the-windows-installer","title":"Using the Windows Installer","text":"<p>The easiest way to install DDEV on Windows is to use the Windows installer, which can handle different installation scenarios:</p> <ol> <li>Download the Windows installer from the DDEV releases page.</li> <li>Run the installer and choose your installation type:</li> <li>Docker CE inside WSL2 (Recommended): The installer will automatically install Docker CE in your WSL2 environment. This is the fastest and most reliable option.</li> <li>Docker Desktop: Choose this if you already have Docker Desktop installed or prefer to use it.</li> <li>Rancher Desktop: Choose this if you already have Rancher Desktop installed.</li> <li>Traditional Windows: Choose this for non-WSL2 installations (requires Docker Desktop or Rancher Desktop).</li> </ol> <p>The installer will automatically configure DDEV for your chosen Docker provider and WSL2 environment.</p>"},{"location":"users/install/docker-installation/#manual-installation-options","title":"Manual Installation Options","text":"<p>If you prefer to install manually or need more control over the installation process, you can use the following approaches:</p>"},{"location":"users/install/docker-installation/#docker-ce-inside-wsl2","title":"Docker CE inside WSL2","text":"<p>No additional software is required to run DDEV on Windows with Docker CE inside WSL2. The DDEV installer will install Docker CE for you. This is the most popular, performant, and best-supported way to run DDEV on Windows.</p> <p>To install manually: 1. Install or update your Ubuntu-based WSL2 distro (Ubuntu, Ubuntu-20.04, Ubuntu-22.04, etc.) 2. Install DDEV inside your WSL2 environment using the Linux installation instructions 3. DDEV will automatically install Docker CE for you on first run</p>"},{"location":"users/install/docker-installation/#docker-desktop-for-windows","title":"Docker Desktop for Windows","text":"<ol> <li>Download and install Docker Desktop from docker.com.</li> <li>During installation, ensure \u201cUse WSL 2 instead of Hyper-V\u201d is selected.</li> <li>After installation, open Docker Desktop settings and navigate to Resources \u2192 WSL Integration.</li> <li>Enable integration with your Ubuntu-based WSL2 distro (e.g., Ubuntu, Ubuntu-20.04, Ubuntu-24.04).</li> <li>Apply the changes and restart Docker Desktop if prompted.</li> <li>Verify that <code>docker ps</code> works in git-bash, PowerShell, or WSL2, wherever you\u2019re using it.</li> </ol>"},{"location":"users/install/docker-installation/#rancher-desktop-for-windows","title":"Rancher Desktop for Windows","text":"<ol> <li>Download and install Rancher Desktop.</li> <li>During installation, choose Docker as the container runtime and disable Kubernetes.</li> <li>After installation, open Rancher Desktop and go to WSL Integration in the settings.</li> <li>Enable integration with your Ubuntu-based WSL2 distro (e.g., Ubuntu, Ubuntu-20.04, Ubuntu-22.04).</li> <li>Apply the changes and restart Rancher Desktop if needed.</li> <li>Verify that <code>docker ps</code> works in git-bash, PowerShell, or WSL2, wherever you\u2019re using it.</li> </ol>"},{"location":"users/install/docker-installation/#github-codespaces","title":"GitHub Codespaces","text":"<p>You can set up GitHub Codespaces following the instructions in the DDEV Installation section.</p>"},{"location":"users/install/docker-installation/#troubleshooting-docker","title":"Troubleshooting Docker","text":""},{"location":"users/install/docker-installation/#common-connection-errors","title":"Common Connection Errors","text":"<p><code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p> <p>This error indicates that either Docker is not installed or the Docker daemon is not running:</p> <ul> <li>macOS/Traditional Windows: Start your Docker provider (e.g., OrbStack, Docker Desktop, Rancher Desktop) from your applications menu</li> <li>Linux/WSL2: Run <code>sudo systemctl enable --now docker</code> to start and enable it to start automatically on boot</li> </ul> <p><code>error during connect: Get \"http://host:2375/v1.51/version\": dial tcp: lookup host on 127.0.0.53:53: server misbehaving</code></p> <p>or</p> <p><code>unable to resolve docker endpoint: context \"docker-desktop\": context not found</code></p> <p>These errors indicate Docker context issues:</p> <ul> <li>List available contexts: <code>docker context ls</code></li> <li>Switch to default (or different) context: <code>docker context use default</code></li> <li>Validate the current context: <code>docker ps</code></li> </ul> <p>Environment variables override Docker context</p> <p>If you have set <code>DOCKER_HOST</code> and/or <code>DOCKER_CONTEXT</code> environment variables, they will override the <code>docker context</code> settings. This can lead to connection issues if the host is unreachable or the specified context is incorrect. Check your shell profile (<code>~/.bashrc</code>, <code>~/.zshrc</code>) for these variables.</p> <p>Creating a Docker context</p> <p>You can create a new Docker context using the <code>docker context create</code> command. See Remote Docker Environments for examples.</p>"},{"location":"users/install/docker-installation/#testing-docker-setup","title":"Testing Docker Setup","text":"<p>For DDEV to work properly, Docker needs to:</p> <ul> <li>Mount your project code directory (typically under your home folder) from host to container</li> <li>Access TCP ports on the host for HTTP/HTTPS (default ports 80 and 443, configurable per project)</li> </ul> <p>Run this command in your project directory to verify Docker configuration (use Git Bash if you\u2019re on Windows!):</p> <pre><code>docker run --rm -t -p 80:80 -p 443:443 -v \"//$PWD:/tmp/projdir\" ddev/ddev-utilities sh -c \"echo ---- Project Directory &amp;&amp; ls /tmp/projdir\"\n</code></pre> <p>Expected result: A list of files in the current directory.</p> <p>Common test command issues:</p> <p><code>port is already allocated</code></p> <p>Another service is using ports 80 or 443. See the Web Server Ports Troubleshooting section.</p> <p><code>invalid mount config for type \"bind\": bind mount source path does not exist</code></p> <p>The filesystem path isn\u2019t properly shared with Docker:</p> <ul> <li>Docker Desktop: Go to Settings \u2192 Resources \u2192 File Sharing and add your project directory or drive</li> <li>Linux: Ensure proper permissions on the project directory</li> </ul> <p><code>The path (...) is not shared and is not known to Docker</code></p> <p>Docker Desktop: Add the path in Settings \u2192 Resources \u2192 File Sharing and restart Docker Desktop after making changes.</p> <p><code>Error response from daemon: Get registry-1.docker.io/v2/</code></p> <p>Docker daemon isn\u2019t running, or no internet connection:</p> <ul> <li>Start/restart Docker and verify internet connectivity</li> <li>Check if corporate firewall blocks Docker Hub access</li> </ul> <p><code>403 authentication required</code> during <code>ddev start</code></p> <p>Stale Docker Hub authentication interfering with public image pulls:</p> <ul> <li>Solution: Run <code>docker logout</code> and try again</li> <li>Note: Docker authentication is not required for normal DDEV operations</li> </ul>"},{"location":"users/install/performance/","title":"Performance","text":"<p>DDEV is continually focused on quick project startup and fast responses to its web requests. DDEV\u2019s performance is mostly an issue of how Docker runs on your workstation.</p> <p>On Linux, including Windows WSL2, Docker is fast. Most people are happy with Linux performance and don\u2019t need to change anything.</p> <p>On macOS and Windows with Docker Desktop, allocated resources and mounted filesystem performance can be significant bottlenecks. Taking a bit of time to optimize your setup can yield massive performance gains.</p>"},{"location":"users/install/performance/#filesystem-performance","title":"Filesystem Performance","text":"<p>Mutagen can offer a big performance boost on macOS and Windows. It\u2019s fast and doesn\u2019t need any setup; you only need to enable it. Before Mutagen, Mac and Windows users configured NFS for speed improvements\u2014though it requires setup and isn\u2019t as fast.</p> <p>Mutagen is enabled by default on Mac and traditional Windows, and it can be disabled per-project or globally.</p> MutagenNFS"},{"location":"users/install/performance/#mutagen","title":"Mutagen","text":""},{"location":"users/install/performance/#what-mutagen-does","title":"What Mutagen Does","text":"<p>The Mutagen asynchronous caching feature is the best way to improve DDEV\u2019s web-serving performance on macOS and Windows, and we recommend it for most projects. It can be significantly faster than NFS, massively faster than plain Docker or Colima, and it makes filesystem watchers (<code>fsnotify</code>/<code>inotify</code>) work correctly.</p> <p>Mutagen decouples in-container reads and writes from reads and writes on the host machine, so each can enjoy near-native speed. A change on the host gets changed \u201cpretty soon\u201d in the container, and a change in the container gets updated \u201cpretty soon\u201d on the host; neither filesystem is stuck waiting on the other one. This \u201cpretty soon\u201d means, however, that there\u2019s a brief window where files on the host may not exactly match the files inside the container\u2014so files that manage to change in both places can lead to conflicts.</p> <p>Docker bind-mounts, the traditional approach to getting your code into DDEV\u2019s web container, check every file access against the file on the host. Docker\u2019s way of doing these checks macOS and Windows is not very performant, even with NFS. Linux and Linux-like systems are faster because Docker provides native file-access performance.</p> <p>While Mutagen works fine and has automated tests for Linux and Windows WSL2, it may not be worth enabling on those systems since it won\u2019t make the dramatic difference it does on macOS and Windows.</p> <p>Another major advantage of Mutagen over NFS is that it supports filesystem notifications, so file-watchers on both the host and inside the container will be notified when changes occur. This is a great advantage for many development tools, which otherwise have to poll for changes at greater expense. Instead, they can be notified via normal <code>inotify</code>/<code>fsnotify</code> techniques.</p>"},{"location":"users/install/performance/#enabling-and-disabling-mutagen","title":"Enabling and Disabling Mutagen","text":"<p>Don\u2019t Install Mutagen</p> <p>You do not need to install anything to use Mutagen. DDEV installs and maintains its own <code>mutagen</code> binary.</p> <p>On macOS and traditional Windows, Mutagen is enabled globally by default. You can disable it with <code>ddev mutagen reset &amp;&amp; ddev config global --performance-mode=none &amp;&amp; ddev config --performance-mode=none</code>.</p> <p>If you\u2019d rather use Mutagen on a specific project, run <code>ddev stop</code>, enable it with <code>ddev config --performance-mode=mutagen</code>, and <code>ddev start</code> again.</p> <p>You can\u2019t disable Mutagen on individual projects if it\u2019s enabled globally.</p> <p>To stop using Mutagen on a project, run <code>ddev mutagen reset &amp;&amp; ddev config --performance-mode=none</code>.</p> <p>The <code>nfs-mount-enabled</code> feature is automatically turned off if you\u2019re using Mutagen.</p>"},{"location":"users/install/performance/#mutagen-and-user-generated-uploads","title":"Mutagen and User-Generated Uploads","text":"<p>When Mutagen is enabled, DDEV attempts to exclude user-generated files in <code>upload_dirs</code> (if they exist) from syncing. It does this by using a bind-mount in the generated docker-compose configuration, and excluding the directories from syncing in <code>.ddev/mutagen/mutagen.yml</code>.</p> <p>If you have a non-standard location for user-generated files, like <code>private/fileadmin</code> with the deprecated <code>typo3-secure-web</code> approach, you should override the project defaults by setting <code>upload_dirs</code> in <code>.ddev/config.yaml</code> and pointing it at the correct directory. This will allow Mutagen to sync correctly.</p> <p>If you change the <code>upload_dirs</code>, run <code>ddev mutagen reset</code> to let Mutagen know about the changed behavior.</p>"},{"location":"users/install/performance/#mutagen-integration-caveats","title":"Mutagen Integration Caveats","text":"<p>If you run into an issue with Mutagen, please try to recreate and report it via a support channel!</p> <p>Mutagen has generally been great for those using it, but it\u2019s good to be aware of its trade-offs:</p> <ul> <li>It may not be the right choice for every project. Filesystem consistency has been excellent with Mutagen, but performance is its specialty. If consistency is your highest priority, then there are reasons to be cautious. Two-way sync is a very difficult computational problem, and problems may surface.</li> <li>The initial sync takes longer.   For most projects, the first-time Mutagen sync of a project takes no more than 30 seconds, and subsequent starts take 10 seconds or less. If your project is taking a long time to sync, especially after the initial sync, see Advanced Configuration below to figure out what\u2019s taking time and how to bind-mount it.</li> <li>Reset if you change <code>mutagen.yml</code>. If you take control of the <code>mutagen.yml</code> file and make changes to it, run <code>ddev mutagen reset</code> after making changes.</li> <li>Avoid file changes when DDEV is stopped. If you change files\u2014checking out a different branch, removing a file\u2014while DDEV is stopped, Mutagen has no way to know about it. When you start again, it will get the files that are stored and bring them back to the host. If you do change files while DDEV is stopped, run <code>ddev mutagen reset</code> before restarting the project so Mutagen only starts with awareness of the host\u2019s file contents.</li> <li>It modestly increases disk usage. Mutagen integration increases the size of your project code\u2019s disk usage, because the code exists both on your computer and inside a Docker volume. Your user-uploaded files directories (<code>upload_dirs</code>) are normally excluded from Mutagen so they\u2019re not a problem for most project types or generic configurations where <code>upload_dirs</code> is specified. Take care that you have enough overall disk space, and that on macOS you\u2019ve allocated enough file space in Docker Desktop. If you have other large directories you can exclude specific directories from getting synced and use a regular Docker mount for them instead.</li> <li>Beware simultaneous changes to the same file in both filesystems. As we pointed out above, any project likely to change the same file on the host and inside the container may encounter conflicts.</li> <li>Massive changes can cause problems. Massive file changes on the host or in the container are the most likely to introduce issues. This integration has been tested extensively with major changes introduced by <code>ddev composer</code> and <code>ddev composer create-project</code>, but be aware of this issue. Changing Git branches, <code>npm install</code>, <code>yarn install</code>, or a script that deletes huge sections of the synced data are related behaviors that should raise caution. Again, use <code>ddev mutagen reset</code> before restarting the project if you want to be sure Mutagen starts out looking at the host machine\u2019s files.</li> <li>Mutagen is asynchronous. A massive change in either filesystem can result in lag as all changed files are handled. You can use <code>ddev mutagen monitor</code> to get a better look at what\u2019s happening.</li> <li>You can manually trigger a sync. <code>ddev start</code> and <code>ddev stop</code> automatically force a Mutagen sync. You can cause an explicit sync with <code>ddev mutagen sync</code> and see syncing status with <code>ddev mutagen status</code>.</li> <li>Be mindful of in-container Composer actions. If you run Composer actions inside the container with <code>ddev ssh</code>, it\u2019s a good idea to run <code>ddev mutagen sync</code> and make sure they\u2019re synced as soon as possible. Most people won\u2019t notice the difference and Mutagen will get it synced soon enough.</li> <li>Perform big Git operations on the host side. Git actions that change lots of files, like switching branches, are best done on the host side and not inside the container. You may want to do an explicit <code>ddev mutagen sync</code> command after doing something like that to be sure all changes are picked up quickly.</li> <li>Share projects carefully with non-Mutagen users. If you share a project with some users that want Mutagen, perhaps on macOS, and other users that don\u2019t want or need it, perhaps on WSL2, don\u2019t check in <code>.ddev/config.yaml</code>\u2019s <code>performance_mode: \"mutagen\"</code>. Instead, either use global performance mode configuration or add a not-checked-in, project-level <code>.ddev/config.performance.yaml</code> solely to include <code>performance_mode: \"mutagen\"</code> in it. That way, only users with that file will have Mutagen enabled.</li> <li>Windows symlinks have some Mutagen restrictions. On macOS and Linux (including WSL2) the default <code>.ddev/mutagen/mutagen.yml</code> chooses the <code>posix-raw</code> type of symlink handling. (See mutagen docs). This basically means any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. Mutagen, however, does not support <code>posix-raw</code> on traditional Windows, so DDEV uses the <code>portable</code> symlink mode. The result is that on Windows, using Mutagen, symlinks must be strictly limited to relative links that are inside the Mutagen section of the project.</li> <li>It\u2019s a filesystem feature. Make backups! If we\u2019ve learned anything from computer file-storage adventures, it\u2019s that backups are always a good idea!</li> <li>Large <code>node_modules</code> can cause cause slow sync times When you\u2019re compiling static, front-end assets with tools like <code>npm</code> and <code>yarn</code>, e.g. Drupal themes, syncing the <code>node_modules</code> directory can be very slow. We recommend excluding <code>node_modules</code> by adding it to the <code>sync:defaults:ignore:paths</code> list in <code>mutagen.yml</code>; see Advanced Mutagen Configuration Options for details. This problem can also occur with directories that contain large binaries or fonts, for example.</li> </ul>"},{"location":"users/install/performance/#syncing-after-git-checkout","title":"Syncing After <code>git checkout</code>","text":"<p>In general, it\u2019s best practice on most projects to do significant Git operations on the host, but they can be disruptive to the sync. It\u2019s easy to add a Git post-checkout hook to do a <code>ddev mutagen sync</code> operation though. Add a <code>.git/hooks/post-checkout</code> file to your project and make it executable with <code>chmod +x .git/hooks/post-checkout</code>:</p> <pre><code>#!/usr/bin/env bash\nddev mutagen sync || true\n</code></pre>"},{"location":"users/install/performance/#syncing-after-yarn-npm-and-pnpm-actions","title":"Syncing After <code>yarn</code>, <code>npm</code>, and <code>pnpm</code> Actions","text":"<p>Actions by those programs can also set off massive filesystem changes.</p> <p>You should run <code>ddev mutagen sync</code> in order to get things into sync, or simply wait.</p> <p></p>"},{"location":"users/install/performance/#advanced-mutagen-configuration-options","title":"Advanced Mutagen Configuration Options","text":"<p>The Mutagen project provides extensive configuration options.</p> <p>Each DDEV project includes a <code>.ddev/mutagen/mutagen.yml</code> file by default, with basic defaults you can override if you remove the <code>#ddev-generated</code> line at the beginning of the file.</p> <p>If you edit the <code>.ddev/mutagen/mutagen.yml</code> file:</p> <ul> <li>Remove the <code>#ddev-generated</code> line</li> <li>Execute a <code>ddev mutagen reset</code> to avoid the situation where the Docker volume and Mutagen session still have files from an older configuration.</li> </ul> <p>The most likely thing you\u2019ll want to do is to exclude a path from mutagen syncing, which you can do in the <code>paths:</code> section of the <code>ignore:</code> stanza in the <code>.ddev/mutagen/mutagen.yml</code>.</p> <p>You can exclude a path from Mutagen syncing and bind-mount something from the host or a different volume on that path with a <code>docker-compose.*.yaml</code> file. So if you have a heavy project subdirectory (lots of fonts or user-generated content, for example), you could exclude that subdirectory in <code>.ddev/mutagen/mutagen.yml</code> and add a <code>docker-compose.exclude.yaml</code>.</p> <p>For example, if you want the <code>node_modules</code> subdirectory of the project to be available inside the container, but don\u2019t need Mutagen to be syncing it, you can use normal Docker bind-mounting for that subdirectory:</p> <ul> <li>Take over the <code>.ddev/mutagen/mutagen.yml</code> by removing the <code>#ddev-generated</code> line.</li> <li>Add <code>/web/core/node_modules</code> to the excluded paths:</li> </ul> <pre><code>ignore:\n  paths:\n  - \"/web/core/node_modules\"\n</code></pre> <ul> <li>Add a <code>.ddev/docker-compose.bindmount.yaml</code>:</li> </ul> <pre><code>services:\n  web:\n    volumes:\n    - \"../web/core/node_modules:/var/www/html/web/core/node_modules\"\n</code></pre> <ul> <li><code>ddev mutagen reset</code> and <code>ddev start</code> to get the new configuration.</li> </ul> <p></p>"},{"location":"users/install/performance/#troubleshooting-mutagen-sync-issues","title":"Troubleshooting Mutagen Sync Issues","text":"<ul> <li>Please make sure that DDEV projects work without Mutagen before troubleshooting it. Run <code>ddev config --performance-mode=none &amp;&amp; ddev restart</code>.</li> <li>Rename your project\u2019s <code>.ddev/mutagen/mutagen.yml</code> file to <code>.ddev/mutagen/mutagen.yml.bak</code> and run <code>ddev restart</code>. This ensures you\u2019ll have a fresh version in case the file has been changed and <code>#ddev-generated</code> removed.</li> <li>Avoid having Mutagen sync large binaries, which can cause <code>ddev start</code> to take a long time. The <code>.tarballs</code> directory is automatically excluded, so Mutagen will ignore anything you move there. To see what Mutagen is trying to sync, run <code>ddev mutagen status -l</code> in another window.</li> <li><code>DDEV_DEBUG=true ddev start</code> will provide more information about what\u2019s going on with Mutagen.</li> <li>DDEV\u2019s Mutagen daemon keeps its data in a DDEV-only <code>MUTAGEN_DATA_DIRECTORY</code> in <code>~/.ddev_mutagen_data_directory</code>.</li> <li> <p>DDEV\u2019s private Mutagen binary is installed in <code>~/.ddev/bin/mutagen</code> (or <code>$XDG_CONFIG_BASE/ddev/bin/mutagen</code>. You can use all the features of Mutagen with <code>ddev utility mutagen</code>. For example:</p> <pre><code>ddev utility mutagen sync list --template \"{{ json (index . 0) }}\" | docker run -i --rm ddev/ddev-utilities jq -r\nddev utility mutagen sync monitor &lt;projectname&gt; -l\n</code></pre> </li> <li> <p>You can run the diagnose_mutagen.sh script to gather information about Mutagen\u2019s setup. Please share output from it when creating an issue or seeking support.</p> </li> <li>Try <code>ddev poweroff</code> or <code>~/.ddev/bin/mutagen daemon stop &amp;&amp; ~/.ddev/bin/mutagen daemon start</code> to restart the Mutagen daemon if you suspect it\u2019s hanging.</li> <li>Use <code>ddev mutagen reset</code> if you suspect trouble, and always after changing <code>.ddev/mutagen/mutagen.yml</code>. This restarts the project\u2019s Mutagen data (Docker volume + Mutagen session) from scratch.</li> <li><code>ddev mutagen monitor</code> can help watch Mutagen behavior. It\u2019s the same as <code>~/.ddev/bin/mutagen sync monitor &lt;syncname&gt;</code>.</li> <li>If you\u2019re working on the host and expecting things to show up immediately inside the container, you can learn a lot by running <code>ddev mutagen monitor</code> in a separate window as you work. You\u2019ll see when Mutagen responds to your changes and get an idea about how much delay there is.</li> <li>Consider <code>ddev stop</code> before massive file change operations, like moving a directory.</li> <li>If you get in real trouble, run <code>ddev stop</code>, reset your files with Git, and run <code>ddev mutagen reset</code> to throw away the Docker volume which may already have incorrect files on it.</li> </ul>"},{"location":"users/install/performance/#debugging-long-mutagen-startup-time","title":"Debugging Long Mutagen Startup Time","text":"<p>Normally, a first-time <code>ddev start</code> on a new or changed project should only take a minute or less. If it\u2019s taking longer than that, there are likely some huge files or directories that are being synced that we don\u2019t need to sync.</p> <p>(All we really want to sync is PHP files, everything else is a waste. So if we\u2019re syncing fonts or user-generated files or anything else, we want to figure out what it is and stop it. As noted elsewhere here, <code>node_modules</code> can cause this behavior.)</p> <p>To see what\u2019s causing the slow syncing try this technique:</p> <pre><code>ddev mutagen reset # Cleans up all synced files so starting from scratch\nddev start\n</code></pre> <p>Then in another terminal window view the syncing behavior with:</p> <pre><code>while true; do ddev mutagen st -l | grep \"^Current\"; sleep 1; done\n</code></pre> <p>You\u2019ll see something like this, which may help understand what mutagen is working so hard at. This example is a 5GB file named <code>dummyfile</code> in <code>vendor/bin</code>.</p> <pre><code>Current file: vendor/bin/dummyfile (306 MB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (687 MB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (1.1 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (1.6 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (2.0 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (2.4 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (2.8 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (3.1 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (3.5 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (4.0 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (4.4 GB/5.2 GB)\nCurrent file: vendor/bin/dummyfile (4.8 GB/5.2 GB)\nCurrent file: vendor/mck89/peast/lib/Peast/Syntax/Parser.php (66 kB/131 kB)\nCurrent file: web/core/tests/Drupal/Tests/Core/Config/Entity/EntityDisplayBaseTest.php (2.0 kB/2.0 kB)\n</code></pre>"},{"location":"users/install/performance/#advanced-mutagen-troubleshooting","title":"Advanced Mutagen Troubleshooting","text":"<p>You can observe what Mutagen is doing by watching <code>ddev mutagen monitor</code> in another terminal window to see the results. However, Mutagen has full logging. You can run it with <code>ddev mutagen logs</code>.</p>"},{"location":"users/install/performance/#mutagen-strategies-and-design-considerations","title":"Mutagen Strategies and Design Considerations","text":"<p>Mutagen provides enormous speed boosts in everyday usage, but it\u2019s trying desperately under the hood to keep container changes reflected on the host and vice versa.</p> <p>DDEV mounts a fast Docker volume onto <code>/var/www/html</code> inside the <code>web</code> container, then delegates to the Mutagen daemon (on the host). That daemon has the job of keeping all host project contents in sync with the contents of the Docker volume.</p> <p>Consistency is a high priority for DDEV\u2019s integration, which tries at key points to make sure everything is completely consistent and in sync.</p> <p>The Mutagen daemon\u2019s life cycle and sync sessions are something like this:</p> <ol> <li>On <code>ddev start</code>, the Mutagen agent will be started if it\u2019s not already running.</li> <li>If there\u2019s already a sync session for the project, it\u2019s resumed.</li> <li>On <code>ddev stop</code> the sync session is flushed to ensure consistency, then paused.</li> </ol> <p>A synchronous flush happens after any <code>ddev composer</code> command, since Composer may cause massive changes to the filesystem inside the container that need to be synced before operation continues.</p> <p>If you need to reset everything for a project, you can do it with <code>ddev mutagen reset</code>, which starts the Mutagen session from scratch and removes the Docker volume so it can be recreated from scratch.</p>"},{"location":"users/install/performance/#safe-to-use-with-other-mutagen-installations","title":"Safe to Use with Other Mutagen Installations","text":"<p>DDEV requires and provides a specific version of Mutagen, which you can see running <code>ddev version</code>.  If another <code>mutagen</code> instance or daemon is installed on your workstation it doesn\u2019t matter, because DDEV\u2019s version runs separately and uses a different data directory.</p>"},{"location":"users/install/performance/#nfs","title":"NFS","text":"<p>NFS is deprecated</p> <p>NFS is deprecated and no longer recommended. It can be complex and unreliable. This feature will be removed in DDEV v1.25.0.</p>"},{"location":"users/install/performance/#using-nfs-to-mount-the-project-into-the-web-container","title":"Using NFS to Mount the Project into the Web Container","text":"<p>NFS (Network File System) is a classic, mature Unix technique to mount a filesystem from one device to another. It provides significantly improved web server performance on macOS and Windows. It doesn\u2019t really impact performance on Linux, so we don\u2019t recommend it there.</p> <p>DDEV supports this technique and requires pre-configuration on your host computer, facilitated by a setup script that asks for your <code>sudo</code> password when it\u2019s necessary:</p> <ol> <li>Make sure DDEV is already working and you can use it.</li> <li>Use the script below for your OS to configure the NFS server and exports files.</li> <li>Test that NFS is working correctly by using <code>ddev utility nfsmount</code> in a project directory. The first line should report something like \u201cSuccessfully accessed NFS mount of /path/to/project\u201d.</li> <li>Enable NFS mounting globally with <code>ddev config global --performance-mode=nfs</code>. You can also configure NFS mounting on a per-project basis with <code>ddev config --performance-mode=nfs</code> in the project directory, but this is unusual. The project-specific value will override global config.</li> <li><code>ddev start</code> your project and make sure it works normally. Use <code>ddev describe</code> to verify that NFS mounting is being used. The NFS status is near the top of the output of <code>ddev describe</code>.</li> </ol> <p>Skip step 2 if you\u2019re already using NFS!</p> <p>If you\u2019re already using NFS with Vagrant on macOS, for example, and you already have a number of exports, the default home directory export here won\u2019t work\u2014you\u2019ll have overlaps in your <code>/etc/exports</code>. Or on Windows, you may want to use an NFS server other than Winnfsd like the Allegro NFS Server.</p> <p>The recommendations and scripts below are for getting started if, like most people, you don\u2019t already use NFS.</p> macOS NFS Setup <p>Download, inspect, make executable, and run macos_ddev_nfs_setup.sh:</p> <pre><code>curl -O https://raw.githubusercontent.com/ddev/ddev/main/scripts/macos_ddev_nfs_setup.sh &amp;&amp; chmod +x macos_ddev_nfs_setup.sh &amp;&amp; ./macos_ddev_nfs_setup.sh\n</code></pre> <p>This one-time setup stops running DDEV projects, adds your home directory to the <code>/etc/exports</code> config file that <code>nfsd</code> uses, and enables <code>nfsd</code> to run on your computer.</p> <p>This shares your home directory via NFS to any NFS client on your computer, so it\u2019s critical to consider security issues. You can make the shares in <code>/etc/exports</code> more limited, as long as they don\u2019t overlap. NFS doesn\u2019t allow overlapping exports.</p> <p>If your DDEV projects are set up outside your home directory, you\u2019ll need to add a line to <code>/etc/exports</code> for that share as well:</p> <ol> <li>Run <code>sudo vi /etc/exports</code>.</li> <li>Copy the line the script you created (<code>/System/Volumes/Data/Users/username -alldirs -mapall=&lt;your_user_id&gt;:20 localhost</code>).</li> <li>Edit to add the additional path, e.g: <code>/Volumes/SomeExternalDrive -alldirs -mapall=&lt;your_uid&gt;:20 localhost</code>.</li> </ol>"},{"location":"users/install/performance/#macos-full-disk-access-for-special-directories","title":"macOS Full Disk Access for Special Directories","text":"<ul> <li> <p>If your projects are in a subdirectory of the <code>~/Documents</code> or <code>~/Desktop</code> directories, or on an external drive, you must grant \u201cFull Disk Access\u201d privilege to <code>/sbin/nfsd</code> in System Preferences \u2192 Security &amp; Privacy \u2192 Privacy. In the Full Disk Access section, click the \u201c+\u201d and add <code>/sbin/nfsd</code>:</p> <p></p> <p>You should then see <code>nfsd</code> in the list:</p> <p></p> </li> <li> <p>Run <code>sudo nfsd restart</code>.</p> </li> <li>From a project directory, run <code>ddev utility nfsmount</code> to confirm successful output.</li> </ul>"},{"location":"users/install/performance/#macos-nfs-debugging","title":"macOS NFS Debugging","text":"<ul> <li>Temporarily disable any firewall or VPN.</li> <li>Use <code>showmount -e</code> to find out what\u2019s exported via NFS. If you don\u2019t see a parent of your project directory, NFS can\u2019t work.</li> <li>If nothing is showing, use <code>nfsd checkexports</code> and look carefully for errors.</li> <li>Use <code>ps -ef | grep nfsd</code> to make sure <code>nfsd</code> is running.</li> <li>Restart <code>nfsd</code> with <code>sudo nfsd restart</code>.</li> <li>Add the following to your <code>/etc/nfs.conf</code>:     <pre><code>nfs.server.mount.require_resv_port = 0\nnfs.server.verbose = 3\n</code></pre></li> <li>Run Console.app and search for \u201cnfsd\u201d at the top. Run <code>sudo nfsd restart</code> and read the messages carefully. Try running <code>ddev utility nfsmount</code> in the problematic project directory:     <pre><code>$ ddev utility nfsmount\nSuccessfully accessed NFS mount of /Users/rfay/workspace/d8composer\nTARGET    SOURCE                                                FSTYPE OPTIONS\n/nfsmount :/System/Volumes/Data/Users/rfay/workspace/d8composer nfs    rw,relatime,vers=3,rsize=65536,wsize=65536,namlen=255,hard,    nolock,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.65.2,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.65.2\n/nfsmount/.ddev\n</code></pre></li> </ul>"},{"location":"users/install/performance/#debugging-ddev-start-failures-with-nfs-mount-enabled","title":"Debugging <code>ddev start</code> Failures with NFS Mount Enabled","text":"<p>There are a number of reasons the NFS mount can fail on <code>ddev start</code>:</p> <ul> <li>Firewall issues.</li> <li>NFS Server not running.</li> <li>Trying to start more than one NFS server.</li> <li>Overlapping NFS exports, typically an issue if you\u2019ve established another NFS client like Vagrant. You\u2019ll need to reconfigure your exports paths so they don\u2019t overlap.</li> <li>Path of project not shared in <code>~/.ddev/nfs_exports.txt</code>.</li> </ul> <p>To debug and solve permission problems:</p> <ul> <li>Try <code>ddev utility nfsmount</code> in a project directory to see if basic NFS mounting is working. If that works, everything else probably will too.</li> <li>When debugging, run <code>ddev restart</code> in between each change. Otherwise, you can have stale mounts inside the container and you\u2019ll miss any benefit you may find in the debugging process.</li> <li>Inspect <code>~/.ddev/nfs_exports.txt</code>.</li> <li>Restart the server with <code>sudo nssm restart nfsd</code>.</li> </ul>"},{"location":"users/install/performance/#freeing-up-system-resources","title":"Freeing Up System Resources","text":"<p>Every project you run uses system resources, and may compete for those resources. A reasonable practice is to individually stop projects you\u2019re not using. You could also stop all projects with <code>ddev poweroff</code> and only start the one you\u2019re working on. <code>ddev list</code> will display all your projects along with each one\u2019s status.</p>"},{"location":"users/install/performance/#docker-desktop-for-mac-settings","title":"Docker Desktop for Mac Settings","text":"<p>Open Docker Desktop\u2019s Preferences, and visit Resources \u2192 Advanced. Here you can adjust the CPUs, memory, and disk allocated to Docker. The defaults work well for a small project or two, but you may want to adjust these upward based on your experience. Most people raise the memory allocation to 6GB or higher. The disk allocation almost always needs to be raised to accommodate increased downloaded images. Your experience will determine what to do with CPUs.</p>"},{"location":"users/install/phpstorm/","title":"PhpStorm Setup","text":"<p>If you work with the PhpStorm IDE, you can configure it for tight integration with DDEV and Docker to more easily run actions, access services, enable autocompletion, and enjoy a more convenient development experience.</p>"},{"location":"users/install/phpstorm/#before-starting","title":"Before Starting","text":"<p>Make sure to get at least one project going with <code>ddev start</code> before trying to set up the plugin, because the plugin assumes it has a project to work with. For Drupal, see Configuring PhpStorm.</p>"},{"location":"users/install/phpstorm/#ddev-integration-plugin","title":"DDEV Integration Plugin","text":"<p>It\u2019s easiest to use the DDEV Integration Plugin, which you can install from its landing page or by searching the in-app marketplace (Settings \u2192 Plugins \u2192 Marketplace) for \u201cDDEV\u201d. The integration plugin handles nearly everything on this page automatically, and works on all platforms.</p> <p>Install and enable the plugin, then set up <code>phpunit</code> since it doesn\u2019t yet handle that for you.</p> <p>PHP and Node interpreter automatic setup</p> <p>The plugin automatically adds PHP and Node interpreters to your project.</p> <p>If you installed the plugin after a project was already open in PhpStorm, you\u2019ll need to manually switch to the newly added PHP and Node interpreters in Preferences. Alternatively, close your IDE and delete the <code>.idea</code> directory in the project root to let the plugin set them up automatically.</p>"},{"location":"users/install/phpstorm/#manual-setup","title":"Manual Setup","text":"<p>If you\u2019re not using the DDEV Integration Plugin, you can follow these steps instead:</p> <ol> <li>Start your project by running <code>ddev start</code>.</li> <li>Open the DDEV project. In this example, the project name is <code>drup</code> and the site is <code>drup.ddev.site</code>.<ul> <li>If you\u2019re on Windows, running PhpStorm on the Windows side but using WSL2 for your DDEV project, open the project as a WSL2 project. In other words, in the Open dialog, browse to <code>\\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\drup</code> (in this example). (If you\u2019re running PhpStorm inside WSL2, there are no special instructions.)</li> </ul> </li> <li>Under Build, Execution, Deployment \u2192 Docker, set the correct Docker provider, for example \u201cColima\u201d or \u201cDocker for Mac\u201d.</li> <li>Set up your project to do normal Xdebug, as described in the Step Debugging section. This will result in a PhpStorm \u201cServer\u201d with the proper name, normally the same as the FQDN of the project. In this example, <code>drup.ddev.site</code>. (All you have to do here is click the little \u201cbug\u201d to \u201cStart listening for PHP Debug Connections\u201d, run <code>ddev xdebug on</code>, and visit a web page and choose the correct mapping from host to server.)</li> <li>Under File \u2192 Settings \u2192 PHP (Windows) or Preferences \u2192 PHP (macOS), click \u201c\u2026\u201d to the right of \u201cCLI Interpreter\u201d.<ol> <li>Use the \u201c+\u201d to select \u201cFrom Docker, Vagrant, VM\u2026\u201d.</li> <li>Choose \u201cDocker Compose\u201d.</li> <li>Create a \u201cserver\u201d; Choose the appropriate Docker provider configured above under Build, Execution, Deployment \u2192 Docker.</li> <li>In the \u201cPath mappings\u201d of the \u201cServer\u201d you may have to map the local paths (which on WSL2 means <code>/home/...</code>) to the in-container paths, especially if you have Mutagen enabled. So \u201cVirtual Machine Path\u201d would be <code>/var/www/html</code> and \u201cLocal path\u201d would be something like <code>/Users/rfay/workspace/drup</code> (on macOS) or <code>\\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\drup</code> on Windows using WSL2.</li> <li>Now back in the \u201cConfigure Remote PHP Interpreter\u201d for \u201cConfiguration files\u201d use <code>.ddev/.ddev-docker-compose-full.yaml</code>. On macOS, you may need to use \u2318 + SHIFT + ., to show hidden dotfiles.</li> <li>Service: <code>web</code>.</li> <li>Environment variables: Set the <code>COMPOSE_PROJECT_NAME</code> variable to the name of the project prefixed with <code>ddev</code>. In the <code>drup</code> example this would become <code>ddev-drup</code>. You can find the name of the project in je <code>config.yaml</code> of your project. The result will be <code>COMPOSE_PROJECT_NAME=ddev-drup</code>. Note that the content of COMPOSE_PROJECT_NAME needs to be lowercase even when project name itself has uppercase characters.</li> <li>In the CLI interpreter \u201cLifecycle\u201d select \u201cConnect to existing container\u201d.</li> <li>Here\u2019s an example filled out:     </li> </ol> </li> <li>In the main PHP setup dialog, add an entry to the path mappings, as it doesn\u2019t correctly derive the full path mapping. Add an entry that maps your project location to <code>/var/www/html</code>. So in this example, the \u201cLocal Path\u201d is <code>/Users/rfay/workspace/drup</code> and the \u201cRemote Path\u201d is <code>/var/www/html</code>:     </li> <li>Configure composer under PHP \u2192 Composer.<ul> <li>Use \u201cremote interpreter\u201d</li> <li>CLI Interpreter will be \u201cweb\u201d</li> </ul> </li> </ol>"},{"location":"users/install/phpstorm/#enabling-phpunit","title":"Enabling PHPUnit","text":"<p>This assumes you\u2019ll need to use PHPUnit and you already have it installed.</p> <ol> <li>Under \u201cTest Frameworks\u201d click \u201c+\u201d to add PHPUnit.<ul> <li>PHPUnit by remote interpreter</li> <li>Interpreter \u201cDDEV\u201d</li> <li>Choose \u201cPath to phpunit.phar\u201d and use <code>/var/www/html/vendor/bin/phpunit</code>, or wherever your PHPUnit is inside the container. You need PHPUnit properly Composer-installed for your project. For example, for Drupal 10, <code>ddev composer require --dev --with-all-dependencies drupal/core-dev:^10</code> and <code>ddev composer require --dev phpspec/prophecy-phpunit:^2</code>.</li> <li>Default configuration file: <code>/var/www/html/web/core/phpunit.xml</code> or wherever yours is inside the container. </li> </ul> </li> <li>Open Run/Debug configurations and use \u201c+\u201d to add a PHPUnit configuration. Give it a name.<ul> <li>Test scope (as you wish, by directory or class or whatever).</li> <li>Interpreter: \u201cweb\u201d (the one we set up). </li> </ul> </li> <li>Enable Xdebug if you want to debug tests with <code>ddev xdebug on</code>.</li> <li>Run the runner you created:     </li> </ol>"},{"location":"users/install/phpstorm/#phpstorm-basic-setup-on-windows-wsl2","title":"PhpStorm Basic Setup on Windows WSL2","text":"<p>It\u2019s possible to use PhpStorm with DDEV on WSL2 in at least three different ways:</p> <ol> <li>Run PhpStorm in Windows as usual, opening the project on the WSL2 filesystem at <code>\\\\wsl$\\&lt;distro&gt;</code> (e.g. <code>\\\\wsl$\\Ubuntu</code>). PhpStorm is slow to index files but can be slow to respond to file changes in this mode, although it\u2019s adequate for many people.</li> <li>\u201cRemote Development\u201d in PhpStorm 2022.3+, which has explicit support for WSL2 and actually runs a PhpStorm instance on WSL2.</li> <li>Enabling X11 on Windows and running PhpStorm inside WSL2 as a Linux app. PhpStorm works fine this way; it does require WSL2 graphics support, which is now available on all Windows 10 and Windows 11 systems.</li> </ol> <p>We\u2019ll walk through each of these approaches.</p>"},{"location":"users/install/phpstorm/#basics","title":"Basics","text":"<ul> <li> <p>Start with a working DDEV/WSL2 setup as described in the docs. Until that\u2019s all working it doesn\u2019t help to go farther.</p> </li> <li> <p>If you haven\u2019t used Xdebug with DDEV and PhpStorm before, you\u2019ll want to read the step debugging instructions.</p> </li> <li> <p>Your project absolutely must be in <code>/home</code> inside WSL2, which is on the Linux filesystem. Although you could keep your project on the Windows filesystem and access it in WSL2 via <code>/mnt/c</code>, the performance is even worse than native Windows. It does work though, but don\u2019t do it. You\u2019ll be miserable.</p> </li> </ul>"},{"location":"users/install/phpstorm/#phpstorm-running-on-windows-side-and-using-docker-desktop","title":"PhpStorm Running On Windows Side and Using Docker Desktop","text":"<p>With the DDEV Integration Plugin almost everything is already done for you, so use it. Create your project inside WSL2 (on the <code>/home</code> partition) and get it started first.</p> <ol> <li>Your working project will be on the <code>/home</code> partition, so you\u2019ll open it using Windows PhpStorm as <code>\\\\wsl$\\Ubuntu\\home\\&lt;username&gt;\\...\\&lt;projectdir&gt;</code>.</li> <li>On some systems and some projects it may take a very long time for PhpStorm to index the files.</li> <li>File changes are noticed only by polling, and PhpStorm will complain about this in the lower right, \u201cExternal file changes sync may be slow\u201d.</li> <li>Temporarily disable your Windows firewall. When you have everything working, you can turn it back on again.</li> <li>Use <code>ddev start</code> and <code>ddev xdebug on</code>.</li> <li>Click the Xdebug listen button on PhpStorm (the little phone icon) to make it start listening.</li> <li>Set a breakpoint on or near the first line of your <code>index.php</code>.</li> <li>Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure <code>/home/&lt;you&gt;/.../&lt;yourproject&gt;</code> is mapped to <code>/var/www/html</code>.</li> </ol> <p>Debugging should be working. You can step through your code, set breakpoints, view variables, etc.</p> <p>Set the PhpStorm terminal path (Settings \u2192 Tools \u2192 Terminal \u2192 Shell Path) to <code>C:\\Windows\\System32\\wsl.exe</code>. That way when you use the terminal Window in WSL2 it\u2019s using the Bash shell in WSL2.</p>"},{"location":"users/install/phpstorm/#phpstorm-with-remote-development-option","title":"PhpStorm with \u201cRemote Development\u201d Option","text":"<ol> <li>Open your WSL2 project using File \u2192 Remote Development \u2192 WSL and choose the distro, then the project.</li> <li>For Xdebug you\u2019ll want to use <code>ddev config global --xdebug-ide-location=wsl2</code> because essentially the IDE is running inside WSL2 (and listening there).</li> <li>Use <code>ddev xdebug on</code> as normal; test with a simple breakpoint in your <code>index.php</code>.</li> </ol>"},{"location":"users/install/phpstorm/#phpstorm-inside-wsl2-in-linux","title":"PhpStorm Inside WSL2 in Linux","text":"<ol> <li>On Windows 10 or 11 get \u201cWindows Subsystem for Linux\u201d from the Microsoft Store, which now includes graphical support.</li> <li> <p>Edit <code>/etc/wsl.conf</code> to enable systemd support, which allows for installing PhpStorm with snap, see details about WSL2 and systemd:</p> <pre><code>[boot]\nsystemd=true\n</code></pre> </li> <li> <p>Run <code>wsl --shutdown</code> on the Windows side and wait 10 seconds, then restart your distro.</p> </li> <li>In WSL2, <code>sudo snap install --classic phpstorm</code>.</li> <li>DDEV should already be installed as described in DDEV installation.</li> <li><code>ddev config global --xdebug-ide-location=wsl2</code> to tell DDEV that the IDE is listening in WSL2 as opposed to listening on the Windows side.</li> <li>Start PhpStorm, <code>phpstorm &amp;</code>.</li> <li>Use <code>ddev start</code> and <code>ddev xdebug on</code>.</li> <li>Click the Xdebug listen button in PhpStorm (the little phone icon) to make it start listening.</li> <li>Set a breakpoint on or near the first line of your <code>index.php</code>.</li> <li>Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure <code>/home/&lt;you&gt;/.../&lt;yourproject&gt;</code> is mapped to <code>/var/www/html</code>.</li> </ol> <p>Debugging should be working! You can step through your code, set breakpoints, view variables, etc.</p>"},{"location":"users/install/shell-completion/","title":"Shell Completion &amp; Autocomplete","text":"<p>Most people like to have shell completion on the command line. In other words, when you\u2019re typing a command, you can hit <code>&lt;TAB&gt;</code> and the shell will show you what the options are. For example, if you type <code>ddev &lt;TAB&gt;</code>, you\u2019ll see all the possible commands. <code>ddev utility &lt;TAB&gt;</code> will show you the options for the command. And <code>ddev list -&lt;TAB&gt;</code> will show you all the flags available for <code>ddev list</code>.</p> <p>Shells like Bash and Zsh need help to do this though, they have to know what the options are. DDEV provides the necessary hint scripts, and if you use Homebrew, they get installed automatically.</p>"},{"location":"users/install/shell-completion/#macos-bash-with-homebrew","title":"macOS Bash with Homebrew","text":"<p>The easiest way to use Bash completion on macOS is install it with Homebrew (docs). <code>brew install bash-completion</code>. When you install it though, it will warn you with something like this, which may vary on your system. Add the following line to your <code>~/.bash_profile</code> file (or if that doesn\u2019t exist, to your <code>~/.profile</code>:</p> <pre><code>[[ -r \"$(brew --prefix)/etc/profile.d/bash_completion.sh\" ]] &amp;&amp; . \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\n</code></pre> <p>Bash profile</p> <p>You must add the include to your <code>.bash_profile</code> or <code>.profile</code> or nothing will work. Use <code>source ~/.bash_profile</code> or <code>source ~/.profile</code> to make it take effect immediately in your current terminal window.</p> <p>Link completions by running <code>brew completions link</code>.</p> <p>When you install DDEV via Homebrew, each new release will automatically get a refreshed completions script.</p>"},{"location":"users/install/shell-completion/#macos-zsh-with-homebrew","title":"macOS Zsh with Homebrew","text":"<p>To make Homebrew completions available in Zsh the Homebrew-managed path <code>zsh/site-functions</code> has to be added to the FPATH variable.</p> macOS ZshmacOS Zsh with Oh My Zsh <p>Add the following block to your <code>~/.zshrc</code> file (see docs):</p> <pre><code>if type brew &amp;&gt;/dev/null\nthen\n  FPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n  autoload -Uz compinit\n  compinit\nfi\n</code></pre> <p>Note that the updating of the FPATH variable has to happen before the Zsh completion index is initialized with <code>compinit</code>.</p> <p>Oh My Zsh is calling <code>compinit</code> for you when <code>oh-my-zsh.sh</code> is sourced (see docs). Instead of adding the block that was necessary for <code>macOS Zsh</code> place the following line right before the <code>oh-my-zsh.sh</code> file is sourced in your <code>~/.zshrc</code> file:</p> <pre><code>FPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n</code></pre> <p>To avoid any potential caching issue remove and rebuild the <code>.zcompdump</code> file, which is the index for Zsh completions:</p> <pre><code>rm -f ~/.zcompdump; compinit\n</code></pre> <p>In case you run into any <code>zsh compinit: insecure directories</code> warnings, run:</p> <pre><code>chmod -R go-w \"$(brew --prefix)/share\"\n</code></pre>"},{"location":"users/install/shell-completion/#macos-fish-with-homebrew","title":"macOS Fish with Homebrew","text":"<p><code>fish</code> shell completions are automatically installed at <code>/usr/local/share/fish/vendor_completions.d/ddev_fish_completion.sh</code> when you install DDEV via Homebrew.</p> <p>If you installed <code>fish</code> without Homebrew, you can extract the fish completions (<code>ddev_fish_completion.sh</code>) from the tar archive of completion scripts included with each release. See below.</p>"},{"location":"users/install/shell-completion/#bashzshfish-on-linux-including-wsl2","title":"Bash/Zsh/Fish on Linux including WSL2","text":"<p>On Debian and Yum based systems, if you installed DDEV using <code>apt-get install ddev</code>, the <code>bash</code>, <code>zsh</code>, and <code>fish</code> completions should be automatically installed at <code>/usr/share/bash-completion/completions/ddev</code>, <code>/usr/share/zsh/vendor-completions/_ddev</code> and <code>/usr/share/fish/completions/ddev.fish</code> respectively, and the <code>bash</code> completions should be automatically installed at <code>/usr/share/bash-completion/completions/bash</code>.</p> <p>Otherwise, you can download the completion files for manual installation as described below. Every Linux distro requires a different manual installation technique. On Debian/Ubuntu, you could deploy the <code>ddev_bash_completion.sh</code> script where it needs to be by running <code>sudo mkdir -p /usr/share/bash-completion/completions &amp;&amp; sudo cp ddev_bash_completion.sh /usr/share/bash-completion/completions/ddev</code>.</p>"},{"location":"users/install/shell-completion/#git-bash","title":"Git Bash","text":"<p>Git Bash completions (<code>ddev_bash_completion.sh</code>) are provided in the tar archive of completion scripts included with each release. See below.</p> <p>Completions in Git Bash are sourced from at least the <code>~/bash_completion.d</code> directory. You can copy <code>ddev_bash_completion.sh</code> to that directory by running <code>mkdir -p ~/bash_completion.d &amp;&amp; cp ddev_bash_completion.sh ~/bash_completion.d/ddev.bash</code>.</p>"},{"location":"users/install/shell-completion/#powershell","title":"PowerShell","text":"<p>PowerShell completions (<code>ddev_powershell_completion.ps1</code>) are provided in the tar archive of completion scripts included with each release. See below.</p> <p>You can run the <code>ddev_powershell_completion.ps1</code> script manually or install it so it will be run whenever PS is opened using the technique described at Run PowerShell Script When You Open PowerShell.</p>"},{"location":"users/install/shell-completion/#tar-archive-of-completion-scripts-for-manual-deployment","title":"tar Archive of Completion Scripts for Manual Deployment","text":"<p>Although most people will use techniques like Homebrew for installation, a tar archive of shell completion scripts for various shells is available in each release, called <code>ddev_shell_completion_scripts.&lt;version&gt;.tar.gz</code>. If you need to manually install, you can download the files and extract them with the following commands, replacing the VERSION number in the first line with your version:</p> <pre><code>VERSION=v1.24.0\ncurl -sSLf https://github.com/ddev/ddev/releases/download/${VERSION}/ddev_shell_completion_scripts.${VERSION}.tar.gz\ntar -zxf ddev_shell_completion_scripts.${VERSION}.tar.gz\n</code></pre> <p>Alternatively, you could download the tar archive using a browser, from a URL such as the following, replacing the version numbers with your version: https://github.com/ddev/ddev/releases/download/v1.22.6/ddev_shell_completion_scripts.v1.22.6.tar.gz.</p> <p>After extracting the archive, copy the appropriate completion script where you need it, for example by running <code>sudo cp ddev_bash_completion.sh /etc/bash_completion.d/ddev</code>. Detailed instructions for various shells are given above.</p>"},{"location":"users/providers/","title":"Hosting Provider Integration","text":"<p>DDEV offers hosting provider integration and sample integrations for Pantheon, Upsun, Lagoon and Acquia hosting, along with other examples.</p> <p>Hosting provider integration allows connecting with your upstream hosting. <code>ddev pull &lt;provider&gt;</code> downloads and <code>ddev push &lt;provider&gt;</code> uploads the database and the user-generated files to an upstream provider. It does not push (deploy) or pull your code. Your code should be under version control in for example Git.</p> <p>DDEV provides ready-to-go integrations for Upsun, Acquia, and Lagoon in every project, see the .ddev/providers directory. These can be used as is, or they can be modified as you see fit (but remove the <code>#ddev-generated</code> line so DDEV doesn\u2019t replace them with the defaults).</p> <p>In addition, each project includes example recipes for Pantheon, Git, local files, and <code>rsync</code> in its <code>.ddev/providers</code> directory, which you can use and adapt however you\u2019d like.</p> <p>DDEV provides the <code>pull</code> command with whatever recipes you have configured. For example, <code>ddev pull platform</code> is available by default, and <code>ddev pull pantheon</code> is available if you have created <code>.ddev/providers/pantheon.yaml</code>.</p> <p>DDEV also provides the <code>push</code> command to push database and files to upstream. This is very useful for pushing to non-production environments, but could be very dangerous to your upstream production environment and should only be used when appropriate. If you find the <code>push</code> section dangerous, you can disable it by removing it from your provider YAML file.</p> <p>Each provider recipe is a YAML file that can have whatever name you want. The examples are mostly named after the hosting providers, but they could be named <code>upstream.yaml</code> or <code>live.yaml</code>, so you could <code>ddev pull upstream</code> or <code>ddev pull live</code>. If you wanted different upstream environments to pull from, you could name one \u201cprod\u201d and one \u201cdev\u201d and <code>ddev pull prod</code> and <code>ddev pull dev</code>.</p> <p>Recipes and Integrations are provided for:</p> <ul> <li>Acquia</li> <li>Git</li> <li>Lagoon</li> <li>Local files (like Dropbox, for example)</li> <li>Pantheon</li> <li>Upsun Fixed/Platform.sh</li> <li>rsync</li> <li>Upsun Flex</li> </ul> <p>We know you\u2019ll find improvements to these examples and will have lots to contribute for other hosting providers, and we look forward to your contributions as pull requests here or as new add-ons.</p> <p>Each provider recipe is a file named <code>&lt;provider&gt;.yaml</code> and consists of several mostly-optional stanzas:</p> <ul> <li><code>environment_variables</code>: Environment variables will be created in the web container for each of these during pull or push operations. They\u2019re used to provide context (project ID, environment name, etc.) for each of the other stanzas. This stanza is not used in more recent hosting integrations, since providing the environment variables in <code>config.yaml</code> or via <code>ddev pull xxx --environment=VARIABLE=value</code> is preferred.</li> <li><code>db_pull_command</code>: A script that determines how DDEV should obtain a database. Its job is to create a gzipped database dump in <code>/var/www/html/.ddev/.downloads/db.sql.gz</code>. This is optional; if nothing has to be done to obtain the database dump, this step can be omitted.</li> <li><code>db_import_command</code>: (optional) A script that imports the downloaded database. This is for advanced usages like multiple databases. The default behavior only imports a single database into the <code>db</code> database. The localfile example uses this technique.</li> <li><code>files_pull_command</code>: A script that determines how DDEV can get user-generated files from upstream. Its job is to copy the files from upstream to <code>/var/www/html/.ddev/.downloads/files</code>. If nothing has to be done to obtain the files, this step can run <code>true</code>.</li> <li><code>files_import_command</code>: (optional) A script that imports the downloaded files. There are a number of situations where it\u2019s messy to push a directory of files around, and one can put it directly where it\u2019s needed. The localfile example uses this technique.</li> <li><code>db_push_command</code>: A script that determines how DDEV should push a database. Its job is to take a gzipped database dump from <code>/var/www/html/.ddev/.downloads/db.sql.gz</code> and load it on the hosting provider.</li> <li><code>files_push_command</code>: A script that determines how DDEV push user-generated files to upstream. Its job is to copy the files from the project\u2019s user-files directories (<code>$DDEV_FILES_DIRS</code>) to the correct places on the upstream provider.</li> </ul> <p>The environment variables provided to custom commands are also available for use in these recipes.</p> <p>There are hooks available to execute commands before and after each pull or push: <code>pre-pull</code>, <code>post-pull</code>, <code>pre-push</code>, <code>post-push</code>. These could be for example a <code>ddev snapshot</code> to backup the database before a pull or a specific task to clear/warm-up caches of your application.</p>"},{"location":"users/providers/#example-integrations-and-hints","title":"Example Integrations and Hints","text":"<ul> <li>All of the supplied integrations are examples of what you can do.</li> <li>You can name a provider anything you want. For example, an Acquia integration doesn\u2019t have to be named \u201cacquia\u201d, it can be named \u201cupstream\u201d. This is a great technique for downloading a particular multisite.</li> </ul>"},{"location":"users/providers/#provider-debugging","title":"Provider Debugging","text":"<p>You can uncomment the <code>set -x</code> in each stanza to see more of what\u2019s going on. It really helps. Watch it as you do a <code>ddev pull &lt;whatever&gt;</code>.</p> <p>Although the various commands could be executed on the host or in other containers if configured that way, most commands are executed in the web container. So the best thing to do is to <code>ddev ssh</code> and manually execute each command you want to use. When you have it right, use it in the YAML file.</p>"},{"location":"users/providers/acquia/","title":"Acquia Integration","text":"<p>DDEV provides integration with the Acquia Cloud Platform, which allows Acquia users to quickly download and provision a project from Acquia in a local DDEV-managed environment.</p> <p>DDEV\u2019s Acquia integration pulls database and files from an existing project into your local system so you can develop locally.</p>"},{"location":"users/providers/acquia/#acquia-quickstart","title":"Acquia Quickstart","text":"<ol> <li>Get your Acquia API token from Account Settings \u2192 API Tokens.</li> <li>Make sure you\u2019ve added your SSH key to your Acquia account in Account Settings \u2192 SSH Keys.</li> <li>Run <code>ddev auth ssh</code>. (Typically once per DDEV session, not every pull.)</li> <li> <p>In <code>~/.ddev/global_config.yaml</code> add or update the <code>web_environment</code> section with the API keys:</p> <pre><code>web_environment:\n    - ACQUIA_API_KEY=xxxxxxxx\n    - ACQUIA_API_SECRET=xxxxx\n</code></pre> <p>You can also do this with:</p> <pre><code>ddev config global --web-environment-add=\"ACQUIA_API_KEY=xxxxxxxx,ACQUIA_API_SECRET=xxxxx\"\n</code></pre> <p>What if I have more than one API key?</p> <p>To use multiple API keys for different projects, add them to your per-project configuration using the <code>.ddev/config.local.yaml</code> file instead. This file is gitignored by default.</p> <pre><code>web_environment:\n    - ACQUIA_API_KEY=xxxxxxxx\n    - ACQUIA_API_SECRET=xxxxx\n</code></pre> </li> <li> <p>In the project <code>.ddev/config.yaml</code> add the <code>ACQUIA_ENVIRONMENT_ID</code> environment variable:</p> <pre><code>web_environment:\n    - ACQUIA_ENVIRONMENT_ID=yoursite.dev\n</code></pre> <p>You can also do this with:</p> <pre><code>ddev config --web-environment-add=\"ACQUIA_ENVIRONMENT_ID=yoursite.dev\"\n</code></pre> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li>Use <code>ddev pull acquia</code> to pull the project database and files.</li> <li>Optionally use <code>ddev push acquia</code> to push local files and database to Acquia. Be aware that <code>ddev push</code> is a command that can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/acquia/#usage","title":"Usage","text":"<p><code>ddev pull acquia</code> will connect to the Acquia Cloud Platform to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</p>"},{"location":"users/providers/lagoon/","title":"Lagoon Integration","text":"<p>DDEV provides integration with Lagoon, allowing users to quickly sync the files and database from a Lagoon environment to the local DDEV project.</p>"},{"location":"users/providers/lagoon/#lagoon-per-project-configuration","title":"Lagoon Per-Project Configuration","text":"<ol> <li>Check out the Lagoon project and configure it by running <code>ddev config</code>. You\u2019ll want to run <code>ddev start</code> and make sure the basic functionality is working.</li> <li> <p>Add <code>LAGOON_PROJECT</code> and <code>LAGOON_ENVIRONMENT</code> variables to your project using <code>'web_environment'</code> in its YAML configuration or a <code>.ddev/.env</code> file. For example:</p> <pre><code>web_environment:\n    - LAGOON_PROJECT=&lt;project-name&gt;\n    - LAGOON_ENVIRONMENT=&lt;environment-name&gt;\n</code></pre> <p>You can also do this with:</p> <pre><code>ddev config --web-environment-add=\"LAGOON_PROJECT=&lt;project-name&gt;,LAGOON_ENVIRONMENT=&lt;environment-name&gt;\"\n</code></pre> </li> <li> <p>Configure an SSH key for your Lagoon user.</p> </li> <li>Run <code>ddev auth ssh</code> to make your SSH key available in the project\u2019s web container.</li> <li>Run <code>ddev restart</code>.</li> <li>Run <code>ddev pull lagoon</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally run <code>ddev push lagoon</code> to push local files and database to Lagoon. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/lagoon/#usage","title":"Usage","text":"<ul> <li><code>ddev pull lagoon</code> will connect to the Lagoon environment to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> or <code>--skip-db</code> flags.</li> <li>If you need to change the <code>.ddev/providers/lagoon.yaml</code> recipe, you can change it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/providers/pantheon/","title":"Pantheon Integration","text":"<p>DDEV provides configurable integration with the Pantheon Website Management Platform, which allows Pantheon users to quickly download and provision a project from Pantheon in a local DDEV-managed environment.</p> <p>DDEV\u2019s Pantheon integration pulls an existing backup from an existing Pantheon site/environment into your local system. That means you must already have a Pantheon site with a backup in order to use it.</p>"},{"location":"users/providers/pantheon/#pantheon-quickstart","title":"Pantheon Quickstart","text":"<p>If you have DDEV installed, and have an active Pantheon account with an active site, you can follow this guide to spin up a Pantheon project locally.</p> <p><code>ddev pull pantheon</code> fails due to Terminus version mismatch</p> <p>See How to Downgrade Terminus in DDEV\u2019s Web Container and Customize Other Bundled Tools.</p> <ol> <li> <p>Get your Pantheon machine token:</p> <ol> <li>Log in to your Pantheon Dashboard and Generate a Machine Token for DDEV to use.</li> <li> <p>Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>.</p> <pre><code>web_environment:\n    - TERMINUS_MACHINE_TOKEN=your_token\n</code></pre> </li> </ol> <p>What if I have more than one API token?</p> <p>To use multiple API tokens for different projects, add them to your per-project configuration using the <code>.ddev/config.local.yaml</code> file instead. This file is gitignored by default.</p> <pre><code>web_environment:\n    - TERMINUS_MACHINE_TOKEN=your_token\n</code></pre> </li> <li> <p>Choose a Pantheon site and environment you want to use with DDEV. You can usually use the site name, but in some environments you may need the site ID, which is the long third component of your site dashboard URL. So if the site dashboard is at <code>https://dashboard.pantheon.io/sites/009a2cda-2c22-4eee-8f9d-96f017321555#dev/</code>, the site ID is <code>009a2cda-2c22-4eee-8f9d-96f017321555</code>.</p> </li> <li> <p>For <code>ddev push pantheon</code> make sure your public SSH key is configured in Pantheon under Account \u2192 SSH Keys.</p> </li> <li> <p>Check out the project codebase from Pantheon. Enable the \u201cGit Connection Mode\u201d and use <code>git clone</code> to check out the code locally.</p> </li> <li> <p>Configure the local checkout for DDEV using <code>ddev config</code>.</p> </li> <li> <p>Add <code>PANTHEON_SITE</code> and <code>PANTHEON_ENVIRONMENT</code> variables to your project <code>.ddev/config.yaml</code>:</p> <pre><code>web_environment:\n    - PANTHEON_SITE=yourprojectname\n    - PANTHEON_ENVIRONMENT=dev\n</code></pre> <p>You can also do this with <code>ddev config --web-environment-add=\"PANTHEON_SITE=yourprojectname,PANTHEON_ENVIRONMENT=dev\"</code>.</p> <p>You can usually use the site name, but in some environments you may need the site ID, which is the long third component of your site dashboard URL. So if the site dashboard is at <code>https://dashboard.pantheon.io/sites/009a2cda-2c22-4eee-8f9d-96f017321555#dev/</code>, the site ID is <code>009a2cda-2c22-4eee-8f9d-96f017321555</code>.</p> <p>Instead of setting the environment variables in configuration files, you can use <code>ddev pull pantheon --environment=PANTHEON_SITE=yourprojectname,PANTHEON_ENVIRONMENT=dev</code> for example.</p> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li> <p>Run <code>ddev pull pantheon</code>. DDEV will download the Pantheon database and files and bring them into the local DDEV environment. You should now be able to access the project locally.</p> </li> <li> <p>Optionally use <code>ddev push pantheon</code> to push local files and database to Pantheon. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</p> </li> </ol>"},{"location":"users/providers/platform/","title":"Upsun Fixed (Platform.sh) Integration","text":"<p>DDEV provides integration with the Upsun \u201cFixed\u201d Website Management Platform (formerly Platform.sh), which allows Upsun Fixed users to quickly download and provision a project from Upsun in a local DDEV-managed environment.</p> <p>Tip</p> <p>Consider using <code>ddev add-on get ddev/ddev-upsun</code> (ddev-upsun) for more complete Upsun Fixed integration.</p> <p>DDEV\u2019s Upsun Fixed integration pulls databases and files from an existing Upsun/Platform.sh-style site/environment into your local system so you can develop locally.</p>"},{"location":"users/providers/platform/#upsun-fixed-platformsh-global-configuration","title":"Upsun Fixed (Platform.sh) Global Configuration","text":"<p>You need to obtain and configure an API token first. This is only needed once.</p> <ol> <li>Login to the Upsun Dashboard and go to Account \u2192 API Tokens. Create an API token DDEV can use.</li> <li> <p>Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>:</p> <pre><code>web_environment:\n    - PLATFORMSH_CLI_TOKEN=abcdeyourtoken\n</code></pre> <p>You can also do this with:</p> <pre><code>ddev config global --web-environment-add=\"PLATFORMSH_CLI_TOKEN=abcdeyourtoken\"`\n</code></pre> <p>What if I have more than one API token?</p> <p>To use multiple API tokens for different projects, add them to your per-project configuration using the <code>.ddev/config.local.yaml</code> file instead. This file is gitignored by default.</p> <pre><code>web_environment:\n    - PLATFORMSH_CLI_TOKEN=abcdeyourtoken\n</code></pre> </li> </ol>"},{"location":"users/providers/platform/#upsun-fixedplatformsh-per-project-configuration","title":"Upsun Fixed/Platform.sh Per-Project Configuration","text":"<ol> <li>Check out the site and configure it with <code>ddev config</code>. You\u2019ll want to use <code>ddev start</code> and make sure the basic functionality is working.</li> <li> <p>You can optionally add <code>PLATFORM_PROJECT</code> and <code>PLATFORM_ENVIRONMENT</code> variables to your project, or rely on automatic derivation when possible.</p> <ul> <li> <p>Automatic derivation (no action required):</p> <ul> <li>If your repository contains <code>.platform/local/project.yaml</code> with an <code>id:</code> key, DDEV will derive <code>PLATFORM_PROJECT</code> from that file.</li> <li>If your local Git branch name corresponds to the Platform.sh environment name, DDEV will derive <code>PLATFORM_ENVIRONMENT</code> from the current Git branch.</li> <li>In typical setups where both <code>.platform/local/project.yaml</code> and a matching Git branch exist, you do not need to set <code>PLATFORM_PROJECT</code> or <code>PLATFORM_ENVIRONMENT</code> manually.</li> </ul> </li> <li> <p>Manual configuration (only if automatic derivation is not suitable):</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n    - PLATFORM_PROJECT=nf4amudfn23biyourproject\n    - PLATFORM_ENVIRONMENT=main\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\"\n</code></pre> </li> </ul> </li> </ul> <p>For more information about how to set environment variables for containers and services see Environment Variables for Containers and Services.</p> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li>Run <code>ddev pull platform</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally use <code>ddev push platform</code> to push local files and database to Upsun. The <code>ddev push</code> command can potentially damage your production site, so use it against a known environment and not against your production site..</li> </ol>"},{"location":"users/providers/platform/#managing-multiple-apps","title":"Managing Multiple Apps","text":"<p>If your environment contains more than one app, add <code>PLATFORM_APP</code> variable to your project:</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n    - ...\n    - PLATFORM_APP=app\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_APP=app\"\n</code></pre> </li> </ul>"},{"location":"users/providers/platform/#managing-multiple-databases","title":"Managing Multiple Databases","text":"<p>If your project has only one database, it will automatically be pulled into and pushed from DDEV\u2019s <code>db</code> database.</p> <p>If your project has multiple databases, they\u2019ll all be pulled into DDEV with their respective remote names. You can optionally designate a primary to use DDEV\u2019s default <code>db</code> database, which may be useful in some cases\u2014particularly if you\u2019ve been using the default solo-database behavior and happened to add another one to your project.</p> <p>You can designate the primary database using the <code>PLATFORM_PRIMARY_RELATIONSHIP</code> environment variable:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre> <p>You can also do the same thing by running <code>ddev pull platform</code> and using the <code>--environment</code> flag:</p> <pre><code>ddev pull platform --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre>"},{"location":"users/providers/platform/#usage","title":"Usage","text":"<ul> <li><code>ddev pull platform</code> will connect to Upsun to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</li> <li>If you need to change the <code>platform.yaml</code> recipe, you can change it or copy it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/providers/upsun/","title":"Upsun Integration","text":"<p>DDEV provides integration with the Upsun by Platform hosting system, allowing Upsun users to easily download database and files from Upsun to a local DDEV-managed environment.</p> <p>Tip</p> <p>Consider using <code>ddev add-on get ddev/ddev-upsun</code> (ddev-upsun) for more complete Upsun integration.</p> <p>DDEV\u2019s Upsun integration pulls databases and files from an existing Upsun site/environment into your local system so you can develop locally.</p>"},{"location":"users/providers/upsun/#upsun-global-configuration","title":"Upsun Global Configuration","text":"<p>You need to obtain and configure an API token first. This only needs to be done once.</p> <ol> <li>Login to the Upsun Dashboard and go to My Profile \u2192 API Tokens. Create an API token DDEV can use.</li> <li> <p>Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>:</p> <pre><code>web_environment:\n    - UPSUN_CLI_TOKEN=abcdeyourtoken\n</code></pre> <p>You can also do this with:</p> <pre><code>ddev config global --web-environment-add=\"UPSUN_CLI_TOKEN=abcdeyourtoken\"\n</code></pre> <p>What if I have more than one API token?</p> <p>To use multiple API tokens for different projects, add them to your per-project configuration using the <code>.ddev/config.local.yaml</code> file instead. This file is gitignored by default.</p> <pre><code>web_environment:\n    - UPSUN_CLI_TOKEN=abcdeyourtoken\n</code></pre> </li> </ol>"},{"location":"users/providers/upsun/#upsun-per-project-configuration","title":"Upsun Per-Project Configuration","text":"<ol> <li>Check out the Upsun site and configure it with <code>ddev config</code>. You\u2019ll want to use <code>ddev start</code> and make sure the basic functionality is working.</li> <li> <p>Add <code>PLATFORM_PROJECT</code> and <code>PLATFORM_ENVIRONMENT</code> variables to your project, or rely on automatic derivation when possible.</p> <ul> <li> <p>Automatic derivation (no action required):</p> <ul> <li>If your repository contains <code>.upsun/local/project.yaml</code> with an <code>id:</code> key, DDEV will derive <code>PLATFORM_PROJECT</code> from that file.</li> <li>If your local Git branch name corresponds to the Upsun environment name, DDEV will derive <code>PLATFORM_ENVIRONMENT</code> from the current Git branch.</li> <li>In typical setups where both <code>.upsun/local/project.yaml</code> and a matching Git branch exist, you do not need to set <code>PLATFORM_PROJECT</code> or <code>PLATFORM_ENVIRONMENT</code> manually.</li> </ul> </li> <li> <p>Manual configuration (only if automatic derivation is not suitable):</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n    - PLATFORM_PROJECT=nf4amudfn23biyourproject\n    - PLATFORM_ENVIRONMENT=main\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\"\n</code></pre> </li> </ul> </li> </ul> <p>For more information about how to set environment variables for containers and services see Environment Variables for Containers and Services.</p> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li>Run <code>ddev pull upsun</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally use <code>ddev push upsun</code> to push local files and database to Upsun. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/upsun/#managing-multiple-apps","title":"Managing Multiple Apps","text":"<p>If your environment contains more than one app, add <code>PLATFORM_APP</code> variable to your project:</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n    - ...\n    - PLATFORM_APP=app\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_APP=app\"\n</code></pre> </li> </ul>"},{"location":"users/providers/upsun/#managing-multiple-databases","title":"Managing Multiple Databases","text":"<p>If your project has only one database, it will automatically be pulled into and pushed from DDEV\u2019s <code>db</code> database.</p> <p>If your project has multiple databases, they\u2019ll all be pulled into DDEV with their respective remote names. You can optionally designate a primary to use DDEV\u2019s default <code>db</code> database, which may be useful in some cases\u2014particularly if you\u2019ve been using the default solo-database behavior and happened to add another one to your project.</p> <p>You can designate the primary database using the <code>PLATFORM_PRIMARY_RELATIONSHIP</code> environment variable:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre> <p>You can also do the same thing by running <code>ddev pull upsun</code> and using the <code>--environment</code> flag:</p> <pre><code>ddev pull upsun --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre>"},{"location":"users/providers/upsun/#usage","title":"Usage","text":"<ul> <li><code>ddev pull upsun</code> will connect to Upsun to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</li> <li>If you need to change the <code>upsun.yaml</code> recipe, you can change it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/topics/","title":"Hosting, Deployment, and Sharing","text":"<p>DDEV does not provide capabilities for deploying your code, as it\u2019s focused on being a local development solution. Teams almost universally use Git to manage their code and some Git provider like GitHub or GitLab to store it. They use many different types of deployment tools to actually get the code to their upstream servers or integration environments. For local development, DDEV provides capabilities to pull upstream databases and user-generated files as well as push those in some circumstances.</p> <ul> <li>Sharing your project</li> <li>Hosting with DDEV</li> <li>Remote Docker environments</li> <li>Hosting integrations including Acquia, Lagoon, Pantheon, Upsun, rsync-based solutions, Git-based solutions, local files (like Dropbox), etc.</li> </ul>"},{"location":"users/topics/hosting/","title":"Hosting with DDEV","text":"<p>Experimental Feature!</p> <p>Hosting with DDEV is not a replacement for scalable, managed hosting. It is not known how much traffic can be handled this way. Lots of people really like it for a number of uses though.</p> <p>Lightweight hosting with Let\u2019s Encrypt for HTTPS support is a popular DDEV feature. You can run DDEV on a public web server, point DNS to it, and use it as a hosting environment.</p> <p>This can be appropriate for many sites with modest traffic expectations, and works great for sites with special requirements (old versions of PHP, old database servers, etc.) A number of teams use it for continuous integration (CI) and for staging and demonstration sites.</p> <p>There is no security team behind this approach, although efforts have been made to secure the approach with hardened Docker images and removal of tools like <code>sudo</code>.</p> <p>Here\u2019s how to try it for yourself:</p> <ol> <li>Install DDEV on an internet-connected Linux server. (You\u2019re responsible for your firewall and maintenance of the server!)</li> <li>On Debian/Ubuntu, you can set up a simple firewall with <code>ufw allow 80 &amp;&amp; ufw allow 443 &amp;&amp; ufw allow 22 &amp;&amp; ufw enable</code>.</li> <li>Point DNS for the site you\u2019re going to host to the server.</li> <li>Before proceeding, your system and your project must be accessible on the internet on port 80 and your project DNS name (<code>myproject.example.com</code>) must resolve to the appropriate server.</li> <li>Configure your project with <code>ddev config</code>.</li> <li>Import your database and files using <code>ddev import-db</code> and <code>ddev import-files</code>.</li> <li>Save all databases with <code>ddev snapshot --all</code> before beginning, so you can restore your database if you have to change the name of the project.</li> <li> <p>Tell DDEV to listen on all network interfaces, omit the SSH agent, use hardened images, and enable Let\u2019s Encrypt:</p> <pre><code>ddev config global --router-bind-all-interfaces --omit-containers=ddev-ssh-agent --use-hardened-images --performance-mode=none --use-letsencrypt --letsencrypt-email=you@example.com\n</code></pre> </li> <li> <p>Use a <code>.ddev/config.prod.yaml</code> to provide overrides for project configuration, rather than changing the <code>.ddev/config.yaml</code>, so that your checked-in local development code works as well as possible. An example <code>.ddev/config.prod.yaml</code> might be:</p> <pre><code>project_tld: com\nadditional_hostnames:\n    - hobobiker\n    - www.hobobiker\ntimezone: America/Denver\n</code></pre> <p>Complex configuration with apex domains</p> <p>Unfortunately, the <code>traefik</code> integration with Let\u2019s Encrypt does not work if you have hostnames specified that are not resolvable, so every single hostname referenced must be resolvable in DNS. (You can use <code>additional_fqdns</code> as well as <code>additional_hostnames</code>, but all combinations must be resolvable in DNS.) Some examples:</p> <p>Project name = example, URL = <code>example.com</code>, also serving <code>www.example.com</code> and <code>mysite.com</code> <pre><code>project_tld: com\nname: example\nadditional_hostnames:\n    - www.example\nadditional_fqdns:\n    - mysite.com\n</code></pre></p> <p>Project name = <code>stories</code>, URL = <code>stories.example.org</code></p> <pre><code>name: stories\nproject_tld: example.org\n</code></pre> </li> <li> <p>If you want to redirect HTTP to HTTPS, edit the <code>.ddev/traefik/config/&lt;projectname&gt;.yaml</code> to remove the <code>#ddev-generated</code> and uncomment the <code>middlewares:</code> and <code>- \"redirectHttps\"</code> lines in the HTTP router section.</p> </li> <li>Run <code>ddev start</code> and visit your site. With some CMSes, you may also need to clear your cache.</li> <li> <p>If you see trouble with Let\u2019s Encrypt <code>ACME</code> failures, you can temporarily switch to the <code>ACME</code> staging server, and avoid getting rate-limited while you are experimenting. The certificates it serves will not be valid, but you\u2019ll see that they\u2019re coming from Let\u2019s Encrypt anyway. Add a <code>~/.ddev/traefik/static_config.staging.yaml</code> with the contents:</p> <pre><code>certificatesResolvers:\n    acme-tlsChallenge:\n        acme:\n            caServer: \"https://acme-staging-v02.api.letsencrypt.org/directory\"\n</code></pre> </li> </ol> <p>You may have to restart DDEV with <code>ddev poweroff &amp;&amp; ddev start --all</code> if Let\u2019s Encrypt has failed for some reason or the DNS name is not yet resolving. (Use <code>docker logs -f ddev-router</code> to see Let\u2019s Encrypt activity.)</p>"},{"location":"users/topics/hosting/#additional-server-setup","title":"Additional Server Setup","text":"<ul> <li>Depending on how you\u2019re using this, you may want to set up automated database and file backups\u2014ideally off-site\u2014like you would on any production system. Many CMSes have modules/plugins to allow this, and you can use <code>ddev export-db</code> or <code>ddev snapshot</code> as you see fit and do the backup on the host.</li> <li>You may want to allow your host system to send email. On Debian/Ubuntu <code>sudo apt-get install postfix</code>. Typically you\u2019ll need to set up reverse DNS for your system, and perhaps SPF and/or DKIM records to for more reliable delivery to other mail systems.</li> <li> <p>You may want to generally tailor your PHP settings for hosting rather than local development. Error-reporting defaults in <code>php.ini</code>, for example, may be too verbose and expose too much information publicly. You may want something less:</p> <pre><code>; Error handling and logging\nerror_reporting = E_ALL\ndisplay_errors = On\ndisplay_startup_errors = On\nlog_errors = On\n</code></pre> </li> <li> <p>To make DDEV start sites on system boot, you\u2019ll want to set up a <code>systemd</code> unit on systems like Debian/Ubuntu and Fedora. For example, a file named <code>/etc/systemd/system/ddev.service</code> containing:</p> <pre><code># Start DDEV when system starts (after Docker)\n# Stop DDEV when Docker shuts down\n# Start with `sudo systemctl start ddev`\n# Enable on boot with `sudo systemctl enable ddev`\n# Make sure to edit the User= for your user and the\n# full path to `ddev` on your system.\n# Optionally give a list of sites instead of --all\n[Unit]\nDescription=DDEV sites\nAfter=multi-user.target\nRequires=docker.service\nPartOf=docker.service\n[Service]\nUser=rfay\nType=oneshot\nExecStart=/usr/local/bin/ddev start --all\nRemainAfterExit=true\nExecStop=/usr/local/bin/ddev poweroff\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>You\u2019ll likely want to turn off PHP errors to screen in a <code>.ddev/php/noerrors.ini</code>:</p> <pre><code>display_errors = Off\ndisplay_startup_errors = Off\n</code></pre> </li> </ul>"},{"location":"users/topics/hosting/#troubleshooting","title":"Troubleshooting","text":"<ul> <li><code>docker logs -f ddev-router</code> is a great way to see what\u2019s going on with the router.</li> <li> <p>You may want to see more than just error output. You can enable debug output with the command below. You can make additional changes to the logging level as needed.</p> <pre><code>cp ~/.ddev/traefik/static_config.loglevel.yaml.example ~/.ddev/traefik/static_config.loglevel.yaml\nddev poweroff\n</code></pre> </li> <li> <p>Do not rename projects without going through the proper process in the FAQ, and make sure you don\u2019t have conflicting <code>additional_hostnames</code> or <code>additional_fqdns</code> between projects.</p> </li> <li>If you\u2019re having trouble with a particular project\u2019s Traefik configuration, try <code>docker exec -it ddev-router bash -c \"rm -f config/&lt;projectname&gt;.yaml\"</code> and <code>rm -rf .ddev/traefik</code> in the project, then <code>ddev poweroff &amp;&amp; ddev start</code>. This deletes all existing Traefik configuration for that project and it will be regenerated.</li> </ul>"},{"location":"users/topics/hosting/#caveats","title":"Caveats","text":"<ul> <li>It\u2019s unknown how much traffic a given server and Docker setup can sustain, or what the results will be if the traffic is more than the server can handle.</li> <li>DDEV does not provide outgoing SMTP mail handling service, and the development-focused Mailpit feature is disabled if you\u2019re using <code>use_hardened_images</code>. You can provide SMTP service a number of ways, but the recommended way is to use SMTP in your application via a third-party transactional email service such as SendGrid, Postmark, or Mailgun. This is the best way to ensure mail is actually delivered.</li> <li>You may need an external cron trigger for some CMSes.</li> <li>Debugging Let\u2019s Encrypt failures requires viewing the <code>ddev-router</code> logs with <code>docker logs ddev-router</code>.</li> <li>A malicious attack on a website hosted with <code>use_hardened_images</code> will likely not be able to do anything significant to the host, but it can certainly change your code, which is mounted on the host.</li> </ul> <p>When <code>use_hardened_images</code> is enabled, Docker runs the web image as an unprivileged user, and the container does not have sudo. However, any Docker server hosted on the internet is a potential vulnerability. Keep your packages up to date and make sure your firewall does not allow access to ports other than (normally) 22, 80, and 443.</p> <p>There are no warranties implied or expressed.</p>"},{"location":"users/topics/remote-docker/","title":"Remote Docker Environments","text":""},{"location":"users/topics/remote-docker/#remote-docker-instances","title":"Remote Docker Instances","text":"<p>You can use remote Docker instances, whether on the internet, inside your network, or running in a virtual machine.</p> <ul> <li> <p>On the remote machine, the Docker port must be exposed if it\u2019s not already. See instructions for how to do this on a systemd-based remote server. Be aware that this has serious security implications and must not be done without taking those into consideration. In fact, <code>dockerd</code> will complain:</p> <p>Binding to IP address without <code>--tlsverify</code> is insecure and gives root access on this machine to everyone who has access to your network.  host=\u201dtcp://0.0.0.0:2375\u201d.</p> </li> <li> <p>If you do not already have the Docker client installed (like you would from Docker Desktop), install only the client with <code>brew install docker</code>.</p> </li> <li>Create a Docker context that points to the remote Docker instance. For example, if the remote hostname is <code>debian-11</code>, then <code>docker context create debian-11 --docker host=tcp://debian-11:2375 &amp;&amp; docker context use debian-11</code>. Alternately, you can use the <code>DOCKER_HOST</code> environment variable, e.g. <code>export DOCKER_HOST=debian-11</code> or <code>export DOCKER_HOST=tcp://debian-11:2375</code>.</li> <li>Make sure you can access the remote machine using <code>docker ps</code>.</li> <li>Bind mounts cannot work on a remote Docker setup, so you must use <code>ddev config global --no-bind-mounts</code>. This will cause DDEV to push needed information to and from the remote Docker instance when needed. This also automatically turns on Mutagen caching.</li> <li>You may want to use a FQDN other than <code>*.ddev.site</code> because the DDEV site will not be at <code>127.0.0.1</code>. For example, <code>ddev config --additional-fqdns=debian-11</code> and then use <code>https://debian-11</code> to access the site.</li> <li>If the Docker host is reachable on the internet, you can actually enable real HTTPS for it using Let\u2019s Encrypt as described in Hosting with DDEV. Make sure port 2375 is not available on the internet.</li> </ul>"},{"location":"users/topics/remote-docker/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<p>A number of people have found it easy to test their projects using DDEV on a CI system like GitHub Actions, Travis CI, or CircleCI. Instead of setting up a hosting environment for testing, they start the project using DDEV and run their tests.</p> <p>Examples of this approach are demonstrated in Codeception Tests in Travis CI with DDEV and Selenium and Setup DDEV in GitHub Workflows.</p>"},{"location":"users/topics/remote-docker/#integration-of-ddev-docker-images-into-other-projects","title":"Integration of DDEV Docker Images Into Other Projects","text":"<p>You can use DDEV Docker images outside the context of the DDEV environment. People have used the <code>ddev-webserver</code> image for running tests in PhpStorm, for example.</p>"},{"location":"users/topics/sharing/","title":"Sharing Your Project","text":"<p>Even though DDEV is intended for local development on a single machine, not as a public server, there are a number of reasons you might want to expose your work in progress more broadly:</p> <ul> <li>Testing with a mobile device</li> <li>Sharing on a local network so that everybody on the local network can see your project</li> <li>Some CI applications</li> </ul> <p>There are at least three different ways to share a running DDEV project outside the local developer machine:</p> <ul> <li><code>ddev share</code> (using ngrok to share over the internet)</li> <li>Local name resolution and sharing the project on the local network</li> <li>Sharing the HTTP port of the local machine on the local network</li> </ul>"},{"location":"users/topics/sharing/#using-ddev-share-easiest","title":"Using <code>ddev share</code> (Easiest)","text":"<p><code>ddev share</code> proxies the project via ngrok for sharing your project with others on your team or around the world. It\u2019s built into DDEV and requires an ngrok.com account. Run <code>ddev share</code> and then give the resultant URL to your collaborator or use it on your mobile device.</p> <p>ngrok in depth</p> <p>Run <code>ddev share -h</code> for more, and consider reading ngrok\u2019s getting started guide and DrupalEasy\u2019s more detailed walkthrough of the <code>share</code> command.</p> <p>CMSes like WordPress and Magento 2 make this a little harder by only responding to a single base URL that\u2019s coded into the database. ngrok allows you to use one static domain for free so you won\u2019t have to frequently change the base URL.</p>"},{"location":"users/topics/sharing/#setting-up-a-stable-ngrok-domain","title":"Setting up a Stable ngrok Domain","text":"<ol> <li>Get a free static domain from ngrok. Let\u2019s say we got <code>wp23.ngrok-free.app</code>.</li> <li>Pass the domain to the ngrok args:<ul> <li>In <code>.ddev/config.yaml</code>, <code>ngrok_args: --domain wp23.ngrok-free.app</code> will result in ngrok always using <code>wp23.ngrok-free.app</code> as the URL, so it\u2019s not changing on you all the time.</li> <li>Alternatively you can pass the domain directly to <code>ddev share --ngrok-args \"--domain wp23.ngrok-free.app\"</code></li> </ul> </li> </ol>"},{"location":"users/topics/sharing/#wordpress-change-the-url-with-wp-search-replace","title":"WordPress: Change the URL with <code>wp search-replace</code>","text":"<p>WordPress only has the one base URL, but the <code>wp</code> command is built into DDEV\u2019s web container.</p> <p>This set of steps assumes an ngrok domain of <code>wp23.ngrok-free.app</code> and a starting URL of <code>https://wordpress.ddev.site</code>.</p> <ul> <li>Configure <code>.ddev/config.yaml</code> to use a custom domain: <code>ngrok_args: --domain wp23.ngrok-free.app</code>.</li> <li>Make a backup of your database with <code>ddev export-db</code> or <code>ddev snapshot</code>.</li> <li>Edit <code>wp-config-ddev.php</code> (or whatever your config is) to change <code>WP_HOME</code>, for example, <code>define('WP_HOME', 'https://wp23.ngrok-free.app');</code></li> <li><code>ddev wp search-replace https://wordpress.ddev.site https://wp23.ngrok-free.app</code>, assuming your project is configured for <code>https://wordpress.ddev.site</code> and your <code>ngrok_args</code> are configured for the <code>wp23.ngrok-free.app</code> domain.</li> <li>Now run <code>ddev share</code>.</li> </ul>"},{"location":"users/topics/sharing/#magento2-change-the-url-with-magento-tool","title":"Magento2: Change the URL with Magento Tool","text":"<p>This set of steps assumes an ngrok domain <code>mg2.ngrok-free.app</code>:</p> <ul> <li>Configure <code>.ddev/config.yaml</code> to use a custom domain with <code>ngrok_args: --domain mg2.ngrok-free.app</code>.</li> <li>Make a backup of your database.</li> <li>Edit your <code>.ddev/config.yaml</code>.</li> <li>Run <code>ddev ssh</code>.</li> <li>Run <code>bin/magento setup:store-config:set --base-url=\"https://mg2.ngrok-free.app/</code>.</li> <li>Run <code>ddev share</code> and you\u2019ll see your project at <code>mg2.ngrok-free.app</code>.</li> </ul>"},{"location":"users/topics/sharing/#using-nipio-or-custom-name-resolution-locally","title":"Using nip.io or Custom Name Resolution Locally","text":"<p>Another solution is to not use <code>*.ddev.site</code> as your project URLs, but to use DNS that you control and that points to the host machine where your project lives. In general, you\u2019ll want to use HTTP URLs with this approach, because it requires manual configuration of the client machine to get it to trust the development certificate that DDEV uses and configures with <code>mkcert</code> on the local machine.</p> <ul> <li>Use nip.io to point a domain name to your host. If your computer\u2019s IP address is 192.168.5.101, you can use a domain name like <code>mysite.192.168.5.101.nip.io</code> and that domain name will point to your computer. Add that to your project\u2019s <code>additional_fqdns</code> with <code>ddev config --additional-fqdns=mysite.192.168.5.101.nip.io</code> and <code>ddev start</code>. Now people in your internal network should be able to <code>ping mysite.192.168.5.101.nip.io</code> if your firewall allows it. (If you have other convenient ways to create a DNS entry for this, you can use those instead of nip.io.)</li> <li>Configure <code>~/.ddev/global_config.yaml</code> to bind to all ports: <code>ddev config global --router-bind-all-interfaces &amp;&amp; ddev poweroff &amp;&amp; ddev start</code>.</li> <li>Now mobile apps or other computers which are on your local network should be able to access your project. Use the HTTP URL rather than the HTTPS URL because computers outside yours don\u2019t know how to trust the developer TLS certificate you\u2019re using. (You can run <code>ddev describe</code> to see the HTTP URL, but it\u2019s typically the same as the HTTPS URL, but with <code>http</code> instead of <code>https</code>.)</li> <li>Make sure your firewall allows access from your local network to the main interface you\u2019re using. In the example here, you should be able to ping 192.168.5.101 and <code>curl http://192.168.5.101</code> and get an answer in each case.</li> <li>If you\u2019re using WordPress or Magento 2, you\u2019ll need to change the base URL as described in the <code>ddev share</code> instructions above.</li> </ul>"},{"location":"users/topics/sharing/#exposing-a-host-port-and-providing-a-direct-url","title":"Exposing a Host Port and Providing a Direct URL","text":"<p>DDEV\u2019s web container also exposes an HTTP port directly, in addition to the normal routing by name and via <code>ddev_router</code>. You can expose this port and it may be a useful approach in some situations.</p> <ul> <li>Configure the project <code>host_webserver_port</code> to a known port (that does not conflict with already configured ports). For example, using port 8080, <code>ddev config --host-webserver-port=8080 --bind-all-interfaces</code>. This will configure the host-bound port to 8080 and allow it to bind to all network interfaces so colleagues (or hackers) on your local network can access this project\u2019s ports.</li> <li>Make sure your firewall allows access to the port on your host machine.</li> <li>If you\u2019re using WordPress or Magento 2 you\u2019ll need to change the base URL as described in the <code>ddev share</code> instructions above.</li> <li>Each project on your computer must use different ports or you\u2019ll have port conflicts, and you can\u2019t typically use ports 80 or 443 because <code>ddev-router</code> is already using those for normal routing.</li> <li>If you don\u2019t want to run <code>ddev-router</code> at all, you can omit it globally with <code>ddev config global --omit-containers=ddev-router</code>. This is a specialty thing to do when you don\u2019t need the reverse proxy.</li> </ul> <p>Computers and mobile devices on your local network should now be able to access port 8080, on the (example) host address 192.168.5.23, so <code>http://192.168.5.23:8080</code> You\u2019ll probably want to use the HTTP URL; your coworker\u2019s browser will not trust the developer TLS certificate you\u2019re using.</p>"},{"location":"users/usage/","title":"Usage","text":"<p>This section covers day-to-day DDEV usage, reference material, and common support details.</p>"},{"location":"users/usage/#common-tasks","title":"Common Tasks","text":"<ul> <li>Using the <code>ddev</code> Command</li> <li>Database Management</li> <li>Managing CMS Settings</li> <li>Managing Projects</li> <li>Troubleshooting</li> <li>Using DDEV Offline</li> <li>Upgrading DDEV</li> </ul>"},{"location":"users/usage/#reference","title":"Reference","text":"<ul> <li>How DDEV Works</li> <li>Commands</li> <li>Built-in Developer Tools</li> <li>Diagnostics</li> <li>Uninstalling</li> </ul>"},{"location":"users/usage/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ</li> <li>Support</li> <li>Code of Conduct</li> </ul>"},{"location":"users/usage/architecture/","title":"How DDEV Works","text":"<p>DDEV is a Go application that stores its configuration in files on your workstation. It uses those blueprints to mount your project files into Docker containers that facilitate the operation of a local development environment.</p> <p>DDEV writes and uses docker-compose files for you, which is a detail you can cheerfully ignore unless you\u2019re Docker-curious or defining your own services.</p>"},{"location":"users/usage/architecture/#directory-tour","title":"Directory Tour","text":"<p>DDEV stores configuration in two places: a single <code>.ddev</code> directory in your home folder (can be moved to another location), and a <code>.ddev</code> directory for each project you set up.</p> <p>The global configuration directory is used to keep track of your projects and any of the global settings that apply across all projects. You\u2019ll probably spend more time working with the per-project <code>.ddev</code> directories for their configuration and overrides.</p>"},{"location":"users/usage/architecture/#project-files","title":"Project Files","text":"<p>A project\u2019s <code>.ddev</code> directory can be intimidating at first, so let\u2019s take a look at what lives in there.</p> <p>Yours May Differ Slightly</p> <p>You may have some directories or files that aren\u2019t listed here, likely added by custom services. For example, if you see a <code>solr</code> directory, it probably pertains to a custom Solr add-on service.</p> <code>addon-metadata</code> directory Contains metadata about add-on services that have been added to the project. This allows commands like <code>ddev add-on list --installed</code> and <code>ddev add-on remove</code> to work, see Using Add-ons. <code>apache</code> directory Default Apache configuration when using <code>webserver_type: apache-fpm</code>, which can be customized. <code>commands</code> subdirectories Project custom shell commands that can run on the host or inside a container. <code>config.yaml</code> The project\u2019s main configuration file. <code>config.*.yaml</code> files Environmental overrides for parts of <code>config.yaml</code>. <code>db-build</code> directory Can be used to provide a custom Dockerfile for the database container. <code>db_snapshots</code> directory Where snapshots go when you run the <code>ddev snapshot</code> command. You can safely delete anything in here that you don\u2019t need. <code>docker-compose.*.yaml</code> files Where Docker-friendly users can provide their own custom compose files that add or override services. Read more in Additional Service Configurations &amp; Add-ons. <code>homeadditions</code> directory Files to be copied into the web container on startup. You could use this, for example, to override the default home directory contents (<code>.profile</code>, <code>.bashrc</code>, <code>.composer</code>, <code>.ssh</code>), or include scripts that you\u2019d like to be available inside the container. (You can do the same thing globally in <code>~/.ddev/homeadditions</code>.) Check out the homeadditions docs for more. <code>mutagen</code> directory Contains <code>mutagen.yml</code>, where you can override the default Mutagen configuration. <code>mysql</code> directory Contains optional <code>mysql</code> or <code>mariadb</code> configuration. <code>nginx</code> directory Can be used for add-on nginx snippets. <code>nginx_full</code> directory Contains the nginx configuration used by the web container, which can be customized. <code>postgres</code> directory Contains <code>postgresql.conf</code>, which can be edited if needed. Remove the <code>#ddev-generated</code> line at the top to take it over. <code>providers</code> directory Contains examples and implementations to demonstrate how the <code>ddev pull</code> command can work with hosting providers. <code>traefik</code> directory Configures the <code>ddev-router</code> when it is using Traefik. <code>web-build</code> directory Can be used to provide a custom Dockerfile for the web container. <code>web-entrypoint.d</code> directory Custom scripts (named <code>*.sh</code>) in this directory will be run during web container startup, before the php-fpm server or other daemons are run. This can be useful, for example, for introducing environment variables into the context of the nginx and php-fpm servers. Use this carefully, because custom entrypoints can very easily break things. <code>xhprof</code> directory Contains the <code>xhprof_prepend.php</code> file that can be used to customize xhprof behavior for different types of websites."},{"location":"users/usage/architecture/#hidden-project-files","title":"Hidden Project Files","text":"<p>Files beginning with <code>.</code> are hidden because they shouldn\u2019t be fiddled with; most are regenerated, and thus overwritten, on every <code>ddev start</code>:</p> <code>.dbimageBuild</code> directory The generated Dockerfile used to customize the <code>db</code> container on first start. <code>.ddev-docker-compose-base.yaml</code> The base docker-compose file used to describe a project. <code>.ddev-docker-compose-full.yaml</code> The result of preprocessing <code>.ddev-docker-compose-base.yaml</code> using <code>docker-compose config</code>. Mostly it replaces environment variables with their values. <code>.gitignore</code> The <code>.gitignore</code> is generated by DDEV and should generally not be edited or checked in. (It gitignores itself to make sure you don\u2019t check it in.) It\u2019s generated on every <code>ddev start</code> and will change as DDEV versions change, so if you check it in by accident it will always be showing changes that you don\u2019t need to see in <code>git status</code>. <code>.homeadditions</code> Temporary directory used to consolidate global <code>homeadditions</code> with project-level <code>homeadditions</code>. You shouldn\u2019t ever have to look here. <code>.webimageBuild</code> directory The generated Dockerfile used to customize the web container on first start."},{"location":"users/usage/architecture/#global-files","title":"Global Files","text":"<p>There\u2019s only one global <code>.ddev</code> directory, which normally lives in your home directory: <code>~/.ddev</code> (<code>$HOME/.ddev</code>) or in <code>~/.config/ddev</code>. <code>~/.ddev</code> takes precedence if it exists, unless <code>$XDG_CONFIG_HOME</code> is set, in which case it will be <code>$XDG_CONFIG_HOME/ddev</code>.</p> <p>Where is my global <code>.ddev</code> config?</p> <p>Use <code>ddev version</code> (look at <code>global-ddev-dir</code>) to check which location is used for the <code>.ddev</code> global directory.</p> <p>What if I don\u2019t want to clutter up my <code>$HOME</code> with a <code>.ddev</code> directory?</p> <p>DDEV can use the <code>$XDG_CONFIG_HOME</code> environment variable from XDG Base Directory Specification to move <code>~/.ddev</code> to the <code>$XDG_CONFIG_HOME/ddev</code> directory if <code>$XDG_CONFIG_HOME</code> is defined:</p> <pre><code>ddev poweroff\n# permanently set environment variable using a directory that works for you\nexport XDG_CONFIG_HOME=\"$HOME/.config\"\n# restart the terminal and run:\nmv ~/.ddev ${XDG_CONFIG_HOME}/ddev\n</code></pre> <p>Otherwise, on Linux/WSL2 only, the default <code>$HOME/.config/ddev</code> can be used when <code>~/.config/ddev</code> exists and <code>~/.ddev</code> does not exist.  You can move the config directory with:</p> <pre><code>mv ~/.ddev ~/.config/ddev\n</code></pre> <code>global_config.yaml</code> This YAML file defines your global configuration, which consists of various config settings. <code>project_list.yaml</code> This YAML file defines your project list that lets DDEV keep track of the projects you\u2019ve added. <code>bin</code> directory This is where DDEV stores private executable binaries it needs, like <code>mutagen</code> and <code>docker-compose</code>. <code>commands</code> directory Directory for storing DDEV commands that should be available in containers, like <code>npm</code>, <code>artisan</code>, <code>cake</code> and <code>drush</code> for example. These are organized in subdirectories named for where they\u2019ll be used: <code>db</code>, <code>host</code>, and <code>web</code>. You can add your own custom commands here. <code>homeadditions</code> directory Like the per-project <code>homeadditions</code> directory, files you add here will automatically be copied into the web container\u2019s home directory. Files from the global homeadditions directory will be copied into every web container\u2019s home directory."},{"location":"users/usage/architecture/#hidden-global-files","title":"Hidden Global Files","text":"<p>Again, these files are mostly regenerated on every <code>ddev start</code> so it\u2019s best to leave them alone:</p> <code>.gitignore</code> Prevents files from getting checked in when they shouldn\u2019t be. <code>.router-compose-full.yaml</code> The complete, generated docker-compose directive used for DDEV\u2019s router. <code>.router-compose.yaml</code> The base docker-compose directive used in generating <code>.router-compose-full.yaml</code>. <code>router-compose.*.yaml</code> <code>docker-compose</code> files with the name <code>router-compose.*.yaml</code> can be used to override stanzas in the <code>.router-compose.yaml</code> file. <code>.ssh-auth-compose-full.yaml</code> The complete, generated docker-compose directive used for DDEV\u2019s SSH agent. <code>.ssh-auth-compose.yaml</code> The base docker-compose directive used in generating <code>.ssh-auth-compose-full.yaml</code>. <code>ssh-auth-compose.*.yaml</code> <code>docker-compose</code> files with the name <code>ssh-auth-compose.*.yaml</code> can be used to override stanzas in the <code>.ssh-auth-compose.yaml</code> file. <code>.sshimageBuild</code> Directory used for storing DDEV\u2019s generated <code>Dockerfile</code> used in building the SSH agent image. <code>.update</code> An empty file whose purpose is mysterious and intriguing. <p><code>.ddev_mutagen_data_directory</code></p> <p>DDEV uses a global <code>~/.ddev_mutagen_data_directory</code> for storing Mutagen sync data.</p>"},{"location":"users/usage/architecture/#container-architecture","title":"Container Architecture","text":"<p>It\u2019s easiest to think of DDEV as a set of little networked computers (Docker containers) that are in a different network from your workstation but still reachable from it.</p> <p>When you install or upgrade DDEV you\u2019re mostly installing a single <code>ddev</code> binary. When you use it, it downloads the Docker images it needs, and then starts them based on what\u2019s needed for your projects.</p> <ul> <li>The <code>ddev-webserver</code> container (one per project) runs <code>nginx</code> or <code>apache</code> and <code>php-fpm</code> for a single site, so it does all the basic work of a PHP-interpreting web server.</li> <li>The <code>ddev-dbserver</code> container (one per project) handles MariaDB/MySQL/PostgreSQL database management. It can be reached from the web server by the hostname <code>db</code> or with the more explicit name <code>ddev-&lt;projectname&gt;-db</code>.</li> <li>Additional add-on services may be there for a given project, for example <code>phpmyadmin</code>, <code>solr</code>, <code>elasticsearch</code>, or <code>memcached</code>.</li> </ul> <p>Although it\u2019s not common usage, different projects can communicate with each other as described in the FAQ.</p> <p>Now for the two oddball global containers (there\u2019s only one of each):</p> <ul> <li>The <code>ddev-router</code> container is a \u201creverse proxy\u201d. It takes incoming HTTP/S requests, looks up the hostname in the incoming URL, and routes it to the correct project\u2019s <code>ddev-webserver</code>. Depending on the project\u2019s configuration with <code>additional_hostnames</code> and <code>additional_fqdns</code>, it can route many different URLs to a single project\u2019s <code>ddev-webserver</code>. If, like most people, you use the named URLs like <code>https://something.ddev.site</code>, your request goes through the router. When you use the <code>127.0.0.1</code> URLs, the requests go directly to the <code>ddev-webserver</code>.</li> <li>The <code>ddev-ssh-agent</code> container runs an <code>ssh-agent</code> inside the Docker network so that after run <code>ddev auth ssh</code> all the different projects can use your SSH keys for outgoing requests\u2014like private Composer access or SCP from a remote host.</li> </ul> <p>Here\u2019s a basic diagram of how it works inside the Docker network:</p> <p></p>"},{"location":"users/usage/cli/","title":"Using the <code>ddev</code> Command","text":"<p>Type <code>ddev</code> or <code>ddev -h</code> in a terminal window to see the available DDEV commands. There are commands to configure a project, start, stop, describe, etc. Each command also has help using <code>ddev help &lt;command&gt;</code> or <code>ddev command -h</code>. For example, <code>ddev help snapshot</code> will show help and examples for the snapshot command.</p> <ul> <li><code>ddev config</code> configures a project\u2019s type and docroot, either interactively or with flags.</li> <li><code>ddev start</code> starts up a project.</li> <li><code>ddev launch</code> opens a web browser showing the project.</li> <li><code>ddev list</code> shows current projects and their state.</li> <li><code>ddev describe</code> gives all the info about the current project.</li> <li><code>ddev ssh</code> takes you into the web container.</li> <li><code>ddev exec &lt;command&gt;</code> executes a command inside the web container.</li> <li><code>ddev stop</code> stops a project and removes its memory usage (but does not throw away any data).</li> <li><code>ddev poweroff</code> stops all resources that DDEV is using and stops the Mutagen daemon if it\u2019s running.</li> <li><code>ddev delete</code> destroys the database and DDEV\u2019s knowledge of the project without touching your code.</li> <li><code>ddev add-on</code> adds an add-on service.</li> </ul>"},{"location":"users/usage/cli/#lots-of-other-commands","title":"Lots of Other Commands","text":"<ul> <li><code>ddev mysql</code> gives direct access to the MySQL client and <code>ddev psql</code> to the PostgreSQL <code>psql</code> client.</li> <li><code>ddev sequelace</code>, <code>ddev tableplus</code>, and <code>ddev querious</code> (macOS only, if the app is installed) give access to the Sequel Ace, TablePlus or Querious database browser GUIs.</li> <li><code>ddev dbeaver</code> (if installed) gives access to the DBeaver database browser GUI.</li> <li><code>ddev heidisql</code> (Windows/WSL2/Linux, if installed) gives access to the HeidiSQL database browser GUI.</li> <li><code>ddev import-db</code> and <code>ddev export-db</code> import or export SQL or compressed SQL files.</li> <li><code>ddev composer</code> runs Composer inside the container. For example, <code>ddev composer install</code> will do a full composer install for you without even needing Composer on your computer. See developer tools.</li> <li><code>ddev snapshot</code> makes a very fast snapshot of your database that can be easily and quickly restored with <code>ddev snapshot restore</code>.</li> <li><code>ddev share</code> requires ngrok and at least a free account on ngrok.com so you can let someone in the next office or on the other side of the planet see your project and what you\u2019re working on. <code>ddev share -h</code> gives more info about how to set up ngrok.</li> <li><code>ddev xdebug</code> enables Xdebug, <code>ddev xdebug off</code> disables it, and <code>ddev xdebug status</code> shows status. You can toggle Xdebug on and off easily using <code>ddev xdebug toggle</code>.</li> <li><code>ddev xhprof</code> enables xhprof, <code>ddev xhprof off</code> disables it, and <code>ddev xhprof status</code> shows status.</li> <li><code>ddev xhgui</code> enables XHGui, <code>ddev xhgui off</code> disables it, and <code>ddev xhgui status</code> shows status.</li> <li><code>ddev drush</code> (Drupal and Backdrop only) gives direct access to the <code>drush</code> CLI.</li> <li><code>ddev artisan</code> (Laravel only) gives direct access to the Laravel <code>artisan</code> CLI.</li> <li><code>ddev magento</code> (Magento2 only) gives access to the <code>magento</code> CLI.</li> <li><code>ddev console</code> (Symfony only) gives access to the <code>symfony console</code> CLI.</li> <li><code>ddev craft</code> (Craft CMS only) gives access to the <code>craft</code> CLI.</li> <li><code>ddev npm</code> gives direct access to the <code>npm</code> CLI.</li> <li><code>ddev npx</code> gives direct access to the <code>npx</code> CLI.</li> <li><code>ddev yarn</code> gives direct access to the <code>yarn</code> CLI.</li> <li><code>ddev cake</code> (CakePHP only) gives direct access to the <code>cake</code> CLI.</li> <li><code>ddev sake</code> (Silverstripe CMS only) gives direct access to the <code>sake</code> CLI.</li> <li><code>ddev typo3</code> (TYPO3 only) gives direct access to the <code>typo3</code> CLI.</li> <li><code>ddev wp</code> (WordPress only) gives direct access to the <code>wp</code> CLI.</li> </ul>"},{"location":"users/usage/cli/#nodejs-tools","title":"Node.js Tools","text":"<p><code>node</code>, <code>nodejs</code>, <code>npm</code>, <code>npx</code>, <code>nvm</code> and <code>yarn</code> are preinstalled in the web container. You can configure the default value of the installed Node.js version with the <code>nodejs_version</code> option in <code>.ddev/config.yaml</code> or with <code>ddev config --nodejs-version</code>. You can also override that with any value using the built-in <code>nvm</code> in the web container or with <code>ddev nvm</code>, for example <code>ddev nvm install 6</code>. There is also a <code>ddev yarn</code> command. (Note that since <code>nodejs_version</code> configuration can now specify any <code>node</code> version, including patch versions, it\u2019s preferred to using the less robust <code>ddev nvm</code> way of specifying the <code>node</code> version.)</p>"},{"location":"users/usage/cli/#more-bundled-tools","title":"More Bundled Tools","text":"<p>In addition to the commands listed above, there are lots of tools included inside the containers:</p> <ul> <li><code>ddev describe</code> tells how to access Mailpit, which captures email in your development environment.</li> <li>Composer, Git, Node.js, npm, nvm, symfony, and dozens of other tools are installed in the web container, and you can access them via <code>ddev ssh</code> or <code>ddev exec</code>.</li> <li><code>ddev logs</code> gets you web server logs; <code>ddev logs -s db</code> gets database server logs.</li> <li><code>sqlite3</code> and the <code>mysql</code> and <code>psql</code> clients are inside the web container (and <code>mysql</code> or <code>psql</code> client is also in the <code>db</code> container).</li> </ul>"},{"location":"users/usage/cli/#exporting-a-database","title":"Exporting a Database","text":"<p>You can export a database with <code>ddev export-db</code>, which outputs to stdout or with options to a file:</p> <pre><code>ddev export-db --file=/tmp/db.sql.gz\nddev export-db --gzip=false --file=/tmp/db.sql\nddev export-db &gt;/tmp/db.sql.gz\n</code></pre>"},{"location":"users/usage/cli/#ddev-import-files","title":"<code>ddev import-files</code>","text":"<p>To import static file assets for a project, such as uploaded images and documents, use the command <code>ddev import-files</code>. This command will prompt you to specify the location of your import asset, then import the assets into the project\u2019s upload directory. To define a custom upload directory, set the <code>upload_dirs</code> config option. If no custom upload directory is defined, the default will be used:</p> <ul> <li>For Backdrop projects, this is <code>files</code>.</li> <li>For Drupal projects, this is <code>sites/default/files</code>.</li> <li>For Magento 1 projects, this is the <code>media</code> directory.</li> <li>For Magento 2 projects, this is the <code>pub/media</code> directory.</li> <li>For Shopware projects, this is the <code>media</code> directory.</li> <li>For TYPO3 projects, this is the <code>fileadmin</code> directory.</li> <li>For WordPress projects, this is the <code>wp-content/uploads</code> directory.</li> </ul> <p>Other project types need a custom configuration to be able to use this command.</p> <pre><code>$ ddev import-files\nProvide the path to the source directory or archive you wish to import.\nPlease note: if the destination directory exists, it will be emptied and replaced with the\nimport assets specified here.\nPath to file(s): ~/workspace/d10/.tarballs/files.tgz\nYou provided an archive. Do you want to extract from a specific path in your\narchive? You may leave this blank if you wish to use the full archive contents.\nArchive extraction path:\nSuccessfully imported files for d10\n</code></pre> <p><code>ddev import-files</code> supports the following file types: <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.xz</code>, <code>.tar.bz2</code>, <code>.tgz</code>, or <code>.zip</code>.</p> <p>It can also import a directory containing static assets.</p> <p>If using a Tar or ZIP archive, the archive should contain only the files inside the files directory. For example in a Drupal site with files at <code>sites/default/files</code>, the archive should only contain the contents of the <code>files</code> directory; it should not contain a single <code>files</code> directory. To do this with the <code>tar</code> command, <code>cd</code> into the directory and create the archive there. An example Tar file creation is:</p> <pre><code>cd web/sites/default/files\ntar -czf ~/Downloads/files.tgz .\n</code></pre> <p>If you want to use <code>import-files</code> without answering prompts, use the <code>--source</code> or <code>-s</code> flag to provide the path to the import asset. If you\u2019re importing an archive, and wish to specify the path within the archive to extract, you can use the <code>--extract-path</code> flag in conjunction with the <code>--source</code> flag. Example:</p> <p><code>ddev import-files --source=/tmp/files.tgz</code></p> <p>When multiple <code>upload_dirs</code> are defined and you want to import to another upload dir than the first one, use the <code>--target</code> or <code>-t</code> flag to provide the path to the desired upload dir:</p> <p><code>ddev import-files --target=../private --source=/tmp/files.tgz</code></p> <p>See <code>ddev help import-files</code> for more examples.</p>"},{"location":"users/usage/cli/#snapshotting-and-restoring-a-database","title":"Snapshotting and Restoring a Database","text":"<p>The project database is stored in a Docker volume, but can be snapshotted (and later restored) with the <code>ddev snapshot</code> command. A snapshot is automatically taken when you run <code>ddev stop --remove-data</code>. For example:</p> <pre><code>ddev snapshot\nCreating database snapshot d9_20220107124831-mariadb_10.3.gz\nCreated database snapshot d9_20220107124831-mariadb_10.3.gz\n\nddev snapshot restore d9_20220107124831\nStopping db container for snapshot restore of 'd9_20220107124831-mariadb_10.3.gz'...\nRestored database snapshot d9_20220107124831-mariadb_10.3.gz\n</code></pre> <p>Snapshots are stored as gzipped files in the project\u2019s <code>.ddev/db_snapshots</code> directory, and the file created for a snapshot can be renamed as necessary. For example, if you rename the above <code>d9_20220107124831-mariadb_10.3.gz</code> file to <code>working-before-migration-mariadb_10.3.gz</code>, then you can use <code>ddev snapshot restore working-before-migration</code>. (The description of the database type and version\u2014<code>mariadb_10.3</code>, for example\u2014must remain intact.) To restore the latest snapshot add the <code>--latest</code> flag (<code>ddev snapshot restore --latest</code>).</p> <p>List snapshots for an existing project with <code>ddev snapshot --list</code>. (Add the <code>--all</code> option for an exhaustive list; <code>ddev snapshot --list --all</code>.) You can remove all of them with <code>ddev snapshot --cleanup</code>, or remove a single snapshot with <code>ddev snapshot --cleanup --name &lt;snapshot-name&gt;</code>.</p> <p>Tip</p> <p>The default 120-second timeout may be inadequate for restores with very large snapshots or slower systems. You can increase this timeout by setting <code>default_container_timeout</code> to a higher value.</p> <p>A timeout doesn\u2019t necessarily mean the restore failed; you can watch the snapshot restore complete by running <code>ddev logs -s db</code>.</p>"},{"location":"users/usage/cli/#interacting-with-your-project","title":"Interacting with Your Project","text":"<p>DDEV provides several commands to facilitate interacting with your project in the development environment. These commands can be run within the working directory of your project while the project is running in DDEV.</p>"},{"location":"users/usage/cli/#executing-commands-in-containers","title":"Executing Commands in Containers","text":"<p>The <code>ddev exec</code> command allows you to run shell commands in the container for a DDEV service. By default, commands are executed on the web service container, in the docroot path of your project. This allows you to use the developer tools included in the web container. For example, to run the <code>ls</code> command in the web container, you would run <code>ddev exec ls</code> or <code>ddev . ls</code>.</p> <p>To run a shell command in the container for a different service, use the <code>--service</code> (or <code>-s</code>) flag at the beginning of your <code>exec</code> command to specify the service the command should be run against. For example, to run the MySQL client in the database, container, you would run <code>ddev exec --service db mysql</code>. To specify the directory in which a shell command will be run, use the <code>--dir</code> flag. For example, to see the contents of the <code>/usr/bin</code> directory, you would run <code>ddev exec --dir /usr/bin ls</code>.</p> <p>To run privileged commands, sudo can be passed into <code>ddev exec</code>. For example, to update the container\u2019s apt package lists, use <code>ddev exec sudo apt-get update</code>.</p> <p>Commands can also be executed using the shorter <code>ddev . &lt;cmd&gt;</code> alias.</p> <p>Normally, <code>ddev exec</code> commands are executed in the container using Bash, which means that environment variables and redirection and pipes can be used. For example, a complex command like <code>ddev exec 'ls -l ${DDEV_FILES_DIR} | grep x &gt;/tmp/junk.out'</code> will be interpreted by Bash and will work. However, there are cases where Bash introduces too much complexity and it\u2019s best to run the command directly. In those cases, something like <code>ddev exec --raw ls -l \"dir1\" \"dir2\"</code> may be useful. With <code>--raw</code>, the <code>ls</code> command is executed directly instead of the full command being interpreted by Bash. But you cannot use environment variables, pipes, redirection, etc.</p>"},{"location":"users/usage/cli/#ssh-into-containers","title":"SSH Into Containers","text":"<p>The <code>ddev ssh</code> command opens an interactive Bash or sh shell session to the container for a DDEV service. The web service is connected by default, and the session can be ended by typing <code>exit</code>. To connect to another service, use the <code>--service</code> flag to specify the service you want to connect to. For example, to connect to the database container, you would run <code>ddev ssh --service db</code>. To specify the destination directory, use the <code>--dir</code> flag. For example, to connect to the database container and be placed into the <code>/home</code> directory, you would run <code>ddev ssh --service db --dir /home</code>.</p> <p>You can also use your personal SSH keys within the web container. Run <code>ddev auth ssh</code> to add the keys from your <code>~/.ssh</code> directory and provide a passphrase, and those keys will be usable from within the web container. You generally only have to <code>ddev auth ssh</code> one time per computer reboot. This is a very popular approach for accessing private Composer repositories, or for using <code>drush</code> aliases against remote servers.</p>"},{"location":"users/usage/cli/#ddev-logs","title":"<code>ddev logs</code>","text":"<p>The <code>ddev logs</code> command allows you to easily view error logs from the web container (both nginx/Apache and php-fpm logs are concatenated). To follow the logs in real time, run <code>ddev logs -f</code>. When you\u2019re done, press CTRL + C to exit the log trail. Similarly, <code>ddev logs -s db</code> will show logs from a running or stopped database container.</p>"},{"location":"users/usage/cli/#stopping-a-project","title":"Stopping a Project","text":"<p>To remove a project\u2019s containers, run <code>ddev stop</code> in the project\u2019s working directory. To remove any running project\u2019s containers regardless of context, specify the project name as an argument: <code>ddev stop &lt;projectname&gt;</code>.</p> <p><code>ddev stop</code> is not destructive. It removes the Docker containers but does not remove the database for the project, and does nothing to your code. This allows you to have many configured projects with databases loaded without wasting Docker containers on unused projects. <code>ddev stop</code> does not affect the project codebase and files.</p> <p>To remove the imported database for a project, use the flag <code>--remove-data</code>, as in <code>ddev stop --remove-data</code>. This command will destroy both the containers and the imported database contents.</p>"},{"location":"users/usage/cms-settings/","title":"Managing CMS Settings","text":"<p>Any CMS-specific project type, meaning any of the non-generic CMS Quickstarts, has settings that DDEV manages to save you time and optimize configuration for local development.</p> <p>Generally, DDEV will:</p> <ul> <li>Create a main settings file if none exists, like Drupal\u2019s <code>settings.php</code>.</li> <li>Create a specialty config file with DDEV-specific settings, like <code>AdditionalSettings.php</code> for TYPO3 or <code>settings.ddev.php</code> for Drupal.</li> <li>Add an include of the specialty file if needed, like adding <code>settings.ddev.php</code> include to the bottom of Drupal\u2019s <code>settings.php</code>.</li> </ul> <p>While this reduces setup time for new users, makes it easier to try out a CMS, and speeds up project creation, you may still want to modify or override DDEV\u2019s CMS-specific behavior.</p>"},{"location":"users/usage/cms-settings/#controlling-or-removing-cms-settings","title":"Controlling or Removing CMS Settings","text":"<p>There are several ways to back off DDEV\u2019s CMS settings management:</p> <ol> <li> <p>Take control of files by removing the <code>#ddev-generated</code> comment. DDEV will automatically update any it\u2019s added containing a <code>#ddev-generated</code> comment. This means you don\u2019t need to touch that file, but also that any changes you make will be overwritten. As soon as you remove the comment, DDEV will ignore that file and leave you fully in control over it. (Don\u2019t forget to check it into version control!)</p> <p>Reversing the change</p> <p>If you change your mind and want DDEV to take over the file again, delete it and run <code>ddev start</code>. DDEV will recreate its own version, which you may want to remove from your Git project.</p> </li> <li> <p>Disable settings management. You can tell DDEV to use a specific project type without creating settings files by either setting <code>disable_settings_management</code> to <code>true</code> or running <code>ddev config --disable-settings-management</code>.</p> </li> <li> <p>Switch to the generic PHP project type. If you don\u2019t want DDEV\u2019s CMS-specific settings, you can switch your project to the generic <code>php</code> type by editing <code>type: php</code> in the project\u2019s settings or running <code>ddev config --project-type=php</code>. DDEV will no longer create or tweak any settings files. You\u2019ll lose any perks from the nginx configuration for the CMS, but you can always customize nginx settings or Apache settings separately.</p> </li> <li> <p>Un-set the <code>$IS_DDEV_PROJECT</code> environment variable. This environment variable is set <code>true</code> by default in DDEV\u2019s environment, and can be used to fence off DDEV-specific behavior. When it\u2019s empty, the important parts of <code>settings.ddev.php</code> and <code>AdditionalSettings.php</code> (for TYPO3) are not executed. This means that DDEV\u2019s <code>settings.ddev.php</code> won\u2019t be invoked if it somehow ends up in a production environment or in a non-DDEV local development environment.</p> </li> </ol> <p>Ignore <code>.ddev/.gitignore</code></p> <p>The <code>.ddev/.gitignore</code> file is created when you run <code>ddev start</code> and <code>disable_settings_management</code> is <code>false</code>. You should not check this file in, since it ignores itself and DDEV\u2019s temporary and automatically-managed files. This makes it easier for teams to share the <code>.ddev</code> folder via Git, even if the <code>.ddev/.gitignore</code> file changes with different versions.</p>"},{"location":"users/usage/cms-settings/#cms-specific-help-and-techniques","title":"CMS-Specific Help and Techniques","text":""},{"location":"users/usage/cms-settings/#backdrop-specifics","title":"Backdrop Specifics","text":""},{"location":"users/usage/cms-settings/#configuration-considerations","title":"Configuration considerations","text":"<p>By default, Backdrop stores both active and staging configuration in the filesystem. In this case, if you are updating the database (either from a live site, or reloading while working locally) it can be important to also refresh the active configuration directory to make sure your database structure is in line with what your configuration is describing.</p> <p>Backdrop also allows you to store your active configuration in the database (as of Backdrop 1.28.0), which can be simpler while developing locally, especially if you are making use of DDEV\u2019s snapshot feature. In this case, the database and the active configuration are effectively bundled and refreshing the database also refreshes the active configuration.</p>"},{"location":"users/usage/cms-settings/#drupal-specifics","title":"Drupal Specifics","text":""},{"location":"users/usage/cms-settings/#drupal-settings-files","title":"Drupal Settings Files","text":"<p>By default, DDEV will create settings files for your project that work out of the box. It creates a <code>sites/default/settings.ddev.php</code> and adds an include in <code>sites/default/settings.php</code> to bring that in. There are guards to prevent the <code>settings.ddev.php</code> from being active when the project is not running under DDEV, but it still should not be checked in and is gitignored.</p>"},{"location":"users/usage/cms-settings/#database-requirements-for-drupal-95","title":"Database requirements for Drupal 9.5+","text":"<ul> <li>Using MySQL or MariaDB, Drupal requires <code>SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED</code> and DDEV does this for you on <code>ddev start</code>.</li> <li>Using PostgreSQL, Drupal requires the<code>pg_trm</code> extension. DDEV creates this extension automatically for you on <code>ddev start</code>.</li> </ul>"},{"location":"users/usage/cms-settings/#twig-debugging","title":"Twig Debugging","text":"<p>With the default Drupal configuration, it\u2019s very difficult to debug Twig templates; you need to use <code>development.services.yml</code> instead of <code>services.yml</code>. Add this line in your <code>settings.php</code> or <code>settings.local.php</code>. See discussion at drupal.org and the Drupal documentation.</p> <pre><code>$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';\n</code></pre>"},{"location":"users/usage/cms-settings/#drush-and-xdebug","title":"Drush and Xdebug","text":"<p>Drush 13+ disables Xdebug even when Xdebug is enabled on DDEV.</p> <p>As per Drush docs you can:</p> <ul> <li>Enable it for a single Drush command by running: <code>ddev drush --xdebug</code></li> <li>Set <code>DRUSH_ALLOW_XDEBUG=1</code> environment variable, allowing every Drush call to be run with Xdebug when the PHP extension is enabled.</li> </ul>"},{"location":"users/usage/cms-settings/#multisite","title":"Multisite","text":"<ol> <li>Start with the DDEV Drupal 8 Multisite Recipe.</li> <li> <p>Update configuration files.</p> <ol> <li> <p>Update each <code>site/{site_name}/settings.php</code>:</p> <pre><code>/**\n * DDEV environments will have $databases (and other settings) set\n * by an auto-generated file. Make alterations here for this site\n * in a multisite environment.\n */\nelseif (getenv('IS_DDEV_PROJECT') == 'true') {\n  /**\n   * Alter database settings and credentials for DDEV environment.\n   * Includes loading the DDEV-generated `default/settings.ddev.php`.\n   */\n  include $app_root . '/' . $site_path . '/settings.databases.ddev.inc';\n}\n</code></pre> </li> <li> <p>Add a <code>settings.databases.ddev.inc</code> in each <code>site/{site_name}/</code>:</p> <pre><code>/**\n * Fetch DDEV-generated database credentials and other settings.\n */\nrequire $app_root . '/sites/default/settings.ddev.php';\n\n/**\n * Alter default database for this site. `settings.ddev.php` will have\n * \u201creset\u201d this to 'db'.\n */\n$databases['default']['default']['database'] = 'site_name';\n</code></pre> </li> <li> <p>Update your <code>web_environment</code> config option if you\u2019re using site aliases:</p> <pre><code>web_environment:\n    # Make DDEV Drush shell PIDs last for entire life of the container\n    # so `ddev drush site:set @alias` persists for all Drush connections.\n    # https://chrisfromredfin.dev/posts/drush-use-ddev/\n    - DRUSH_SHELL_PID=PERMANENT\n</code></pre> </li> </ol> </li> </ol>"},{"location":"users/usage/cms-settings/#typo3-specifics","title":"TYPO3 Specifics","text":""},{"location":"users/usage/cms-settings/#settings-files","title":"Settings Files","text":"<p>On <code>ddev start</code>, DDEV creates a <code>config/system/additional.php</code> file with database configuration in it.</p>"},{"location":"users/usage/cms-settings/#setup-a-base-variant-since-typo3-95","title":"Setup a Base Variant (since TYPO3 9.5)","text":"<p>Since TYPO3 9.5 you have to setup a <code>Site Configuration</code> for each site you like to serve. To be able to browse the site on your local environment, you have to set up a <code>Base Variant</code> in your <code>Site Configuration</code> depending on your local context. In this example we assume a <code>Application Context</code> <code>Development/DDEV</code> which can be set in the DDEV\u2019s <code>config.yaml</code>:</p> <pre><code>web_environment:\n    - TYPO3_CONTEXT=Development/DDEV\n</code></pre> <p>This variable will be available after the project start or restart.</p> <p>Afterwards add a <code>Base Variant</code> to your <code>Site Configuration</code>:</p> <pre><code>baseVariants:\n  -\n    base: 'https://example.com.ddev.site/'\n    condition: 'applicationContext == \"Development/DDEV\"'\n</code></pre> <p>See also TYPO3 Documentation.</p>"},{"location":"users/usage/cms-settings/#wordpress-specifics","title":"WordPress Specifics","text":""},{"location":"users/usage/cms-settings/#wp-cli-and-changing-the-docroot-in-configyaml","title":"WP-CLI and changing the docroot in config.yaml","text":"<p>DDEV v1.24.5+ automatically adds <code>--path=$DDEV_DOCROOT</code> to the <code>ddev wp</code> command if needed.</p> <p>If you use something other than the root directory (<code>''</code>) for your docroot, <code>ddev wp</code> will not work properly. To fix this, create a <code>wp-cli.yml</code> file in the project root directory that contains <code>path: &lt;docroot/path&gt;</code>.</p> <p>For example, if your docroot is <code>public</code>, your <code>wp-cli.yml</code> file should contain:</p> <pre><code>path: public\n</code></pre>"},{"location":"users/usage/cms-settings/#wordpress-environment-type","title":"WordPress Environment Type","text":"<p>By default, <code>wp_get_environment_type()</code> returns <code>production</code>. However, you can override it in one of two ways:</p> <ol> <li> <p>Setting an environment variable, such as with the following ddev command:</p> <pre><code>ddev config --web-environment-add=\"WP_ENVIRONMENT_TYPE=local\"\n</code></pre> </li> <li> <p>Defining the <code>WP_ENVIRONMENT_TYPE</code> constant:</p> <p>To do this, modify your <code>wp-config-ddev.php</code> file by removing the <code>#ddev-generated</code> line and adding this code snippet:</p> <pre><code>defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'local' );\n</code></pre> </li> </ol>"},{"location":"users/usage/commands/","title":"Commands","text":"<p>You can tell DDEV what to do by running its commands. This page details each of the available commands and their options, or flags.</p> <p>Run DDEV without any commands or flags to see this list in your terminal:</p> <pre><code>\u2192  ddev\nCreate and maintain a local web development environment.\nDocs: https://docs.ddev.com\nSupport: https://docs.ddev.com/en/stable/users/support\n\nUsage:\n  ddev [command]\n\nAvailable Commands:\n  auth             A collection of authentication commands\n  blackfire        Enable or disable blackfire.io profiling (global shell web container command)\n  clean            Removes items ddev has created\n  composer         Executes a composer command within the web container\n...\n</code></pre> <p>Use <code>ddev help</code> to learn more about a specific command, like this example for <code>ddev describe</code>:</p> <pre><code>\u2192  ddev help describe\nGet a detailed description of a running ddev project. Describe provides basic\ninformation about a ddev project, including its name, location, url, and status.\nIt also provides details for MySQL connections, and connection information for\nadditional services like Mailpit. You can run 'ddev describe' from\na project directory to describe that project, or you can specify a project to describe by\nrunning 'ddev describe &lt;projectname&gt;'.\n\nUsage:\n  ddev describe [projectname] [flags]\n\nAliases:\n  describe, status, st, desc\n\nExamples:\nddev describe\nddev describe &lt;projectname&gt;\nddev status\nddev st\n\nFlags:\n  -h, --help   help for describe\n\nGlobal Flags:\n  -j, --json-output   If true, user-oriented output will be in JSON format.\n</code></pre>"},{"location":"users/usage/commands/#global-flags","title":"Global Flags","text":"<p>Two flags are available for every command:</p> <ul> <li><code>--help</code> or <code>-h</code>: Outputs more information about a command rather than executing it.</li> <li><code>--json-output</code> or <code>-j</code>: Format user-oriented output in JSON.</li> </ul>"},{"location":"users/usage/commands/#add-on","title":"<code>add-on</code>","text":"<p>Aliases: <code>addon</code>, <code>add-ons</code>, <code>addons</code>.</p> <p>Add-on commands.</p> <p>Environment variables:</p> <ul> <li> <p><code>DDEV_GITHUB_TOKEN</code>: GitHub token for <code>ddev add-on</code> requests to avoid rate limiting. No privileges required for public repositories, scopes are only needed for private repositories.</p> <pre><code>export DDEV_GITHUB_TOKEN=&lt;your-github-token&gt;\nddev add-on list\n</code></pre> </li> <li> <p><code>GH_TOKEN</code>: Alternative GitHub token variable (lower priority than <code>DDEV_GITHUB_TOKEN</code>).</p> </li> <li><code>GITHUB_TOKEN</code>: Alternative GitHub token variable (lowest priority).</li> </ul>"},{"location":"users/usage/commands/#add-on-get","title":"<code>add-on get</code>","text":"<p>Alias: <code>add-on install</code>.</p> <p>Download an add-on (service, provider, etc.). Dependencies declared in the add-on\u2019s <code>install.yaml</code> are installed automatically unless <code>--skip-deps</code> is used.</p> <p>Flags:</p> <ul> <li><code>--skip-deps</code>: Skip installing add-on dependencies (default <code>false</code>)</li> <li><code>--project &lt;projectName&gt;</code>: Specify a project to install the add-on into. Defaults to checking for a project in the current directory.</li> <li><code>--version &lt;version&gt;</code>: Specify a version to download</li> <li><code>--verbose</code>, <code>-v</code>: Output verbose error information with Bash <code>set -x</code> (default <code>false</code>)</li> </ul> <p>Example:</p> <pre><code># Download the official Redis add-on\nddev add-on get ddev/ddev-redis\n\n# Get debug info about `ddev add-on get` failure\nddev add-on get ddev/ddev-redis --verbose\n\n# Download the official Redis add-on, version v1.0.4\nddev add-on get ddev/ddev-redis --version v1.0.4\n\n# Download the Drupal Solr add-on from its v1.2.3 release tarball\nddev add-on get https://github.com/ddev/ddev-drupal-solr/archive/refs/tags/v1.2.3.tar.gz\n\n# Download the Drupal Contrib add-on from its main branch tarball\nddev add-on get https://github.com/ddev/ddev-drupal-contrib/tarball/main\n\n# Download the OpenSearch add-on from a pull request #15 tarball\nddev add-on get https://github.com/ddev/ddev-opensearch/tarball/refs/pull/15/head\n\n# Copy an add-on available in another directory\nddev add-on get /path/to/package\n\n# Copy an add-on from a tarball in another directory\nddev add-on get /path/to/tarball.tar.gz\n\n# Download the official Redis add-on and install it into a project named \"my-project\"\nddev add-on get ddev/ddev-redis --project my-project\n\n# Install an add-on without installing its dependencies\nddev add-on get ddev/ddev-redis-commander --skip-deps\n</code></pre> <p>Automatic Dependency Installation:</p> <p>When an add-on declares dependencies in its <code>install.yaml</code>, DDEV will automatically install any missing dependencies before installing the add-on itself. Dependencies support the same formats as <code>ddev add-on get</code>:</p> <ul> <li>GitHub repositories: <code>ddev/ddev-redis</code></li> <li>Direct URLs: <code>https://example.com/addon.tar.gz</code></li> </ul> <p>DDEV will detect and prevent circular dependencies with clear error messages.</p> <p>In general, you can run <code>ddev add-on get</code> multiple times without doing any damage. Updating an add-on can be done by running <code>ddev add-on get &lt;add-on-name&gt;</code>. If you have changed an add-on file and removed the <code>#ddev-generated</code> marker in the file, that file will not be touched and DDEV will let you know about it.</p> <p>How to install add-ons from private repositories?</p> <p>See Private Add-ons for details.</p>"},{"location":"users/usage/commands/#add-on-remove","title":"<code>add-on remove</code>","text":"<p>Remove an installed add-on. Accepts the full add-on name, the short name of the repository, or with owner/repository format.</p> <p>Flags:</p> <ul> <li><code>--project &lt;projectName&gt;</code>: Specify a project to remove the add-on from. Defaults to checking for a project in the current directory.</li> <li><code>--verbose</code>, <code>-v</code>: Output verbose error information with Bash <code>set -x</code> (default <code>false</code>)</li> </ul> <p>Example:</p> <pre><code>ddev add-on remove redis\nddev add-on remove ddev-redis\nddev add-on remove ddev/ddev-redis\nddev add-on remove ddev/ddev-redis --project my-project\n</code></pre>"},{"location":"users/usage/commands/#add-on-list","title":"<code>add-on list</code>","text":"<p>List available or installed DDEV add-ons.</p> <p>Flags:</p> <ul> <li><code>--installed</code>: List installed add-ons</li> <li><code>--project &lt;projectName&gt;</code>: Specify the project for which to list add-ons. Can only be used with the <code>--installed</code> flag. Defaults to checking for a project in the current directory.</li> </ul> <p>Example:</p> <pre><code># List all available add-ons\nddev add-on list\n\n# List installed add-ons\nddev add-on list --installed\n\n# List installed add-ons for a specific project\nddev add-on list --installed --project my-project\n</code></pre>"},{"location":"users/usage/commands/#add-on-search","title":"<code>add-on search</code>","text":"<p>Search available DDEV add-ons by name or description.</p> <p>Example:</p> <pre><code># Search for Redis-related add-ons\nddev add-on search redis\n\n# Search for database-related add-ons\nddev add-on search database\n\n# Search with multiple terms (all must be present)\nddev add-on search redis web\n\n# Search with multiple terms using quotes (currently same behavior)\nddev add-on search \"redis commander\"\n</code></pre>"},{"location":"users/usage/commands/#aliases","title":"<code>aliases</code>","text":"<p>Shows all aliases for each command in the current context (global or project).</p> <pre><code># Print a list of all available command aliases\nddev aliases\n</code></pre>"},{"location":"users/usage/commands/#artisan","title":"<code>artisan</code>","text":"<p>Alias: <code>art</code>.</p> <p>Run the <code>artisan</code> command; available only in projects of type <code>laravel</code>, and only available if <code>artisan</code> is in the project root.</p> <pre><code># Show all artisan subcommands\nddev artisan list\n</code></pre>"},{"location":"users/usage/commands/#auth","title":"<code>auth</code>","text":"<p>Authentication commands.</p>"},{"location":"users/usage/commands/#auth-ssh","title":"<code>auth ssh</code>","text":"<p>Add SSH key authentication to the <code>ddev-ssh-agent</code> container.</p> <p>The command can be executed multiple times to add more keys, or you can use the <code>-f</code> flag for several individual keys for example <code>ddev auth ssh -f /path/to/first_id_rsa -f /path/to/second_id_rsa</code>.</p> <p>Example:</p> <pre><code># Add your SSH keys to the SSH agent container\nddev auth ssh\n# Add your SSH keys from ~/custom/path/to/ssh directory\nddev auth ssh -d ~/custom/path/to/ssh\n# Add your SSH keys from ~/.ssh/id_ed25519 and ~/.ssh/id_rsa files\nddev auth ssh -f ~/.ssh/id_ed25519 -f ~/.ssh/id_rsa\n</code></pre> <p>Flags:</p> <ul> <li><code>--ssh-key-file</code>, <code>-f</code>: Path to SSH private key file, use the flag multiple times to add more keys.</li> <li><code>--ssh-key-path</code>, <code>-d</code>: Path to directory with SSH private key(s), use the flag multiple times to add more directories.</li> </ul>"},{"location":"users/usage/commands/#blackfire","title":"<code>blackfire</code>","text":"<p>Enable or disable Blackfire profiling (global shell web container command).</p> <pre><code># Display Blackfire profiling status\nddev blackfire status\n\n# Start Blackfire profiling\nddev blackfire on\n\n# Stop Blackfire profiling\nddev blackfire off\n</code></pre> <p>Tip</p> <p>There are synonyms for the <code>on</code> and <code>off</code> arguments that have the exact same effect:</p> <ul> <li><code>on</code>: <code>start</code>, <code>enable</code>, <code>true</code></li> <li><code>off</code>: <code>stop</code>, <code>disable</code>, <code>false</code></li> </ul>"},{"location":"users/usage/commands/#cake","title":"<code>cake</code>","text":"<p>Run the <code>cake</code> command; available only in projects of type <code>cakephp</code>, and only available if <code>cake.php</code> is in bin folder.</p> <pre><code># Show all cake subcommands\nddev cake\n</code></pre>"},{"location":"users/usage/commands/#clean","title":"<code>clean</code>","text":"<p>Removes items DDEV has created. (See Uninstalling DDEV.)</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Clean all DDEV projects.</li> <li><code>--dry-run</code>: Run the clean command without deleting.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Preview cleaning all projects without actually removing anything\nddev clean --dry-run --all\n\n# Clean all projects\nddev clean --all\n\n# Clean my-project and my-other-project\nddev clean my-project my-other-project\n</code></pre>"},{"location":"users/usage/commands/#composer","title":"<code>composer</code>","text":"<p>Alias: <code>co</code>.</p> <p>Executes a Composer command within the web container.</p> <p><code>ddev composer create-project</code> is a special command that is an adaptation of <code>composer create-project</code>. See DDEV and Composer for more information.</p> <p>Example:</p> <pre><code># Install Composer packages\nddev composer install\n</code></pre> <p>Example of <code>ddev composer create-project</code>:</p> <pre><code># Create a new Drupal project in the current directory\nddev composer create-project drupal/recommended-project .\n</code></pre>"},{"location":"users/usage/commands/#config","title":"<code>config</code>","text":"<p>Create or modify a DDEV project\u2019s configuration in the current directory. By default, <code>ddev config</code> will not change configuration that already exists in your <code>.ddev/config.yaml</code>, it will only make changes you specify with flags. However, if you want to autodetect everything, <code>ddev config --update</code> will usually do everything you need.</p> <p>You can also set these via YAML!</p> <p>These settings, plus a few more, can be set by editing stored Config Options.</p> <p>Example:</p> <pre><code># Start interactive project configuration\nddev config\n\n# Accept defaults on a new project. This is the same as hitting &lt;RETURN&gt;\n# on every question in `ddev config`\nddev config --auto\n\n# Detect docroot, project type (except for `generic` type),\n# and expected defaults for an existing project\nddev config --update\n\n# Configure a Drupal project with a `web` document root\nddev config --docroot=web --project-type=drupal\n\n# Switch the project\u2019s default `nginx-fpm` to `apache-fpm`\nddev config --webserver-type=apache-fpm\n</code></pre> <p>Flags:</p> <ul> <li><code>--additional-fqdns</code>: Comma-delimited list of project FQDNs or <code>--additional-fqdns=\"\"</code> to remove any configured FQDNs.</li> <li><code>--additional-hostnames</code>: Comma-delimited list of project hostnames or <code>--additional-hostnames=\"\"</code> to remove any configured additional hostnames.</li> <li><code>--auto</code>: Automatically run config without prompting.</li> <li><code>--bind-all-interfaces</code>: Bind host ports on all interfaces, not only on the localhost network interface.</li> <li><code>--composer-root</code>: The relative path, from the project root, to the directory containing <code>composer.json</code>. (This is where all Composer-related commands are executed.)</li> <li><code>--composer-root-default</code>: Unset a <code>web</code> service Composer root directory override, the same as <code>--composer-root=\"\"</code>.</li> <li><code>--composer-version</code>: Specify override for Composer version in the web container. This may be <code>\"\"</code>, <code>\"1\"</code>, <code>\"2\"</code>, <code>\"2.2\"</code>, <code>\"stable\"</code>, <code>\"preview\"</code>, <code>\"snapshot\"</code>, or a specific version.</li> <li><code>--corepack-enable</code>: Whether to run <code>corepack enable</code> on Node.js configuration.</li> <li><code>--database</code>: Specify the database <code>type:version</code> to use (see default).</li> <li><code>--db-working-dir</code>: Override the default working directory for the <code>db</code> service.</li> <li><code>--db-working-dir-default</code>: Unset a <code>db</code> service working directory override, the same as <code>--db-working-dir=\"\"</code>.</li> <li><code>--dbimage-extra-packages</code>: Comma-delimited list of Debian packages that should be added to <code>db</code> container when the project is started or <code>--dbimage-extra-packages=\"\"</code> to remove previously configured packages.</li> <li><code>--ddev-version-constraint</code>: Specify a <code>ddev_version_constraint</code> to validate <code>ddev</code> against.</li> <li><code>--default-container-timeout</code>: Default time in seconds that DDEV waits for all containers to become ready on start (see default).</li> <li><code>--disable-settings-management</code>: Prevent DDEV from creating or updating CMS settings files.</li> <li><code>--disable-upload-dirs-warning</code>: Disable warnings about <code>upload-dirs</code> not being set when using <code>--performance-mode=mutagen</code>.</li> <li><code>--docroot</code>: Provide the relative docroot of the project, like <code>docroot</code> or <code>htdocs</code> or <code>web</code>, defaults to empty, the current directory.</li> <li><code>--fail-on-hook-fail</code>: Decide whether <code>ddev start</code> should be interrupted by a failing hook.</li> <li><code>--host-db-port</code>: The <code>db</code> container\u2019s localhost-bound port.</li> <li><code>--host-https-port</code>: The <code>web</code> container\u2019s localhost-bound HTTPS port.</li> <li><code>--host-webserver-port</code>: The <code>web</code> container\u2019s localhost-bound HTTP port.</li> <li><code>--mailpit-http-port</code>: Router port to be used for Mailpit HTTP access (see default).</li> <li><code>--mailpit-https-port</code>: Router port to be used for Mailpit HTTPS access (see default).</li> <li><code>--ngrok-args</code>: Provide extra args to <code>ngrok</code> in <code>ddev share</code>.</li> <li><code>--no-project-mount</code>: Whether to skip mounting project code into the <code>web</code> container.</li> <li><code>--nodejs-version</code>: Specify the Node.js version to use (see default).</li> <li><code>--omit-containers</code>: Comma-delimited list of container types that should not be started when the project is started.</li> <li><code>--performance-mode</code>: Performance optimization mode, possible values are <code>global</code>, <code>none</code>, <code>mutagen</code>, <code>nfs</code>.</li> <li><code>--performance-mode-reset</code>: Reset performance mode to global configuration.</li> <li><code>--php-version</code>: PHP version that will be enabled in the <code>web</code> container (see default).</li> <li><code>--project-name</code>: Provide the project name of project to configure (normally the same as the last part of directory name).</li> <li><code>--project-tld</code>: Set the top-level domain to be used for projects (see default).</li> <li><code>--project-type</code>: Provide the project type of project to configure. This is autodetected and this flag is necessary only to override the detection.</li> <li><code>--router-http-port</code>: The router HTTP port for this project (see default).</li> <li><code>--router-https-port</code>: The router HTTPS port for this project (see default).</li> <li><code>--show-config-location</code>: Output the location of the <code>.ddev/config.yaml</code> file if it exists, or error that it doesn\u2019t exist.</li> <li><code>--timezone</code>: Specify timezone for containers and PHP, like <code>Europe/London</code> or <code>America/Denver</code> or <code>GMT</code> or <code>UTC</code>. If unset, DDEV will attempt to derive it from the host system timezone.</li> <li><code>--update</code>: Update project settings based on detection and <code>project-type</code> overrides (except for <code>generic</code> type).</li> <li><code>--upload-dirs</code>: Set the project\u2019s upload directories, the destination directories of the <code>ddev import-files</code> command, or <code>--upload-dirs=\"\"</code> to remove previously configured values.</li> <li><code>--use-dns-when-possible</code>: Use DNS for hostname resolution instead of <code>/etc/hosts</code> when possible (default <code>true</code>).</li> <li><code>--web-environment</code>: Set the environment variables in the <code>web</code> container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code> or <code>--web-environment=\"\"</code> to remove previously configured values.</li> <li><code>--web-environment-add</code>: Append environment variables to the <code>web</code> container: <code>--web-environment-add=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--web-image</code>: Set the <code>web</code> container image (for advanced use only).</li> <li><code>--web-image-default</code>: Set the default <code>web</code> container image, the same as <code>--web-image=\"\"</code>.</li> <li><code>--web-working-dir</code>: Override the default working directory for the <code>web</code> service.</li> <li><code>--web-working-dir-default</code>: Unset a <code>web</code> service working directory override, the same as <code>--web-working-dir=\"\"</code>.</li> <li><code>--webimage-extra-packages</code>: Comma-delimited list of Debian packages that should be added to <code>web</code> container when the project is started or <code>--webimage-extra-packages=\"\"</code> to remove any previously configured packages.</li> <li><code>--webserver-type</code>: Set the project\u2019s desired web server type: <code>nginx-fpm</code>, <code>apache-fpm</code>, <code>generic</code> (see default).</li> <li><code>--working-dir-defaults</code>: Unset all service working directory overrides.</li> <li><code>--xdebug-enabled</code>: Whether Xdebug is enabled in the <code>web</code> container.</li> <li><code>--xhprof-mode</code>: XHProf mode, possible values are <code>global</code>, <code>prepend</code>, <code>xhgui</code> (see default).</li> <li><code>--xhprof-mode-reset</code>: Reset XHProf mode to global configuration.</li> </ul>"},{"location":"users/usage/commands/#config-global","title":"<code>config global</code>","text":"<p>Change global configuration.</p> <pre><code># Opt out of sharing anonymized usage information\nddev config global --instrumentation-opt-in=false\n\n# Skip the SSH agent for all projects\nddev config global --omit-containers=ddev-ssh-agent\n</code></pre> <ul> <li><code>--fail-on-hook-fail</code>: If true, <code>ddev start</code> will fail when a hook fails.</li> <li><code>--instrumentation-opt-in</code>: Whether to allow instrumentation reporting with <code>--instrumentation-opt-in=true</code> (see default).</li> <li><code>--internet-detection-timeout-ms</code>: Increase timeout when checking internet timeout, in milliseconds (see default).</li> <li><code>--letsencrypt-email</code>: Email associated with Let\u2019s Encrypt, <code>ddev global --letsencrypt-email=me@example.com</code>.</li> <li><code>--mailpit-http-port</code>: The default Mailpit HTTP port for all projects, can be overridden by project configuration (see default).</li> <li><code>--mailpit-https-port</code>: The default Mailpit HTTPS port for all projects, can be overridden by project configuration (see default).</li> <li><code>--no-bind-mounts</code>: If <code>true</code>, don\u2019t use bind-mounts. Useful for environments like remote Docker where bind-mounts are impossible.</li> <li><code>--omit-containers</code>: For example, <code>--omit-containers=ddev-ssh-agent</code> or <code>--omit-containers=\"\"</code>.</li> <li><code>--omit-project-name-by-default</code>: If <code>true</code>, <code>ddev config</code> will not write the <code>name</code> field to <code>.ddev/config.yaml</code> unless explicitly set with <code>--project-name</code> (see default).</li> <li><code>--performance-mode</code>: Performance optimization mode, possible values are <code>none</code>, <code>mutagen</code>, <code>nfs</code>.</li> <li><code>--performance-mode-reset</code>: Reset performance optimization mode to operating system default (<code>none</code> for Linux and WSL2, <code>mutagen</code> for macOS and traditional Windows).</li> <li><code>--project-tld</code>: Set the default top-level domain to be used for all projects, can be overridden by project configuration (see default).</li> <li><code>--router-bind-all-interfaces</code>: Bind host router ports on all interfaces, not only on the localhost network interface.</li> <li><code>--router-http-port</code>: The default router HTTP port for all projects, can be overridden by project configuration (see default).</li> <li><code>--router-https-port</code>: The default router HTTPS port for all projects, can be overridden by project configuration (see default).</li> <li><code>--simple-formatting</code>: If <code>true</code>, use simple formatting for tables and implicitly set <code>NO_COLOR=1</code>.</li> <li><code>--table-style</code>: Table style for <code>ddev list</code> and <code>ddev describe</code>, possible values are <code>default</code>, <code>bold</code>, <code>bright</code> (see default).</li> <li><code>--traefik-monitor-port</code>: Can be used to change the Traefik monitor port in case of port conflicts, for example <code>ddev config global --traefik-monitor-port=11999</code> (see default).</li> <li><code>--use-hardened-images</code>: If <code>true</code>, use more secure \u2018hardened\u2019 images for an actual internet deployment.</li> <li><code>--use-letsencrypt</code>: Enables experimental Let\u2019s Encrypt integration, <code>ddev config global --use-letsencrypt</code> or <code>ddev config global --use-letsencrypt=false</code>.</li> <li><code>--web-environment</code>: Set the environment variables in the <code>web</code> container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--web-environment-add</code>: Append environment variables to the <code>web</code> container: <code>--web-environment-add=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--wsl2-no-windows-hosts-mgt</code>: WSL2 only; make DDEV ignore Windows-side hosts file (for advanced use only).</li> <li><code>--xdebug-ide-location</code>: For less usual IDE locations specify where the IDE is running for Xdebug to reach it (for advanced use only).</li> <li><code>--xhprof-mode</code>: XHProf mode, possible values are <code>prepend</code>, <code>xhgui</code> (see default).</li> <li><code>--xhprof-mode-reset</code>: Reset XHProf mode to default.</li> </ul>"},{"location":"users/usage/commands/#console","title":"<code>console</code>","text":"<p>Run the <code>console</code> command; available only in projects of type <code>symfony</code>, and only available if <code>bin/console</code> exists.</p> <pre><code># Show all Symfony console subcommands\nddev console list\n</code></pre>"},{"location":"users/usage/commands/#craft","title":"<code>craft</code>","text":"<p>Run a Craft CMS command inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Run pending Craft migrations and apply pending project config changes\nddev craft up\n</code></pre>"},{"location":"users/usage/commands/#dbeaver","title":"<code>dbeaver</code>","text":"<p>Open DBeaver with the current project\u2019s database (global shell host container command). This command is only available if <code>DBeaver.app</code> is installed as <code>/Applications/DBeaver.app</code> for macOS, if <code>dbeaver.exe</code> is installed to all users as <code>C:/Program Files/dbeaver/dbeaver.exe</code> for WSL2, and if <code>dbeaver</code> (or another binary like <code>dbeaver-ce</code>) available inside <code>/usr/bin</code> for Linux (Flatpak and snap support included).</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in DBeaver\nddev dbeaver\n</code></pre>"},{"location":"users/usage/commands/#utility","title":"<code>utility</code>","text":"<p>Aliases: <code>ut</code>, <code>debug</code>, <code>d</code>,<code>dbg</code>.</p> <p>A collection of utility and debugging commands, often useful for troubleshooting.</p>"},{"location":"users/usage/commands/#utility-cd","title":"<code>utility cd</code>","text":"<p>Uses shell built-in <code>cd</code> to change to a project directory. For example, <code>ddevcd some-project</code> will change directories to the project root of the project named <code>some-project</code>.</p> <p>Note that this command can\u2019t work until you make a small addition to your <code>.bashrc</code>, <code>.zshrc</code>, or <code>config.fish</code>.</p> <pre><code># To see the explanation of what you need to do\nddev utility cd\n# Where some-project is a project from the `ddev list`\nddevcd some-project\n</code></pre>"},{"location":"users/usage/commands/#utility-check-db-match","title":"<code>utility check-db-match</code>","text":"<p>Verify that the database in the db server matches the configured type and version.</p> <p>Example:</p> <pre><code># Check whether project\u2019s running database matches configuration\nddev utility check-db-match\n</code></pre>"},{"location":"users/usage/commands/#utility-compose-config","title":"<code>utility compose-config</code>","text":"<p>Prints the current project\u2019s docker-compose configuration.</p> <p>Example:</p> <pre><code># Print docker-compose config for the current project\nddev utility compose-config\n\n# Print docker-compose config for `my-project`\nddev utility compose-config my-project\n</code></pre>"},{"location":"users/usage/commands/#utility-configyaml","title":"<code>utility configyaml</code>","text":"<p>Prints the project <code>config.*.yaml</code> usage.</p> <p>Arguments: <code>[project_name]</code></p> <p>Flags:</p> <ul> <li><code>--full-yaml</code>: Output complete processed YAML configuration instead of individual fields</li> <li><code>--omit-keys=&lt;keys&gt;</code>: Comma-separated list of keys to omit from output (e.g., <code>web_environment</code>)</li> </ul> <p>Examples:</p> <pre><code># Print config for the current project\nddev utility configyaml\n\n# Print config specifically for `my-project`\nddev utility configyaml my-project\n\n# Print complete YAML configuration\nddev utility configyaml --full-yaml\n\n# Hide sensitive environment variables\nddev utility configyaml --omit-keys=web_environment\n\n# Combine flags: full YAML output without sensitive keys\nddev utility configyaml --full-yaml --omit-keys=web_environment\n</code></pre>"},{"location":"users/usage/commands/#utility-diagnose","title":"<code>utility diagnose</code>","text":"<p>Run quick diagnostics on your DDEV installation and current project. This command provides concise, actionable output for common troubleshooting scenarios.</p> <p>The command checks:</p> <ul> <li>Docker environment and connectivity</li> <li>Network configuration and DNS resolution</li> <li>HTTPS/mkcert setup</li> <li>Current project health (if in a project directory)</li> </ul> <p>For comprehensive output suitable for issue reports, use <code>ddev utility test</code> instead.</p> <p>Environment variables:</p> <ul> <li><code>DDEV_DIAGNOSE_FULL=true</code>: Include test project creation in diagnostics (slower but more thorough)</li> </ul> <p>Examples:</p> <pre><code># Run diagnostics in a project directory\nddev utility diagnose\n\n# Run with full diagnostics including test project creation\nDDEV_DIAGNOSE_FULL=true ddev utility diagnose\n\n# Run from anywhere (checks Docker and environment only)\nddev utility diagnose\n</code></pre>"},{"location":"users/usage/commands/#utility-dockercheck","title":"<code>utility dockercheck</code>","text":"<p>Diagnose DDEV Docker provider setup.</p> <p>Example:</p> <pre><code># Output contextual details for the Docker provider\nddev utility dockercheck\n</code></pre>"},{"location":"users/usage/commands/#utility-download-images","title":"<code>utility download-images</code>","text":"<p>Download the basic Docker images required by DDEV. This can be useful on a new machine to prevent <code>ddev start</code> or other commands having to download the various images.</p> <p>Example:</p> <pre><code># Download DDEV\u2019s basic Docker images\nddev utility download-images\n# Download DDEV\u2019s Docker images for `my-project`\nddev utility download-images my-project\n# Download DDEV\u2019s Docker images for all projects\nddev utility download-images --all\n</code></pre>"},{"location":"users/usage/commands/#utility-fix-commands","title":"<code>utility fix-commands</code>","text":"<p>Refreshes custom command definitions without running <code>ddev start</code>.</p> <p>Example:</p> <pre><code># Refresh the current project\u2019s custom commands\nddev utility fix-commands\n</code></pre>"},{"location":"users/usage/commands/#utility-get-volume-db-version","title":"<code>utility get-volume-db-version</code>","text":"<p>Get the database type and version found in the <code>ddev-dbserver</code> database volume, which may not be the same as the configured database type and version.</p> <p>Example:</p> <pre><code># Print the database volume's engine and version\nddev utility get-volume-db-version\n</code></pre>"},{"location":"users/usage/commands/#utility-gob-decode","title":"<code>utility gob-decode</code>","text":"<p>Decode and display the contents of Go gob-encoded binary files used by DDEV, such as <code>.remote-config</code> files (remote configuration cache), <code>.amplitude.cache</code> files (analytics event cache), and sponsorship data files.</p> <p>The decoder automatically detects the file type and uses the appropriate structure. The output is displayed as formatted JSON for readability.</p> <p>(Hidden - show hidden utility commands with <code>ddev utility --show-hidden</code>)</p> <p>Example:</p> <pre><code># Decode a remote config file\nddev utility gob-decode ~/.ddev/.remote-config\n\n# Decode an amplitude cache file\nddev utility gob-decode ~/.ddev/.amplitude.cache\n\n# Decode any gob file with path expansion\nddev utility gob-decode ~/path/to/file.gob\n</code></pre>"},{"location":"users/usage/commands/#utility-match-constraint","title":"<code>utility match-constraint</code>","text":"<p>Check if the currently installed ddev matches the specified version constraint.</p> <p>Example:</p> <pre><code>if ddev utility match-constraint \"&lt; 1.25\" &gt;/dev/null 2&gt;&amp;1; then\n  # do something for ddev versions below 1.25\n  ...\nelse\n  # do something for ddev versions 1.25+\n  ...\nfi\n</code></pre> <p>Tip</p> <p>You can also configure a ddev version constraint per project.</p>"},{"location":"users/usage/commands/#utility-message-conditions","title":"<code>utility message-conditions</code>","text":"<p>Show message conditions of this version of DDEV.</p> <p>(Hidden - show hidden utility commands with <code>ddev utility --show-hidden</code>)</p> <p>Example:</p> <pre><code># Show message conditions for the current DDEV version\nddev utility message-conditions\n</code></pre>"},{"location":"users/usage/commands/#utility-migrate-database","title":"<code>utility migrate-database</code>","text":"<p>Migrate a MySQL or MariaDB database to a different <code>dbtype:dbversion</code>. Works only with MySQL and MariaDB, not with PostgreSQL. It will export your database, create a snapshot, destroy your current database, and import into the new database type. It only migrates the \u2018db\u2019 database. It will update the database version in your project\u2019s <code>config.yaml</code> file.</p> <p>Example:</p> <pre><code># Migrate the current project's database to MariaDB 10.7\nddev utility migrate-database mariadb:10.7\n</code></pre>"},{"location":"users/usage/commands/#utility-mutagen","title":"<code>utility mutagen</code>","text":"<p>Allows access to any Mutagen command.</p> <p>Example:</p> <pre><code># Run Mutagen's `sync list` command\nddev utility mutagen sync list\n</code></pre>"},{"location":"users/usage/commands/#utility-nfsmount","title":"<code>utility nfsmount</code>","text":"<p>Checks to see if NFS mounting works for current project.</p> <p>Example:</p> <pre><code># See if NFS is working as expected for the current project\nddev utility nfsmount\n</code></pre>"},{"location":"users/usage/commands/#utility-rebuild","title":"<code>utility rebuild</code>","text":"<p>Alias: <code>utility refresh</code>.</p> <p>Rebuilds the project\u2019s Docker cache with verbose output and restarts the project or the specified service.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Rebuild all services and restart the project.</li> <li><code>--cache</code>: Keep Docker cache.</li> <li><code>--service</code>, <code>-s</code>: Rebuild the specified service and restart it. (default <code>web</code>)</li> </ul> <p>Example:</p> <pre><code># Rebuild the current project's web service without cache\nddev utility rebuild\n\n# Rebuild the current project's web service with cache\nddev utility rebuild --cache\n\n# Rebuild the current project's db service without cache\nddev utility rebuild --service db\n\n# Rebuild the current project's all services without cache\nddev utility rebuild --all\n</code></pre>"},{"location":"users/usage/commands/#utility-remote-data","title":"<code>utility remote-data</code>","text":"<p>Download and display remote configuration and sponsorship data used by DDEV from GitHub repositories.</p> <p>The downloaded content is displayed as formatted JSON to stdout. Optionally updates the local cached storage file (enabled by default).</p> <p>(Hidden - show hidden utility commands with <code>ddev utility --show-hidden</code>)</p> <p>Flags:</p> <ul> <li><code>--type</code>, <code>-t</code>: Type of data to download: <code>remote-config</code> (default) or <code>sponsorship-data</code>.  </li> <li><code>--update-storage</code>: Update local cached storage file (default <code>true</code>).</li> </ul> <p>Examples:</p> <pre><code># Download remote config (default type)\nddev utility remote-data\n\n# Download sponsorship data without updating local storage\nddev utility remote-data --type=sponsorship-data --update-storage=false\n</code></pre>"},{"location":"users/usage/commands/#utility-test","title":"<code>utility test</code>","text":"<p>Run diagnostics using the embedded test script.</p> <p>Example:</p> <pre><code># Run DDEV's diagnostic suite\nddev utility test\n</code></pre>"},{"location":"users/usage/commands/#utility-testcleanup","title":"<code>utility testcleanup</code>","text":"<p>Removes all diagnostic projects created with <code>ddev utility test</code>.</p> <p>Example:</p> <pre><code># Remove all DDEV's diagnostic projects\nddev utility testcleanup\n</code></pre>"},{"location":"users/usage/commands/#delete","title":"<code>delete</code>","text":"<p>Remove all information, including the database, for an existing project.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Delete all projects.</li> <li><code>--clean-containers</code>: Clean up all DDEV Docker containers not required by this version of DDEV. (default <code>true</code>)</li> <li><code>--omit-snapshot</code>, <code>-O</code>: Omit/skip database snapshot.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Delete my-project and my-other-project\nddev delete my-project my-other-project\n\n# Delete the current project without taking a snapshot or confirming\nddev delete --omit-snapshot --yes\n</code></pre>"},{"location":"users/usage/commands/#delete-images","title":"<code>delete images</code>","text":"<p>With <code>--all</code>, it deletes all <code>ddev/ddev-*</code> Docker images.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: If set, deletes all Docker images created by DDEV.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Delete images\nddev delete images\n\n# Delete images and skip confirmation\nddev delete images -y\n\n# Delete all DDEV-created images\nddev delete images --all\n</code></pre>"},{"location":"users/usage/commands/#describe","title":"<code>describe</code>","text":"<p>Aliases: <code>status</code>, <code>st</code>, <code>desc</code>.</p> <p>Get a detailed description of a running DDEV project.</p> <p>Example:</p> <pre><code># Display details for the current project\nddev describe\n\n# Display details for my-project\nddev describe my-project\n</code></pre>"},{"location":"users/usage/commands/#dotenv","title":"<code>dotenv</code>","text":"<p>Commands for managing the contents of <code>.env</code> files.</p>"},{"location":"users/usage/commands/#dotenv-get","title":"<code>dotenv get</code>","text":"<p>Get the value of an environment variable from a .env file. Provide the path relative to the project root when specifying the file.</p> <p>Example:</p> <pre><code># Get the value of APP_KEY from the $DDEV_APPROOT/.env file\nddev dotenv get .env --app-key\n\n# Get the value of ENV_KEY from the $DDEV_APPROOT/.ddev/.env file\nddev dotenv get .ddev/.env --env-key\n</code></pre>"},{"location":"users/usage/commands/#dotenv-set","title":"<code>dotenv set</code>","text":"<p>Alias: <code>dotenv add</code>.</p> <p>Create or update a <code>.env</code> file with values specified via long flags from the command line. Flags in the format <code>--env-key=value</code> will be converted to environment variable names like <code>ENV_KEY=\"value\"</code>. The .env file should be named <code>.env</code> or <code>.env.&lt;servicename&gt;</code> or <code>.env.&lt;something&gt;</code> All environment variables can be used and expanded in <code>.ddev/docker-compose.*.yaml</code> files. Provide the path relative to the project root when specifying the file.</p> <p>Example:</p> <pre><code># Create or update $DDEV_APPROOT/.env file with APP_KEY=\"value\"\nddev dotenv set .env --app-key=value\n\n# Create or update $DDEV_APPROOT/.ddev/.env file with EXTRA=\"value\" and ANOTHER_KEY=\"extra value\"\nddev dotenv set .ddev/.env --extra value --another-key \"extra value\"\n\n# Create or update $DDEV_APPROOT/.ddev/.env.redis file with REDIS_TAG=\"7-bookworm\"\nddev dotenv set .ddev/.env.redis --redis-tag 7-bookworm\n</code></pre>"},{"location":"users/usage/commands/#drush","title":"<code>drush</code>","text":"<p>Alias: <code>dr</code>.</p> <p>Run the <code>drush</code> command; available only in projects of type <code>drupal*</code>, and only available if <code>drush</code> is in the project. On projects of type <code>drupal</code>, <code>drush</code> should be installed in the project itself, (<code>ddev composer require drush/drush</code>). On projects of type <code>drupal7</code> <code>drush</code> 8 is provided by DDEV.</p> <pre><code># Show drush status/configuration\nddev drush st\n</code></pre>"},{"location":"users/usage/commands/#exec","title":"<code>exec</code>","text":"<p>Alias: <code>.</code>.</p> <p>Execute a shell command in the container for a service. Uses the web service by default.</p> <p>To run your command in a different service container, run <code>ddev exec --service &lt;service&gt; &lt;cmd&gt;</code>. Use the <code>--raw</code> flag if you\u2019d like to run a raw, uninterpreted command in a container.</p> <p>Flags:</p> <ul> <li><code>--dir</code>, <code>-d</code>: Define the execution directory within the container.</li> <li><code>--raw</code>: Use raw exec (do not interpret with Bash inside container). (default <code>true</code>)</li> <li><code>--service</code>, <code>-s</code>: Define the service to connect to. (e.g. <code>web</code>, <code>db</code>) (default <code>\"web\"</code>)</li> <li><code>--quiet</code>, <code>-q</code>: Suppress detailed error message.</li> </ul> <p>Example:</p> <pre><code># List the web container\u2019s docroot contents\nddev exec ls /var/www/html\n\n# List the web container\u2019s vendor directory contents\nddev exec --dir /var/www/html/vendor ls\n\n# Output a long, recursive list of the files in the web container\nddev exec --raw -- ls -lR\n\n# Suppress detailed error message: \n# \"Failed to execute command `exit 1`: exit status 1\"\nddev exec -q \"exit 1\"\n</code></pre>"},{"location":"users/usage/commands/#export-db","title":"<code>export-db</code>","text":"<p>Dump a database to a file or to stdout.</p> <p>Flags:</p> <ul> <li><code>--bzip2</code>: Use bzip2 compression.</li> <li><code>--database</code>, <code>-d</code>: Target database to export from (default <code>\"db\"</code>)</li> <li><code>--file</code>, <code>-f</code>: Path to a SQL dump file to export to</li> <li><code>--gzip</code>: Use gzip compression (default <code>true</code>)</li> <li><code>--xz</code>: Use xz compression.</li> </ul> <p>Example:</p> <pre><code># Dump and compress the current project\u2019s database to `/tmp/db.sql.gz`\nddev export-db --file=/tmp/db.sql.gz\n\n# Dump the current project\u2019s database, without compressing it, to `/tmp/db.sql`\nddev export-db --gzip=false --file /tmp/db.sql\n\n# Dump and compress the current project\u2019s `foo` database instead of `db`\nddev export-db --database=foo --file=/tmp/db.sql.gz\n\n# Output the current project\u2019s database and use `&gt;` to write to `/tmp/db.sql.gz`\nddev export-db &gt; /tmp/db.sql.gz\n\n# Dump my-project\u2019s database, without compressing it, to `/tmp/my-project.sql`\nddev export-db my-project --gzip=false --file=/tmp/my-project.sql\n</code></pre>"},{"location":"users/usage/commands/#heidisql","title":"<code>heidisql</code>","text":"<p>Open HeidiSQL with the current project\u2019s database (global shell host container command). This command is available on Windows, WSL2, and Linux.</p> <p>Requirements by platform:</p> <ul> <li>Windows: HeidiSQL installed at <code>C:\\Program Files\\HeidiSQL\\Heidisql.exe</code> </li> <li>WSL2: HeidiSQL accessible via <code>/mnt/c/Program Files/HeidiSQL/heidisql.exe</code></li> <li>Linux: HeidiSQL available at <code>/usr/bin/heidisql</code> or at <code>/usr/local/bin/heidisql</code></li> </ul> <p>Example:</p> <pre><code># Open the current project's database in HeidiSQL\nddev heidisql\n</code></pre>"},{"location":"users/usage/commands/#help","title":"<code>help</code>","text":"<p>Help about any command.</p> <p>Example:</p> <pre><code># Illuminate the virtues of the `describe` command\nddev help describe\n</code></pre>"},{"location":"users/usage/commands/#hostname","title":"<code>hostname</code>","text":"<p>Manage your hostfile entries.</p> <p>Flags:</p> <ul> <li><code>--remove</code>, <code>-r</code>: Remove the provided hostname - ip correlation.</li> <li><code>--remove-inactive</code>, <code>-R</code>: Remove hostnames of inactive projects.</li> </ul> <p>Example:</p> <pre><code>ddev hostname somesite.example.com 127.0.0.1\n</code></pre> <p><code>ddev hostname</code> runs a special <code>ddev-hostname</code> or <code>ddev-hostname.exe</code> executable to elevate privileges. The extra executable is installed/updated by DDEV\u2019s normal installation process or by the Windows installation process. On WSL2, <code>ddev-hostname.exe</code> is provided by the <code>ddev-wsl2</code> package and by the Windows installer. Install the package with <code>sudo apt-get update &amp;&amp; sudo apt-get install -y ddev-wsl2</code> or the equivalent for your Linux system.</p>"},{"location":"users/usage/commands/#import-db","title":"<code>import-db</code>","text":"<p>Import a SQL file into the project.</p> <p>Flags:</p> <ul> <li><code>--database</code>, <code>-d</code>: Target database to import into (default <code>\"db\"</code>)</li> <li><code>--extract-path</code>: Path to extract within the archive</li> <li><code>--file</code>, <code>-f</code>: Path to a SQL dump in <code>.sql</code>, <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.bz2</code>, <code>.tar.xz</code>, <code>.tgz</code>, or <code>.zip</code> format</li> <li><code>--no-drop</code>: Do not drop the database before importing</li> <li><code>--no-progress</code>: Do not output progress</li> </ul> <p>Example:</p> <pre><code># Start the interactive import utility\nddev import-db\n\n# Import the `.tarballs/db.sql` dump to the project database\nddev import-db --file=.tarballs/db.sql\n\n# Import the compressed `.tarballs/db.sql.gz` dump to the project database\nddev import-db --file=.tarballs/db.sql.gz\n\n# Import the compressed `.tarballs/db.sql.gz` dump to a `other_db` database\nddev import-db --database=additional_db --file=.tarballs/db.sql.gz\n\n# Import the `db.sql` dump to the project database\nddev import-db &lt; db.sql\n\n# Import the `db.sql` dump to the `my-project` default database\nddev import-db my-project &lt; db.sql\n\n# Uncompress `db.sql.gz` and pipe the result to the `import-db` command\ngzip -dc db.sql.gz | ddev import-db\n</code></pre>"},{"location":"users/usage/commands/#import-files","title":"<code>import-files</code>","text":"<p>Pull the uploaded files directory of an existing project to the default public upload directory of your project. More usage information and a description of the Tar or ZIP archive is in the usage section.</p> <p>Flags:</p> <ul> <li><code>--extract-path</code>: Path to extract within the archive.</li> <li><code>--source</code>, <code>-s</code>: Path to the source directory or source archive in <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.bz2</code>, <code>.tar.xz</code>, <code>.tgz</code>, or <code>.zip</code> format.</li> <li><code>--target</code>, <code>-t</code>: Target upload dir, defaults to the first upload dir.</li> </ul> <p>Example:</p> <pre><code># Extract+import `/path/to/files.tar.gz` to the project\u2019s first upload directory\nddev import-files --source=/path/to/files.tar.gz\n\n# Import `/path/to/dir` contents to the project\u2019s first upload directory\nddev import-files --source=/path/to/dir\n\n# Import `.tarballs/files.tar.xz` contents to the project\u2019s `../private` upload directory\nddev import-files --source=.tarballs/files.tar.xz --target=../private\n\n# Import `/path/to/dir` contents to the project\u2019s `sites/default/files` upload directory\nddev import-files -s=.tarballs/files.tar.gz -t=sites/default/files\n</code></pre>"},{"location":"users/usage/commands/#launch","title":"<code>launch</code>","text":"<p>Launch a browser with the current site (global shell host container command).</p> <p>Flags:</p> <ul> <li><code>--mailpit</code>, <code>-m</code>: Open Mailpit.</li> </ul> <p>How to disable HTTP redirect to HTTPS?</p> <p>Recommendations for:</p> <ul> <li>Google Chrome</li> <li>Mozilla Firefox</li> <li>Safari</li> </ul> <p>Example:</p> <pre><code># Open your project\u2019s base URL in the default browser\nddev launch\n\n# Open Mailpit in the default browser\nddev launch --mailpit\n\n# Open your project\u2019s base URL appended with `temp/phpinfo.php`\nddev launch temp/phpinfo.php\n\n# Open the full URL (any website) in the default browser\nddev launch https://your.ddev.site\n\n# Open your project\u2019s base URL using a specific port\nddev launch :3000\n</code></pre>"},{"location":"users/usage/commands/#list","title":"<code>list</code>","text":"<p>Aliases: <code>l</code>, <code>ls</code>.</p> <p>List projects.</p> <p>Flags:</p> <ul> <li><code>--active-only</code>, <code>-A</code>: If set, only currently active projects will be displayed.</li> <li><code>--continuous</code>: If set, project information will be emitted until the command is stopped.</li> <li><code>--continuous-sleep-interval</code>, <code>-I</code>: Time in seconds between <code>ddev list --continuous</code> output lists. (default <code>1</code>)</li> <li><code>--type</code>, <code>-t</code>: Show only projects of this type (e.g. <code>drupal</code>, <code>wordpress</code>, <code>php</code>).</li> <li><code>--wrap-table</code>, <code>-W</code>: Display table with wrapped text if required.</li> </ul> <p>Example:</p> <pre><code># List all projects\nddev list\n\n# List all running projects\nddev list --active-only\n\n# List all WordPress projects\nddev list --type wordpress\n</code></pre>"},{"location":"users/usage/commands/#logs","title":"<code>logs</code>","text":"<p>Get the logs from your running services.</p> <p>Flags:</p> <ul> <li><code>--follow</code>, <code>-f</code>: Follow the logs in real time.</li> <li><code>--service</code>, <code>-s</code>: Defines the service to retrieve logs from (e.g. <code>web</code>, <code>db</code>). (default <code>\"web\"</code>)</li> <li><code>--tail</code>: How many lines to show.</li> <li><code>--time</code>, <code>-t</code>: Add timestamps to logs.</li> </ul> <p>Example:</p> <pre><code># Display recent logs from the current project\u2019s web server\nddev logs\n\n# Stream logs from the current project\u2019s web server in real time\nddev logs -f\n\n# Display recent logs from the current project\u2019s database server\nddev logs -s db\n\n# Display recent logs from my-project\u2019s database server\nddev logs -s db my-project\n</code></pre>"},{"location":"users/usage/commands/#magento","title":"<code>magento</code>","text":"<p>Run the <code>magento</code> command; available only in projects of type <code>magento2</code>, and only works if <code>bin/magento</code> is in the project.</p> <pre><code># Show all magento subcommands\nddev magento list\n</code></pre>"},{"location":"users/usage/commands/#mailpit","title":"<code>mailpit</code>","text":"<p>Launch a browser with mailpit for the current project (global shell host container command).</p> <p>Example:</p> <pre><code># Open Mailpit in the default browser\nddev mailpit\n</code></pre>"},{"location":"users/usage/commands/#mariadb","title":"<code>mariadb</code>","text":"<p>Run MariaDB client in the database container (global shell db container command). This is only available on projects that use the <code>mariadb</code> database type. (This is the same as the <code>mysql</code> command, but MariaDB is changing the name of their CLI client.)</p> <p>Example:</p> <pre><code># Run the database container\u2019s MariaDB client as root user\nddev mariadb\n\n# Run the database container\u2019s MariaDB client as db user\nddev mariadb -udb -pdb\n\n# Pipe the `SHOW TABLES;` command to the MariaDB client to see a list of tables\necho 'SHOW TABLES;' | ddev mariadb\n</code></pre>"},{"location":"users/usage/commands/#mutagen","title":"<code>mutagen</code>","text":"<p>Commands for Mutagen status and sync, etc.</p>"},{"location":"users/usage/commands/#mutagen-logs","title":"<code>mutagen logs</code>","text":"<p>Show Mutagen logs for debugging.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>: Show full Mutagen logs.</li> </ul> <p>Example:</p> <pre><code># Stream Mutagen\u2019s logs in real time\nddev mutagen logs\n\n# Stream Mutagen\u2019s more detailed logs in real time\nddev mutagen logs --verbose\n</code></pre>"},{"location":"users/usage/commands/#mutagen-monitor","title":"<code>mutagen monitor</code>","text":"<p>Monitor Mutagen status.</p> <p>Example:</p> <pre><code># Start Mutagen\u2019s sync process and monitor its status in real time\nddev mutagen sync &amp;&amp; ddev mutagen monitor\n</code></pre>"},{"location":"users/usage/commands/#mutagen-reset","title":"<code>mutagen reset</code>","text":"<p>Stops a project and removes the Mutagen Docker volume.</p> <pre><code># Reset Mutagen data for the current project\nddev mutagen reset\n\n# Reset Mutagen data for my-project\nddev mutagen reset my-project\n</code></pre>"},{"location":"users/usage/commands/#mutagen-status","title":"<code>mutagen status</code>","text":"<p>Alias: <code>mutagen st</code>.</p> <p>Shows Mutagen sync status.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>, <code>-l</code>: Extended/verbose output for Mutagen status.</li> </ul> <p>Example:</p> <pre><code># Display Mutagen sync status for the current project\nddev mutagen status\n\n# Display Mutagen sync status for my-project\nddev mutagen status my-project\n</code></pre>"},{"location":"users/usage/commands/#mutagen-sync","title":"<code>mutagen sync</code>","text":"<p>Explicit sync for Mutagen.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>: Extended/verbose output for Mutagen status.</li> </ul> <p>Example:</p> <pre><code># Initiate Mutagen sync for the current project\nddev mutagen sync\n\n# Initiate Mutagen sync for my-project\nddev mutagen sync my-project\n</code></pre>"},{"location":"users/usage/commands/#mutagen-version","title":"<code>mutagen version</code>","text":"<p>Display the version of the Mutagen binary and the location of its components.</p> <p>Example:</p> <pre><code># Print Mutagen details\nddev mutagen version\n</code></pre>"},{"location":"users/usage/commands/#mysql","title":"<code>mysql</code>","text":"<p>Run MySQL client in the database container (global shell db container command). This is only available on projects that use the <code>mysql</code> or <code>mariadb</code> database types.</p> <p>Example:</p> <pre><code># Run the database container\u2019s MySQL client as root user\nddev mysql\n\n# Run the database container\u2019s MySQL client as db user\nddev mysql -udb -pdb\n\n# Pipe the `SHOW TABLES;` command to the MySQL client to see a list of tables\necho 'SHOW TABLES;' | ddev mysql\n</code></pre>"},{"location":"users/usage/commands/#npm","title":"<code>npm</code>","text":"<p>Run <code>npm</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Install JavaScript packages using `npm`\nddev npm install\n\n# Update JavaScript packages using `npm`\nddev npm update\n</code></pre>"},{"location":"users/usage/commands/#npx","title":"<code>npx</code>","text":"<p>Run <code>npx</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Initialize Biome in the project\nddev npx @biomejs/biome init\n\n# Create a new Next.js app\nddev npx create-next-app@latest\n</code></pre>"},{"location":"users/usage/commands/#nvm","title":"<code>nvm</code>","text":"<p>Run <code>nvm</code> inside the web container (global shell web container command).</p> <p>Tip</p> <p>Use of <code>ddev nvm</code> is discouraged because <code>nodejs_version</code> is much easier to use, can specify any version, and is more robust than using <code>nvm</code>.</p> <p>If your project previously made use of <code>nvm</code>, you will need to revert back to using system defined version by running <code>ddev nvm alias default system</code> as per the example below.</p> <p>Example:</p> <pre><code># Use `nvm` to switch to Node.js v20\nddev nvm install 20\n\n# Check the installed Node.js version\nddev nvm current\n\n# Reset Node.js to `nodejs_version`\nddev nvm alias default system\n\n# Switch between two installed Node.js versions\nddev nvm install 20\nddev nvm install 18\nddev nvm alias default 20\nddev nvm alias default 18\n</code></pre> <p><code>nvm use</code> works only inside the web container after <code>ddev ssh</code></p> <p>Use <code>ddev nvm alias default &lt;version&gt;</code> instead.</p>"},{"location":"users/usage/commands/#php","title":"<code>php</code>","text":"<p>Run <code>php</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Output the web container\u2019s PHP version\nddev php --version\n</code></pre>"},{"location":"users/usage/commands/#poweroff","title":"<code>poweroff</code>","text":"<p>Alias: <code>powerdown</code>.</p> <p>Completely stop all projects and containers.</p> <p>Tip</p> <p>This is the equivalent of running <code>ddev stop -a --stop-ssh-agent</code>.</p> <p>Example:</p> <pre><code># Stop all projects and containers\nddev poweroff\n</code></pre>"},{"location":"users/usage/commands/#psql","title":"<code>psql</code>","text":"<p>Run PostgreSQL client in the database container (global shell db container command). This is only available on projects that use the <code>postgres</code> database type.</p> <p>Example:</p> <pre><code># List available databases\nddev psql -l\n\n# List tables in the default 'db' database\necho \"\\dt;\" | ddev psql\n</code></pre>"},{"location":"users/usage/commands/#pull","title":"<code>pull</code>","text":"<p>Pull files and database using a configured provider plugin.</p> <p>Flags:</p> <ul> <li><code>--environment=ENV1=val1,ENV2=val2</code></li> <li><code>--skip-confirmation</code>, <code>-y</code>: Skip confirmation step.</li> <li><code>--skip-db</code>: Skip pulling database archive.</li> <li><code>--skip-files</code>: Skip pulling file archive.</li> <li><code>--skip-import</code>: Download archive(s) without importing than.</li> </ul> <p>Example:</p> <pre><code># Pull a backup from the configured Pantheon project to use locally\nddev pull pantheon\n\n# Pull a backup from the configured Upsun project to use locally\nddev pull upsun\n\n# Pull a backup from the configured Pantheon project without confirming\nddev pull pantheon -y\n\n# Pull the Upsun database *only* without confirming\nddev pull upsun --skip-files -y\n\n# Pull the localfile integration\u2019s files *only* without confirming\nddev pull localfile --skip-db -y\n\n# Pull from Upsun specifying the environment variables UPSUN_ENVIRONMENT and UPSUN_CLI_TOKEN on the command line\nddev pull upsun --environment=UPSUN_ENVIRONMENT=main,UPSUN_CLI_TOKEN=abcdef\n</code></pre>"},{"location":"users/usage/commands/#push","title":"<code>push</code>","text":"<p>Push files and database using a configured provider plugin.</p> <p>Example:</p> <pre><code># Push local files and database to the configured Pantheon project\nddev push pantheon\n\n# Push local files and database to the configured Upsun project\nddev push upsun\n\n# Push files and database to Pantheon without confirming\nddev push pantheon -y\n\n# Push database only to Upsun without confirming\nddev push upsun --skip-files -y\n\n# Push files only to Acquia without confirming\nddev push acquia --skip-db -y\n</code></pre>"},{"location":"users/usage/commands/#querious","title":"<code>querious</code>","text":"<p>Open Querious with the current project\u2019s MariaDB or MySQL database (global shell host container command). This is only available if <code>Querious.app</code> is installed as <code>/Applications/Querious.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in Querious\nddev querious\n</code></pre>"},{"location":"users/usage/commands/#restart","title":"<code>restart</code>","text":"<p>Restart one or several projects.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Restart all projects.</li> </ul> <p>Example:</p> <pre><code># Restart the current project\nddev restart\n\n# Restart my-project and my-other-project\nddev restart my-project my-other-project\n\n# Restart all projects\nddev restart --all\n</code></pre>"},{"location":"users/usage/commands/#sake","title":"<code>sake</code>","text":"<p>Run the <code>sake</code> command, only available for Silverstripe CMS projects and if the <code>sake</code> command is available in the <code>vendor/bin</code> folder.</p> <p>Common commands:</p> <ul> <li>Build database: <code>ddev sake dev/build</code> (or <code>ddev sake db:build</code> from Silverstripe CMS 6 onwards)</li> <li>List of available tasks: <code>ddev sake dev/tasks</code> (or <code>ddev sake tasks</code> from Silverstripe CMS 6 onwards)</li> </ul>"},{"location":"users/usage/commands/#self-upgrade","title":"<code>self-upgrade</code>","text":"<p>Output instructions for updating or upgrading DDEV. The command doesn\u2019t perform the upgrade, but tries to provide instructions relevant to your installation.</p> <p>Example:</p> <pre><code>\u2192  ddev self-upgrade\n\nDDEV appears to have been installed with install_ddev.sh, you can run that script again to update.\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre>"},{"location":"users/usage/commands/#sequelace","title":"<code>sequelace</code>","text":"<p>Open SequelAce with the current project\u2019s database (global shell host container command). This command is only available if <code>Sequel Ace.app</code> is installed as <code>/Applications/Sequel ace.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in SequelAce\nddev sequelace\n</code></pre>"},{"location":"users/usage/commands/#sequelpro","title":"<code>sequelpro</code>","text":"<p>Sequel Pro is abandoned!</p> <p>The project is abandoned and doesn\u2019t work with MySQL 8. We recommend Sequel Ace, Querious, TablePlus, and DBeaver.</p> <p>Open Sequel Pro with the current project\u2019s database (global shell host container command). This command is only available if <code>Sequel Pro.app</code> is installed as <code>/Applications/Sequel pro.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in Sequel Pro\nddev sequelpro\n</code></pre>"},{"location":"users/usage/commands/#service","title":"<code>service</code>","text":"<p>Add or remove, enable or disable extra services.</p>"},{"location":"users/usage/commands/#service-disable","title":"<code>service disable</code>","text":"<p>Disable a service.</p> <p>Example:</p> <pre><code># Disable the Solr service\nddev service disable solr\n</code></pre>"},{"location":"users/usage/commands/#service-enable","title":"<code>service enable</code>","text":"<p>Enable a service.</p> <p>Example:</p> <pre><code># Enable the Solr service\nddev service enable solr\n</code></pre>"},{"location":"users/usage/commands/#share","title":"<code>share</code>","text":"<p>Share the current project on the internet via ngrok.</p> <p>Tip</p> <p>Any ngrok flag can also be specified in the <code>ngrok_args</code> config setting.</p> <p>Flags:</p> <ul> <li><code>--ngrok-args</code>: Accepts any flag from <code>ngrok http --help</code>.</li> </ul> <p>Example:</p> <pre><code># Share the current project with ngrok\nddev share\n\n# Share the current project with ngrok, using domain `foo.ngrok-free.app`\nddev share --ngrok-args \"--domain foo.ngrok-free.app\"\n\n# Share the current project using ngrok\u2019s basic-auth argument\nddev share --ngrok-args \"--basic-auth username:pass1234\"\n\n# Share my-project with ngrok\nddev share my-project\n</code></pre>"},{"location":"users/usage/commands/#snapshot","title":"<code>snapshot</code>","text":"<p>Create a database snapshot for one or more projects.</p> <p>This uses <code>xtrabackup</code> or <code>mariabackup</code> to create a database snapshot in the <code>.ddev/db_snapshots</code> directory. These are compatible with server backups using the same tools and can be restored with the <code>snapshot restore</code> command.</p> <p>See Snapshotting and Restoring a Database for more detail, or Database Management for more on working with databases in general.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Snapshot all projects. (Will start stopped or paused projects.)</li> <li><code>--cleanup</code>, <code>-C</code>: Cleanup snapshots.</li> <li><code>--list</code>, <code>-l</code>: List snapshots.</li> <li><code>--name</code>, <code>-n</code>: Provide a name for the snapshot.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Take a database snapshot for the current project\nddev snapshot\n\n# Take a database snapshot for the current project, named `my_snapshot_name`\nddev snapshot --name my_snapshot_name\n\n# Take a snapshot for the current project, cleaning up existing snapshots\nddev snapshot --cleanup\n\n# Take a snapshot for the current project, cleaning existing snapshots and skipping prompt\nddev snapshot --cleanup -y\n\n# List the current project\u2019s snapshots\nddev snapshot --list\n\n# Take a snapshot for each project\nddev snapshot --all\n</code></pre>"},{"location":"users/usage/commands/#snapshot-restore","title":"<code>snapshot restore</code>","text":"<p>Restores a database snapshot from the <code>.ddev/db_snapshots</code> directory.</p> <p>Flags:</p> <ul> <li><code>--latest</code>: Use the latest snapshot.</li> </ul> <p>Example:</p> <pre><code># Restore the most recent snapshot\nddev snapshot restore --latest\n\n# Restore the previously-taken `my_snapshot_name` snapshot\nddev snapshot restore my_snapshot_name\n</code></pre>"},{"location":"users/usage/commands/#ssh","title":"<code>ssh</code>","text":"<p>Starts a shell session in a service container. Uses the web service by default.</p> <p>Flags:</p> <ul> <li><code>--dir</code>, <code>-d</code>: Defines the destination directory within the container.</li> <li><code>--service</code>, <code>-s</code>: Defines the service to connect to. (default <code>\"web\"</code>)</li> </ul> <p>Example:</p> <pre><code># SSH into the current project\u2019s web container\nddev ssh\n\n# SSH into the current project\u2019s database container\nddev ssh -s db\n\n# SSH into the web container for my-project\nddev ssh my-project\n\n# SSH into the docroot of the current project\u2019s web container\nddev ssh -d /var/www/html\n</code></pre>"},{"location":"users/usage/commands/#start","title":"<code>start</code>","text":"<p>Alias: <code>add</code>.</p> <p>Start a DDEV project.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Start all projects.</li> <li><code>--profiles=&lt;optional-compose-profile-list&gt;</code>: Start services labeled with the Docker Compose profiles in comma-separated list of profiles.</li> <li><code>--skip-confirmation</code>, <code>-y</code>: Skip any confirmation steps.</li> </ul> <p>Example:</p> <pre><code># Start the current project\nddev start\n\n# Start my-project and my-other-project\nddev start my-project my-other-project\n\n# Start all projects\nddev start --all\n</code></pre>"},{"location":"users/usage/commands/#stop","title":"<code>stop</code>","text":"<p>Aliases: <code>rm</code>, <code>remove</code>.</p> <p>Stop and remove the containers of a project. Does not lose or harm anything unless you add <code>--remove-data</code>.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Stop and remove all running or container-stopped projects and remove from global projects list.</li> <li><code>--omit-snapshot</code>, <code>-O</code>: Omit/skip database snapshot.</li> <li><code>--remove-data</code>, <code>-R</code>: Remove stored project data (MySQL, logs, etc.).</li> <li><code>--snapshot</code>, <code>-S</code>: Create database snapshot.</li> <li><code>--stop-ssh-agent</code>: Stop the <code>ddev-ssh-agent</code> container.</li> <li><code>--unlist</code>, <code>-U</code>: Remove the project from global project list, so it won\u2019t appear in <code>ddev list</code> until started again.</li> </ul> <p>Example:</p> <pre><code># Stop the current project\nddev stop\n\n# Stop my-project, my-other-project, and my-third-project\nddev stop my-project my-other-project my-third-project\n\n# Stop all projects\nddev stop --all\n\n# Stop all projects and the `ddev-ssh-agent` container\nddev stop --all --stop-ssh-agent\n\n# Stop all projects and remove their data\nddev stop --remove-data\n</code></pre>"},{"location":"users/usage/commands/#tableplus","title":"<code>tableplus</code>","text":"<p>Open TablePlus with the current project\u2019s database (global shell host container command). This command is only available if <code>TablePlus.app</code> is installed as <code>/Applications/TablePlus.app</code>.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in TablePlus\nddev tableplus\n</code></pre>"},{"location":"users/usage/commands/#typo3","title":"<code>typo3</code>","text":"<p>Run the <code>typo3</code> command; available only in projects of type <code>typo3</code>, and only works if <code>typo3</code> is in the <code>$PATH</code> inside the container; normally it\u2019s in <code>vendor/bin/typo3</code> so will be found.</p> <pre><code># Show typo3 site configuration\nddev typo3 site:show\n</code></pre>"},{"location":"users/usage/commands/#version","title":"<code>version</code>","text":"<p>Print DDEV and component versions.</p> <p>Example:</p> <pre><code># Print DDEV and platform version details\nddev version\n</code></pre> <p>Tip</p> <p><code>ddev --version</code> is a more concise command that only outputs the DDEV version without component versions.</p>"},{"location":"users/usage/commands/#wp","title":"<code>wp</code>","text":"<p>Run the WP-CLI <code>wp</code> command; available only in projects of type <code>wordpress</code>.</p> <pre><code># Install WordPress site using `wp core install`\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='New-WordPress' --admin_user=admin --admin_email=admin@example.com --prompt=admin_password\n</code></pre> <p>Tip</p> <p>See WordPress Specifics for more information.</p>"},{"location":"users/usage/commands/#xdebug","title":"<code>xdebug</code>","text":"<p>Enable or disable Xdebug (global shell web container command).</p> <ul> <li>The <code>on</code> argument is equivalent to <code>enable</code> and <code>true</code>.</li> <li>The <code>off</code> argument is equivalent to <code>disable</code> and <code>false</code>.</li> </ul> <pre><code># Display whether Xdebug is running\nddev xdebug status\n\n# Display detailed Xdebug diagnostic information\nddev xdebug info\n\n# Turn Xdebug on\nddev xdebug\n\n# Turn Xdebug on\nddev xdebug on\n\n# Turn Xdebug off\nddev xdebug off\n\n# Toggle Xdebug on and off\nddev xdebug toggle\n</code></pre> <p>The <code>ddev xdebug info</code> command displays detailed diagnostic information from Xdebug\u2019s <code>xdebug_info()</code> function, including enabled features, optional features, diagnostic log, step debugging status, and all Xdebug configuration directives. This may be useful for troubleshooting Xdebug configuration issues. <code>xdebug info</code> is only supported on Xdebug 3+.</p>"},{"location":"users/usage/commands/#xhgui","title":"<code>xhgui</code>","text":"<p>Enable or disable XHGui</p> <p><code>ddev xhgui</code> only is useful if xhprof_mode is set to <code>xhgui</code>.</p> <ul> <li>The <code>on</code> argument is equivalent to <code>enable</code> and <code>true</code>.</li> <li>The <code>off</code> argument is equivalent to <code>disable</code> and <code>false</code>.</li> </ul> <pre><code># Display whether XHGui is enabled and running\nddev xhgui status\n\n# Turn XHGui on\nddev xhgui\n\n# Launch the XHGui UI\nddev xhgui launch\n\n# Turn XHGui on\nddev xhgui on\n\n# Turn XHGui off\nddev xhgui off\n</code></pre>"},{"location":"users/usage/commands/#xhprof","title":"<code>xhprof</code>","text":"<p>Enable or disable Xhprof (global shell web container command).</p> <ul> <li>The <code>on</code> argument is equivalent to <code>enable</code> and <code>true</code>.</li> <li>The <code>off</code> argument is equivalent to <code>disable</code> and <code>false</code>.</li> </ul> <pre><code># Display whether Xhprof is running\nddev xhprof status\n\n# Turn Xhprof on\nddev xhprof\n\n# Turn Xhprof on\nddev xhprof on\n\n# Turn Xhprof off\nddev xhprof off\n</code></pre>"},{"location":"users/usage/commands/#yarn","title":"<code>yarn</code>","text":"<p>Run <code>yarn</code> commands inside the web container in the root of the project (global shell host container command).</p> <p>Tip</p> <p>Use <code>--cwd</code> for another directory, or you can change directories to the desired directory and <code>ddev yarn</code> will act on the same relative directory inside the container.</p> <p>Tip</p> <p>If you want to define your Yarn version on a per project basis, set <code>corepack_enable: true</code> in <code>.ddev/config.yaml</code> or <code>ddev config --corepack-enable</code></p> <p>Example:</p> <pre><code># Use Yarn to install JavaScript packages\nddev yarn install\n\n# Use Yarn to add the Lerna package\nddev yarn add lerna\n\n# Use yarn in a relative directory\ncd web/core &amp;&amp; ddev yarn add lerna\n\n# Use Yarn to add the Lerna package from the `web/core` directory\nddev yarn --cwd web/core add lerna\n\n# Use latest yarn or specified yarn\nddev config --corepack-enable &amp;&amp; ddev restart\nddev yarn set version stable\nddev yarn --version\n</code></pre>"},{"location":"users/usage/database-management/","title":"Database Management","text":"<p>DDEV provides lots of flexibility for managing your databases between your local, staging and production environments. You may commonly use the <code>ddev import-db</code> and <code>ddev export-db</code> commands, but there are plenty of other adaptable ways to work with your databases.</p> <p>If your project does not require a database, you can exclude it with the the <code>omit_containers</code> configuration option.</p> <p>Tip</p> <p>You can run <code>ddev [command] --help</code> for more info on many of the topics below.</p>","boost":2},{"location":"users/usage/database-management/#database-imports","title":"Database Imports","text":"<p>Import a database with one command, from one of the following file formats: <code>.sql</code>, <code>.sql.gz</code>, <code>.mysql</code>, <code>.mysql.gz</code>, <code>.tar</code>, <code>.tar.gz</code>, and <code>.zip</code>.</p> <p>Here\u2019s an example of a database import using DDEV:</p> <pre><code>ddev import-db --file=dumpfile.sql.gz\n</code></pre> <p>You can also:</p> <ul> <li>Use <code>ddev mysql</code> or <code>ddev psql</code> or the <code>mysql</code> and <code>psql</code> commands inside the <code>web</code> and <code>db</code> containers.</li> <li>Use a database client or database GUI to import and browse data.</li> </ul>","boost":2},{"location":"users/usage/database-management/#database-backends-and-defaults","title":"Database Backends and Defaults","text":"<p>You can use a variety of different database types, including MariaDB (5.5\u201310.8, 11.4, 11.8), MySQL (5.5\u20138.0, 8.4), and PostgreSQL (9\u201318). If you want to change database type, you need to export your database, run <code>ddev delete</code> to remove the project (and its existing database), change to a new database type, run <code>ddev start</code> again, and import your data.</p> <p>(For very old database types see Using DDEV to spin up a legacy PHP application.)</p> <p>DDEV creates a default database named <code>db</code> and default permissions for the <code>db</code> user with password <code>db</code>, and it\u2019s on the (inside Docker) hostname <code>db</code>.</p>","boost":2},{"location":"users/usage/database-management/#extra-databases","title":"Extra Databases","text":"<p>You can easily create and populate additional databases. For example, <code>ddev import-db --database=backend --file=backend.sql.gz</code> will create the database named <code>backend</code> with permissions for that same <code>db</code> user and import from the <code>backend.sql.gz</code> dumpfile.</p> <p>You can export in the same way: <code>ddev export-db -f mysite.sql.gz</code> will export your default database (<code>db</code>). <code>ddev export-db --database=backend -f backend-export.sql.gz</code> will dump the database named <code>backend</code>.</p>","boost":2},{"location":"users/usage/database-management/#snapshots","title":"Snapshots","text":"<p>Snapshots let you easily save the entire status of all of your databases, which can be great when you\u2019re working incrementally on migrations or updates and want to save state so you can start right back where you were.</p> <p>Snapshots can be named for easier reference later on. For example, <code>ddev snapshot --name=two-dbs</code> would make a snapshot named <code>two-dbs</code> in the <code>.ddev/db_snapshots</code> directory. It includes the entire state of the db server, so in the case of our two databases above, both databases and the system level <code>mysql</code> or <code>postgres</code> database will all be snapshotted. Then if you want to delete everything with <code>ddev delete -O</code> (omitting the snapshot since we have one already), and then <code>ddev start</code> again, we can <code>ddev snapshot restore two-dbs</code> and we\u2019ll be right back where we were.</p> <p>Use the <code>ddev snapshot restore</code> command to interactively choose among snapshots, or append <code>--latest</code> to restore the most recent snapshot: <code>ddev snapshot restore --latest</code>.</p> <p>Snapshots are stored as simple gzipped files in the project\u2019s <code>.ddev/db_snapshots</code> directory, and any or all snapshots can be removed with the <code>ddev snapshot --cleanup</code> command or by manually deleting the files when you want to save disk space or have no further use for them.</p>","boost":2},{"location":"users/usage/database-management/#database-clients","title":"Database Clients","text":"<p>The <code>ddev mysql</code> and <code>ddev psql</code> commands give you direct access to the <code>mysql</code> and <code>psql</code> clients in the database container, which can be useful for quickly running commands while you work. You might run <code>ddev mysql</code> to use interactive commands like <code>DROP DATABASE backend;</code> or <code>SHOW TABLES;</code>, or do things like <code>echo \"SHOW TABLES;\" | ddev mysql</code> or <code>ddev mysql -udb -pdb</code> to run with <code>db</code> user privileges.</p> <p>The <code>web</code> and <code>db</code> containers are each ready with MySQL/PostgreSQL clients, so you can <code>ddev ssh</code> or <code>ddev ssh -s db</code> and use <code>mysql</code> or <code>psql</code>.</p>","boost":2},{"location":"users/usage/database-management/#mysqldump-and-pg_dump","title":"<code>mysqldump</code> and <code>pg_dump</code>","text":"<p>The <code>web</code> and <code>db</code> containers come with <code>mysqldump</code>. You could run <code>ddev ssh</code> to enter the web container, for example, then <code>mkdir /var/www/html/.tarballs</code> and run <code>mysqldump db &gt;/var/www/html/.tarballs/db.sql</code> or run <code>mysqldump db | gzip &gt;/var/www/html/.tarballs/db.sql.gz</code> to create database dumps. Because <code>/var/www/html</code> is mounted into the container from your project root, the <code>.tarballs</code> directory will also show up in the root of the project on your host machine.</p> <p>The PostgreSQL database container includes normal <code>pg</code> commands like <code>pg_dump</code>.</p>","boost":2},{"location":"users/usage/database-management/#database-guis","title":"Database GUIs","text":"<p>If you\u2019d like to use a GUI database client, you\u2019ll need the right connection details and there may even be a command to launch it for you:</p> <ul> <li>phpMyAdmin, formerly built into DDEV core, can be installed by running <code>ddev add-on get ddev/ddev-phpmyadmin</code>.</li> <li>Adminer can be installed with <code>ddev add-on get ddev/ddev-adminer</code></li> <li>The <code>ddev describe</code> command displays the <code>Host:</code> details you\u2019ll need to connect to the <code>db</code> container externally, for example if you\u2019re using an on-host database browser like SequelAce.</li> <li>macOS users can use <code>ddev sequelace</code> to launch the free Sequel Ace database browser, <code>ddev tableplus</code> to launch TablePlus, <code>ddev querious</code> to launch Querious, <code>ddev dbeaver</code> to launch DBeaver, and the obsolete Sequel Pro is also supported with <code>ddev sequelpro</code>. (Each must be installed for the command to exist.)</li> <li>WSL2 and Linux users can use <code>ddev dbeaver</code> to launch DBeaver. (Must be installed for the command to exist.)</li> <li>PhpStorm (and all JetBrains tools) have a nice database browser. (If you use the DDEV Integration plugin this is all done for you.)<ul> <li>Choose a static <code>host_db_port</code> setting for your project. For example <code>host_db_port: 59002</code> (each project\u2019s database port should be different if you\u2019re running more than one project at a time). Use <code>ddev start</code> for it to take effect.</li> <li>Use the \u201cdatabase\u201d tool to create a source from \u201clocalhost\u201d, with the proper type <code>mysql</code> or <code>postgresql</code> and the port you chose, username <code>db</code> + password <code>db</code>.</li> <li>Explore away!</li> </ul> </li> <li>VS Code or any of its forks (Cursor, Windsurf, etc.) has DevDb, an extension that lets you access your database directly inside the editor.</li> <li>There\u2019s a sample custom command that will run the free MySQL Workbench on macOS, Windows or Linux. To use it, run:<ul> <li><code>cp ~/.ddev/commands/host/mysqlworkbench.example ~/.ddev/commands/host/mysqlworkbench</code></li> <li><code>ddev mysqlworkbench</code></li> </ul> </li> </ul>","boost":2},{"location":"users/usage/database-management/#database-query-examples","title":"Database Query Examples","text":"<p>You can query, update, or alter databases in DDEV like you would do on a regular server, using <code>ddev mysql</code>,  <code>ddev mariadb</code>, or <code>ddev psql</code> or using those command-line tools inside the web or DB containers. Some examples are given below.</p> <ul> <li> <p>Create a new empty database named <code>newdatabase</code>:</p> <pre><code>ddev mysql -e 'CREATE DATABASE newdatabase; GRANT ALL ON newdatabase.* TO \"db\"@\"%\";'\n</code></pre> </li> <li> <p>Show tables whose name begins with <code>node</code> :</p> <pre><code>ddev mysql -e 'SHOW TABLES LIKE \"node%\";'\n</code></pre> </li> <li> <p>Use <code>ddev mysql</code> or <code>ddev mariadb</code> and issue interactive queries:</p> <pre><code>ddev mariadb\n\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 28\nServer version: 10.11.10-MariaDB-ubu2204-log mariadb.org binary distribution\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [db]&gt; SELECT * FROM node WHERE type=\"article\";\n+-----+------+---------+--------------------------------------+----------+\n| nid | vid  | type    | uuid                                 | langcode |\n+-----+------+---------+--------------------------------------+----------+\n|  11 |   56 | article | 8af917ea-b150-4006-aeb9-877b53ebf289 | en       |\n|  12 |   54 | article | 27a53763-9fd8-4813-853b-b476f0a73849 | en       |\n+-----+------+---------+--------------------------------------+----------+\n2 rows in set (0.007 sec) \n</code></pre> </li> </ul>","boost":2},{"location":"users/usage/developer-tools/","title":"Built-in Developer Tools","text":"<p>Run <code>ddev describe</code> to see the project information and services available for your project and how to access them.</p>","boost":2},{"location":"users/usage/developer-tools/#command-line-tools-in-the-containers","title":"Command-line Tools in the Containers","text":"<p>Hundreds of useful developer tools are included inside the containers and can be used via <code>ddev exec</code> or <code>ddev ssh</code>. Some of those include:</p> <ul> <li>MySQL client (<code>mysql</code>) - Command-line interface for interacting with MySQL/MariaDB.</li> <li>PostgreSQL client (<code>psql</code>) - Command-line tool for PostgreSQL.</li> <li>Drush - Command-line shell and Unix scripting interface for Drupal.</li> <li>PHIVE - Command-line tool for \u201cPHAR Installation and Verification Environment\u201d.</li> <li>WP-CLI - Command-line tools for managing WordPress installations, available both as <code>wp</code> and as <code>wp-cli</code>.</li> <li>n98-magerun - Command-line tool for Magento 1 / OpenMage installations, available as <code>magerun</code>.</li> <li>n98-magerun2 - Command-line tool for Magento Open Source / Mage-OS / Adobe Commerce installations, available as <code>magerun2</code>.</li> <li><code>npm</code>, <code>nvm</code>, and <code>yarn</code> (these also have <code>ddev</code> shortcuts like <code>ddev npm</code>, <code>ddev nvm</code>, <code>ddev yarn</code>).</li> <li><code>node</code> (for front-end build tools like Vite, see the Vite Integration documentation)</li> <li><code>sqlite3</code></li> </ul> <p>These tools can be accessed for single commands using <code>ddev exec &lt;command&gt;</code> or <code>ddev ssh</code> for an interactive <code>bash</code> or <code>sh</code> session.</p> <p>You can also add tools that are not provided by default using <code>webimage_extra_packages</code> or a custom Dockerfile.</p>","boost":2},{"location":"users/usage/developer-tools/#ddev-and-composer","title":"DDEV and Composer","text":"<p>DDEV provides a built-in command to simplify use of PHP\u2019s dependency manager, Composer, without requiring it to be installed on the host machine. Generally, executing any Composer command through DDEV is as simple as prepending the command with <code>ddev</code>. DDEV will execute the command at the project root in the web container, passing (almost) all arguments and flags to Composer. To execute Composer in other directories within the container, use <code>ddev ssh</code> or <code>ddev exec -d &lt;dir&gt;</code>. For example:</p> <ul> <li><code>ddev composer help</code> runs Composer\u2019s help command to learn more about what\u2019s available.</li> <li><code>ddev composer require &lt;package&gt;</code> tells Composer to require a specific PHP package for the current project.</li> </ul> <p>Additionally, Composer can be used to initialize new projects with <code>ddev composer create-project</code>. This command supports limited argument and flag options, and will install a new project to the composer root (normally <code>/var/www/html</code>). The package and version arguments are required:</p> <p><code>ddev composer create-project [options] [--] [&lt;package&gt; [&lt;directory&gt; [&lt;version&gt;]]]</code></p> <p>For example:</p> <p><code>ddev composer create-project --no-dev typo3/cms-base-distribution . \"^9\"</code></p> <p>When using <code>ddev composer create-project</code> your project should be essentially empty or the command will refuse to run, to avoid loss of your files.</p> <p><code>ddev composer create-project</code> does these things in this order:</p> <ol> <li><code>composer create-project --no-plugins --no-scripts --no-install</code> clones a bare Composer package without any additional actions.</li> <li><code>composer run-script post-root-package-install</code> runs if <code>--no-scripts</code> is not given as a flag to <code>ddev composer create-project</code>.</li> <li><code>composer install</code> runs if <code>--no-install</code> is not given as a flag to <code>ddev composer create-project</code>.</li> <li><code>composer run-script post-create-project-cmd</code> runs if <code>--no-scripts</code> is not given as a flag to <code>ddev composer create-project</code>.</li> </ol> <p>All flags that you provide to <code>ddev composer create-project</code> are checked for validity. All invalid flags will be ignored. If they are valid for <code>composer create-project</code>, they will be also passed to <code>composer run-script</code> and <code>composer install</code>, but only if these commands support these flags.</p> <p>To execute a fully-featured <code>composer create-project</code> command, you can execute the command from within the container after executing <code>ddev ssh</code>, or pass the full command to <code>ddev exec</code>, like so:</p> <p><code>ddev exec composer create-project ...</code></p> <p>composer.json Location: It\u2019s most common for <code>composer.json</code> to be in the project root, but you can specify an alternate Composer root using DDEV\u2019s <code>composer_root</code> option in <code>.ddev/config.yaml</code>, or <code>ddev config --composer-root &lt;dir&gt;</code>. The <code>composer_root</code> value is the relative path from the project root to the directory containing <code>composer.json</code>. If yours is at <code>docroot/composer.json</code>, for example, the <code>composer_root</code> value should be <code>docroot</code>.</p> <p>Careful with Global Requirements!</p> <p>If you run <code>ddev composer global require</code> (or <code>composer global require</code> inside the web container), global packages will be installed at the home directory within the container (<code>~/.composer</code>) and will disappear when the container restarts\u2014meaning you\u2019ll need to re-run the command.</p> <p>You may want to synchronize created Composer configuration and installed packages with the DDEV\u2019s <code>homeadditions</code> directory on your host machine.</p> <p>How to debug Composer itself?</p> <p>To use Xdebug with Composer, see instructions.</p>","boost":2},{"location":"users/usage/developer-tools/#composer-from-vendorbincomposer","title":"Composer from <code>vendor/bin/composer</code>","text":"<p>If your <code>composer.json</code> specifies <code>composer/composer</code>, the version in <code>vendor/bin/composer</code> can be run with:</p> <pre><code>ddev exec vendor/bin/composer --version\n</code></pre> <p>If a custom <code>composer_root</code> is set, use:</p> <pre><code>ddev exec '$DDEV_COMPOSER_ROOT/vendor/bin/composer --version'\n</code></pre> <p></p>","boost":2},{"location":"users/usage/developer-tools/#windows-os-traditional-windows-and-ddev-composer","title":"Windows OS (Traditional Windows) and <code>ddev composer</code>","text":"<p>DDEV attempts to help with Composer and some configurations of Docker Desktop for Windows that introduce complex filesystem workarounds.</p> <p>Use <code>ddev composer</code> (Composer inside the container) instead of using <code>composer</code> on the host side, because it uses the right version of PHP and all its extensions for your project:</p> <ul> <li>On some older configurations of Docker Desktop for Windows, symlinks are created in the container as \u201csimulated symlinks\u201d, or XSym files. These special text files behave as symlinks inside the container (on CIFS filesystem), but appear as simple text files on the Windows host. (On the CIFS filesystem used by Docker for Windows, inside the container, there is no capability to create real symlinks even though Windows now has this capability.)</li> <li>DDEV attempts to clean up for this situation. Since Windows 10/11+ (in developer mode) can create real symlinks, DDEV scans your repository after a <code>ddev composer</code> command and attempts to convert XSym files into real symlinks. On older versions of Windows 10, it can only do this if your Windows 10 workstation is set to \u201cDeveloper Mode\u201d.</li> <li> <p>To enable developer mode on Windows 10/11+, search for \u201cdeveloper\u201d in settings:     </p> <p></p> </li> </ul>","boost":2},{"location":"users/usage/developer-tools/#email-capture-and-review-mailpit","title":"Email Capture and Review (Mailpit)","text":"<p>Mailpit is a mail catcher that\u2019s configured to capture and display emails sent by PHP in the development environment.</p> <p>After your project is started, access the Mailpit web interface at <code>https://mysite.ddev.site:8026</code>, or run <code>ddev mailpit</code> to launch it in your default browser.</p> <p>Mailpit will not intercept emails if your application is configured to use SMTP or a third-party ESP integration.</p> <p>If you\u2019re using SMTP for outgoing mail\u2014with Symfony Mailer or SMTP modules, for example\u2014update your application\u2019s SMTP server configuration to use <code>localhost</code> and Mailpit\u2019s port <code>1025</code>.</p> <p>For Drupal 9+ <code>settings.ddev.php</code> overrides the Symfony Mailer sendmail configuration to use Mailpit.</p> <p>For Drupal 8/9 <code>settings.ddev.php</code> overrides the Swift Mailer transport configuration to use Mailpit.</p> <p>For Laravel projects, Mailpit will capture Swift messages via SMTP. Update your <code>.env</code> to use Mailpit with the following settings:</p> <pre><code>MAIL_MAILER=smtp\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n</code></pre>","boost":2},{"location":"users/usage/developer-tools/#using-development-tools-on-the-host-machine","title":"Using Development Tools on the Host Machine","text":"<p>It\u2019s possible in many cases to use development tools installed on your host machine on a project provisioned by DDEV. Tools that interact with files and require no database connection, such as Git or Composer, can be run from the host machine against the codebase for a DDEV project with no additional configuration necessary.</p>","boost":2},{"location":"users/usage/developer-tools/#database-connections-from-the-host","title":"Database Connections from the Host","text":"<p>If you need to connect to your project\u2019s database from your workstation, run <code>ddev describe</code> to show the database connection information, like <code>Host: localhost:49156</code>.</p> <p>Each project\u2019s database port is unique, and randomly chosen from available ports on your system when you run <code>ddev start</code>.</p> <p>You can force this port to be the same on every <code>ddev start</code> by setting <code>host_db_port</code> in the project\u2019s <code>.ddev/config.yaml</code>. For example, <code>host_db_port: \"49156\"</code> or <code>ddev config --host-db-port=49156</code>. This value needs to be different on each running DDEV project, and unless it is set, the database port will change on every <code>ddev start</code>.</p> <p>You can use this port with various tools that need a direct port, like <code>mysql</code> or <code>psql</code> clients, but it\u2019s usually easiest to use <code>ddev mysql</code>, <code>ddev psql</code>, <code>ddev sequelace</code>, <code>ddev tableplus</code>, etc, which set everything up for you.</p> <p>(If you use PhpStorm and its integrated database browser, use the DDEV Integration Plugin to manage all of this for you.)</p>","boost":2},{"location":"users/usage/developer-tools/#ddev-and-terminus","title":"DDEV and Terminus","text":"<p>Terminus is a command-line tool providing advanced interaction with Pantheon services. <code>terminus</code> is available inside the project\u2019s container, allowing users to get information from, or issue commands to their Pantheon-hosted sites. This is an especially helpful feature for Windows users since Terminus is only officially supported on Unix-based systems.</p> <p>How to change Terminus version?</p> <p>See How to Downgrade Terminus in DDEV\u2019s Web Container and Customize Other Bundled Tools.</p> <p>To use Terminus, you\u2019ll first need to:</p> <ol> <li>Use a machine token. (See Pantheon provider discussion.)</li> <li>Run <code>ddev ssh</code> to tunnel into your container.</li> <li>Issue a command using the keyword <code>terminus</code>. For help using Terminus, try <code>terminus list</code> to get a list of possible commands.</li> </ol> <p>Terminus also allows you to issue Drush, WP-CLI, and Composer commands to your Pantheon server. These are all usable from within the container as well, but will require authentication via either your Pantheon password or an SSH key. To use your host machine\u2019s SSH key, you can use the <code>ddev auth ssh</code> command described here.</p>","boost":2},{"location":"users/usage/diagnostics/","title":"Diagnostics","text":""},{"location":"users/usage/diagnostics/#opt-in-usage-information","title":"Opt-In Usage Information","text":"<p>When you start DDEV for the first time or install a new release, you\u2019ll be asked whether to send usage and error information to DDEV\u2019s developers.</p> <p>Regardless of your choice, you can change this at any time by editing <code>~/.ddev/global_config.yaml</code> and setting <code>instrumentation_opt_in: true</code> or <code>instrumentation_opt_in: false</code>.</p> <p>If you choose to share diagnostics, it helps us tremendously in our effort to improve the tool. Here\u2019s an example of what we might see:</p> <p></p> <p>If you have any reservations about this, please opt out (<code>ddev config global --instrumentation-opt-in=false</code>). If you have any issues or concerns with it, we\u2019d like to know.</p>"},{"location":"users/usage/faq/","title":"FAQ","text":"<p>Frequently-asked questions organized into high-level functionality, investigating issues, daily usage, and connecting with our community.</p>","boost":2},{"location":"users/usage/faq/#features-requirements","title":"Features &amp; Requirements","text":"","boost":2},{"location":"users/usage/faq/#what-operating-systems-will-ddev-work-with","title":"What operating systems will DDEV work with?","text":"<p>DDEV works nearly anywhere Docker will run, including macOS, WSL2, Windows 10/11 Pro/Enterprise and Home, and every Linux variant we\u2019ve ever tried. It also runs in many Linux-like environments, like ChromeOS (in Linux machine). DDEV works the same on each of these platforms since the important work is done inside identical Docker containers. This means that a team using diverse environments can share everything without trouble.</p>","boost":2},{"location":"users/usage/faq/#does-ddev-change-or-deploy-my-code","title":"Does DDEV change or deploy my code?","text":"<p>You are responsible for your code and its deployment. DDEV does not alter any code or fix any bugs in it. DDEV does add DDEV-specific settings for some CMSes if the settings management is enabled. These items are excluded by <code>.gitignore</code> so they won\u2019t affect a deployed project, but in most cases they would do no harm if deployed, because they check to see if they\u2019re running in DDEV context.</p>","boost":2},{"location":"users/usage/faq/#why-do-i-have-to-type-ddev-in-front-of-so-many-commands","title":"Why do I have to type <code>ddev</code> in front of so many commands?","text":"<p>When you are using commands like <code>ddev composer</code>, <code>ddev drush</code>, <code>ddev npm</code>, or <code>ddev yarn</code>, you are telling DDEV to execute that very command inside the web container. That is where the exact tool for the exact environment required by your project lives. It\u2019s possible to execute <code>composer install</code> without  prepending <code>ddev</code> in your project folder, but often you won\u2019t have the same PHP version on your host computer as your project is configured to use inside the container, or perhaps you\u2019ll have a different version of <code>composer</code> even. This can lead into workarounds like having to use <code>composer --ignore-platform-reqs</code> or even introducing incompatibilities  into your project. With tools like <code>ddev composer</code> you are able to run several projects at the same time, each with different configurations, but when you use the tool inside the container, you get the exact configuration for the project you\u2019ve configured. You can run any tool inside the web container with <code>ddev exec</code>, but many commands like <code>ddev composer</code> have two-word shortcuts.</p> <p>However, if you prefer not to use <code>ddev</code> in front of commands, you can <code>ddev ssh</code> and execute the commands inside the web container.</p>","boost":2},{"location":"users/usage/faq/#where-is-my-database-stored-in-my-ddev-project","title":"Where is my database stored in my DDEV project?","text":"<p>The MariaDB, MySQL, or PostgreSQL database for your project lives in a Docker volume, which means it does not appear in your DDEV project\u2019s filesystem, and is not checked in. This configuration is for performance and portability reasons, but it means that if you change Docker providers or do a factory reset on your Docker provider, you will lose databases. By default many Docker providers do not keep Docker volumes where they are backed up by normal backup solutions. Remember to keep backups using <code>ddev export-db</code> or <code>ddev snapshot</code>. See How can I migrate from one Docker provider to another.</p>","boost":2},{"location":"users/usage/faq/#what-docker-providers-can-i-use","title":"What Docker providers can I use?","text":"<p>We have automated testing and support for a staggering range of Docker providers.</p> Docker Provider Support Level OrbStack (macOS) officially tested and supported on macOS Docker Desktop for Mac officially tested and supported on both Intel and Apple Silicon Docker Desktop for Windows officially tested and supported on WSL2 and traditional Windows Colima (macOS) officially tested and supported Docker-ce (Linux/WSL2) officially supported with automated tests on WSL2/Ubuntu. Recommended. Rancher Desktop (macOS) officially tested and supported on macOS","boost":2},{"location":"users/usage/faq/#minimally-supported","title":"Minimally Supported","text":"<p>The following environments do not have automated test coverage and are only minimally supported:</p> <ul> <li>Docker Desktop for Linux. Although Docker Desktop for Linux appears to work successfully in limited manual testing, we recommend the documented docker-ce installation instead.</li> <li>Rancher Desktop for Windows works in limited manual testing, but does not have automated testing. This is the only open-source Docker provider for traditional Windows.</li> </ul>","boost":2},{"location":"users/usage/faq/#how-can-i-migrate-from-one-docker-provider-to-another","title":"How can I migrate from one Docker provider to another?","text":"<p>There are many Docker providers on DDEV\u2019s supported platforms. For example, on macOS people use Docker Desktop and OrbStack along with Colima and Rancher Desktop. On Windows WSL2, people may use Docker Desktop or Docker CE inside WSL2. In all cases, if you want to switch between Docker providers, save your database and make sure the Docker providers don\u2019t interfere with each other:</p> <ol> <li>Save away your projects\u2019 databases. You can run <code>ddev snapshot --all</code> to make snapshots of all registered projects (that show up in <code>ddev list</code>). If you prefer a different way of saving database dumps, that works too!</li> <li>Stop the Docker provider you\u2019re moving from. For example, exit Docker Desktop.</li> <li>Start the Docker provider you\u2019re moving to.</li> <li>Start projects and restore their databases. For example, you could run <code>ddev snapshot restore --latest</code> to load a snapshot taken in step one.</li> </ol>","boost":2},{"location":"users/usage/faq/#do-i-need-to-install-php-composer-nginx-or-nodejsnpm-on-my-workstation","title":"Do I need to install PHP, Composer, nginx, or Node.js/npm on my workstation?","text":"<p>No. Tools like PHP, Composer, nginx, and Node.js/npm live inside DDEV\u2019s Docker containers, so you only need to install Docker and install DDEV.</p> <p>For most users we recommend that you do not install PHP or composer on your workstation, so you get in the habit of using <code>ddev composer</code>, which will use the configured composer and PHP versions for your project, which can be different for each project. See DDEV and Composer.</p>","boost":2},{"location":"users/usage/faq/#do-i-lose-data-when-i-run-ddev-poweroff-ddev-stop-or-ddev-restart","title":"Do I lose data when I run <code>ddev poweroff</code>, <code>ddev stop</code>, or <code>ddev restart</code>?","text":"<p>No. Your code continues to live on your workstation, and your database is safely stored on a Docker volume\u2014both unaffected by these commands.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-connect-to-my-database","title":"How can I connect to my database?","text":"<p>The answer depends on where you\u2019re connecting from.</p> <p>The <code>ddev describe</code> command includes database connection details in a row like this:</p> <pre><code>\u2502 db         \u2502 OK   \u2502 InDocker: ddev-mysite-db:3306 \u2502 mariadb:10.3       \u2502\n\u2502            \u2502      \u2502 Host: localhost:63161         \u2502 User/Pass: 'db/db' \u2502\n\u2502            \u2502      \u2502                               \u2502 or 'root/root'     \u2502\n</code></pre> <p>Inside your project container, where the app itself is running, the database hostname is <code>db</code> (not <code>127.0.0.1</code>) and the port is the default for your database engine\u2014<code>3306</code> for MySQL/MariaDB, <code>5432</code> for PostgreSQL.</p> <p>Outside your project\u2019s web container, for example a database GUI on your workstation, the hostname is <code>localhost</code> and the port is unique to that project. In the example above, it\u2019s <code>63161</code>.</p> <p>The username, password, and database are each <code>db</code> regardless of how you connect.</p>","boost":2},{"location":"users/usage/faq/#can-i-use-additional-databases-with-ddev","title":"Can I use additional databases with DDEV?","text":"<p>Yes, you can create additional databases and manually do whatever you need on them. They\u2019re created automatically if you use <code>ddev import-db</code> with the <code>--database</code> option. In this example, <code>extradb.sql.gz</code> is extracted and imported to a newly-created database named <code>extradb</code>:</p> <pre><code>ddev import-db --database=extradb --file=.tarballs/extradb.sql.gz\n</code></pre> <p>You can use <code>ddev mysql</code> or <code>ddev psql</code> to execute queries, or use the MySQL/PostgreSQL clients within <code>ddev ssh</code> or <code>ddev ssh -s db</code>. See the Database Management page.</p>","boost":2},{"location":"users/usage/faq/#can-different-projects-communicate-with-each-other","title":"Can different projects communicate with each other?","text":"<p>Yes, this is commonly required for situations like Drupal migrations or server-side API calls between projects.</p> <p>See Inter-Project Communication for detailed information about database and HTTP/S communication between projects.</p>","boost":2},{"location":"users/usage/faq/#can-i-run-ddev-with-other-development-environments-at-the-same-time","title":"Can I run DDEV with other development environments at the same time?","text":"<p>Yes, as long as they\u2019re configured to use different ports. It doesn\u2019t matter whether your other environments use Docker or not, it should only be a matter of avoiding port conflicts.</p> <p>It\u2019s probably easiest, however, to shut down one before using the other.</p> <p>For example, if you use Lando for one project, do a <code>lando poweroff</code> before using DDEV, and then run <code>ddev poweroff</code> before using Lando again. If you run nginx or Apache locally, stop them before using DDEV. The troubleshooting section goes into more detail about identifying and resolving port conflicts.</p>","boost":2},{"location":"users/usage/faq/#performance-troubleshooting","title":"Performance &amp; Troubleshooting","text":"","boost":2},{"location":"users/usage/faq/#how-can-i-get-the-best-performance","title":"How can I get the best performance?","text":"<p>Docker\u2019s normal mounting can be slow on macOS and traditional Windows. DDEV provides its Mutagen feature to work around this, giving fantastic webserving performance. See the Performance section for how Mutagen works. It\u2019s enabled by default on macOS and Windows.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-troubleshoot-whats-going-wrong","title":"How can I troubleshoot what\u2019s going wrong?","text":"<p>See these sections:</p> <ul> <li>General troubleshooting</li> <li>Xdebug troubleshooting</li> <li>Docker troubleshooting</li> <li>Traefik troubleshooting</li> <li>Mutagen troubleshooting</li> </ul>","boost":2},{"location":"users/usage/faq/#how-can-i-check-that-docker-is-working","title":"How can I check that Docker is working?","text":"<p>See the troubleshooting section on the Docker Installation page.</p>","boost":2},{"location":"users/usage/faq/#why-do-i-get-a-403-or-404-on-my-project-after-ddev-launch","title":"Why do I get a 403 or 404 on my project after <code>ddev launch</code>?","text":"<p>Most likely because the docroot is misconfigured, or there\u2019s no <code>index.php</code> or <code>index.html</code> in it. Open your <code>.ddev/config.yaml</code> file and check the <code>docroot</code> value, which should be a relative path to the directory containing your project\u2019s <code>index.php</code>.</p>","boost":2},{"location":"users/usage/faq/#why-do-i-see-nginx-headers-when-ive-set-webserver_type-apache-fpm","title":"Why do I see nginx headers when I\u2019ve set <code>webserver_type: apache-fpm</code>?","text":"<p>Apache runs in the web container, but when you use the <code>https://*.ddev.site</code> URL, it goes through <code>ddev-router</code>, which is an nginx reverse proxy. That\u2019s why you see nginx headers even though your web container\u2019s using Apache. Read more in this Stack Overflow answer.</p>","boost":2},{"location":"users/usage/faq/#why-does-ddev-start-fail-with-error-while-mounting-volume-permission-denied","title":"Why does <code>ddev start</code> fail with \u201cerror while mounting volume, Permission denied\u201d?","text":"<p>This almost always means NFS is enabled in your project, but NFS isn\u2019t working on your machine.</p> <p>Start by completely turning NFS off for your projects with <code>ddev config --performance-mode=none &amp;&amp; ddev config global --performance-mode=none</code>. Then later, get NFS working. NFS can improve macOS and traditional Windows performance, but is never needed on Linux or Windows WSL2. Most people on macOS and Windows use Mutagen instead of NFS because of its vastly improved performance, so instead of trying to fix this you can use Mutagen which is enabled by default. On Linux you can enable Mutagen for the project by running <code>ddev config --performance-mode=mutagen</code> or globally <code>ddev config global --performance-mode=mutagen</code>.</p>","boost":2},{"location":"users/usage/faq/#why-are-my-apache-http-https-redirects-stuck-in-an-infinite-loop","title":"Why are my Apache HTTP \u2192 HTTPS redirects stuck in an infinite loop?","text":"<p>It\u2019s common to set up HTTP-to-TLS redirects in an <code>.htaccess</code> file, which leads to issues with the DDEV proxy setup. The TLS endpoint of a DDEV project is always the <code>ddev-router</code> container and requests are forwarded through plain HTTP to the project\u2019s web server. This results in endless redirects, so you need to change the root <code>.htaccess</code> file for Apache correctly handles these requests for your local development environment with DDEV. The following snippet should work for most scenarios\u2014even outside of DDEV\u2014and could replace an existing redirect:</p> <pre><code># http:// -&gt; https:// plain or behind proxy for Apache 2.2 and 2.4\n# behind proxy\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^http$\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n\n# plain\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^$\nRewriteCond %{REQUEST_SCHEME} ^http$ [NC,OR]\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n</code></pre>","boost":2},{"location":"users/usage/faq/#my-browser-redirects-http-urls-to-https","title":"My browser redirects <code>http</code> URLs to <code>https</code>","text":"<p>Several browsers want you to use <code>https</code>, so they will automatically redirect you to the <code>https</code> version of a site. This may not be what you want, and things may break on redirect. For example, the Apache SOLR web UI often doesn\u2019t work with <code>https</code>, and when it redirects it things might break.</p> <p>To solve this for your browser, see:</p> <ul> <li>Google Chrome</li> <li>Mozilla Firefox</li> <li>Safari</li> </ul>","boost":2},{"location":"users/usage/faq/#why-is-ddev-webserver-such-a-huge-docker-image","title":"Why is <code>ddev-webserver</code> such a huge Docker image?","text":"<p>When you update DDEV you\u2019ll see it pull a <code>ddev-webserver</code> image which is almost half a gigabyte compressed, and this can be an inconvenient thing to wait for when you\u2019re doing an upgrade, especially if you have a slow internet connection.</p> <p>The reason that <code>ddev-webserver</code> is so big is that it\u2019s built for your daily requirements for a local development environment. It lets you switch PHP versions or switch between <code>nginx</code> and <code>apache</code> web servers with a simple <code>ddev restart</code>, rather than a lengthy build process. It lets you use Xdebug with a simple <code>ddev xdebug on</code>. It has many, many features and tools that make it easy for you as a developer, but that one would not include in a production image.</p>","boost":2},{"location":"users/usage/faq/#workflow","title":"Workflow","text":"","boost":2},{"location":"users/usage/faq/#how-can-i-updateupgrade-ddev","title":"How can I update/upgrade DDEV?","text":"<p>See Upgrading DDEV for your operating system and installation technique.</p> <p>You can use the <code>ddev self-upgrade</code> command for quick instructions tailored to your installation.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-install-a-specific-version-of-ddev","title":"How can I install a specific version of DDEV?","text":"","boost":2},{"location":"users/usage/faq/#debian-ubuntu-or-wsl2","title":"Debian, Ubuntu, or WSL2","text":"<p>For Debian/Ubuntu/WSL2 with DDEV installed via apt, you can run <code>sudo apt-get update &amp;&amp; sudo apt-get install ddev=&lt;version&gt;</code>, for example <code>sudo apt-get install ddev=1.23.4</code> to run a previous, older version of DDEV.</p>","boost":2},{"location":"users/usage/faq/#homebrew","title":"Homebrew","text":"<p>If you\u2019re using Homebrew, first run <code>brew unlink ddev</code> to get rid of the version you have there. Then use one of these options:</p> <ol> <li>Download the version you want from the releases page and place it in your <code>$PATH</code>.</li> <li>Use the install_ddev.sh script with the version number argument. For example, if you want <code>v1.23.5</code>, run <code>curl -fsSL https://ddev.com/install.sh | bash -s v1.23.5</code>.</li> <li>If you want the very latest, unreleased version of DDEV, run <code>brew unlink ddev &amp;&amp; brew install ddev/ddev/ddev --HEAD</code>.</li> </ol>","boost":2},{"location":"users/usage/faq/#why-do-i-have-an-old-ddev","title":"Why do I have an old DDEV?","text":"<p>You may have installed DDEV several times using different techniques. Use <code>which -a ddev</code> to find all installed binaries. For example, you could install a DDEV in WSL2 with Homebrew, forget about it for a while, install it manually, and then install it again with <code>apt</code>:</p> <pre><code>$ which -a ddev\n/home/linuxbrew/.linuxbrew/bin/ddev # installed with Homebrew\n/usr/local/bin/ddev # installed manually with install_ddev.sh script\n/usr/bin/ddev # installed with apt or yum/rpm\n/bin/ddev # don't touch it, it's a link to /usr/bin/ddev\n</code></pre> <p>You can check each binary version by its full path (<code>/usr/bin/ddev --version</code>) to find old versions. Remove them preferably in the same way you installed them, i.e. <code>/home/linuxbrew/.linuxbrew/bin/ddev</code> should be removed with Homebrew: <code>brew uninstall ddev</code>. A manually installed DDEV can be removed by deleting the <code>ddev</code> binary.</p> <p>Restart the terminal (or run <code>hash -r</code>) after uninstalling other versions of DDEV for the changes to take effect.</p> <p>If you see duplicates in the <code>which -a ddev</code> output, it means that some directories are added to your <code>$PATH</code> more than once. You can either ignore this or remove the extra directory from your <code>$PATH</code>.</p>","boost":2},{"location":"users/usage/faq/#should-i-check-in-the-ddev-directory-how-about-add-ons","title":"Should I check in the <code>.ddev</code> directory? How about add-ons?","text":"<p>Most teams check in the project <code>.ddev</code> directory. That way all team members will have the exact same configuration for the project, even if they\u2019re on different operating systems or architectures or Docker providers.</p> <p>DDEV add-ons are installed via the <code>.ddev</code> directory, so checking things in will get them as well, and that\u2019s also recommended practice.</p> <p>Do not alter or check in the <code>.ddev/.gitignore</code> as it is automatically generated to DDEV and does its best to figure out what files you \u201cown\u201d (like the <code>.ddev/config.yaml</code>) and which files DDEV \u201cowns\u201d, so do not have to be committed.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-back-up-or-restore-all-project-databases","title":"How can I back up or restore all project databases?","text":"<p>You can back up all projects that show in <code>ddev list</code> with <code>ddev snapshot -a</code>. This only snapshots projects displayed in <code>ddev list</code>; any projects not shown there will need to be started so they\u2019re be registered in <code>ddev list</code>.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-share-my-local-project-with-someone","title":"How can I share my local project with someone?","text":"<p>See Sharing Your Project.</p>","boost":2},{"location":"users/usage/faq/#how-do-i-make-ddev-match-my-production-environment","title":"How do I make DDEV match my production environment?","text":"<p>You can change the major PHP version and choose between nginx+fpm (default) and Apache+fpm and choose the MariaDB/MySQL/PostgreSQL version add extra services like Solr and Memcached. You won\u2019t be able to make every detail match your production server, but with database server type and version, PHP version and web server type you\u2019ll be close.</p> <p>The lightly maintained rfay/ddev-php-patch-build add-on may allow you to use a specific PHP patch version.</p>","boost":2},{"location":"users/usage/faq/#how-do-i-completely-destroy-a-project","title":"How do I completely destroy a project?","text":"<p>Use <code>ddev delete &lt;project&gt;</code> to destroy a project. By default, a <code>ddev snapshot</code> of your database is taken, but you can skip this using <code>ddev delete --omit-snapshot</code> or <code>ddev delete --omit-snapshot -y</code>. See <code>ddev delete -h</code> for options. It\u2019s up to you to then delete the code directory.</p>","boost":2},{"location":"users/usage/faq/#what-if-i-dont-like-the-settings-files-or-gitignores-ddev-creates","title":"What if I don\u2019t like the settings files or gitignores DDEV creates?","text":"<p>You have several options:</p> <ul> <li>Use the <code>disable_settings_management: true</code> option in the project\u2019s <code>.ddev/config.yaml</code> file. This disables DDEV from updating CMS-related settings files.</li> <li>Use the more generic \u201cphp\u201d project type rather than a CMS-specific one; it basically means \u201cdon\u2019t try to create settings files for me\u201d. The \u201cphp\u201d type works great for experienced developers.</li> <li>Take over the settings file or <code>.gitignore</code> by deleting the line <code>#ddev-generated</code> in it, then check in the file. If that line is removed, DDEV will not try to replace or change the file. (If you don\u2019t want DDEV to warn you about customized files, add <code>#ddev-silent-no-warn</code> to the file.)</li> </ul>","boost":2},{"location":"users/usage/faq/#how-can-i-change-a-projects-name","title":"How can I change a project\u2019s name?","text":"<p>Delete it and migrate it to a new project with your preferred name:</p> <ol> <li>Export the project\u2019s database: <code>ddev export-db --file=/path/to/db.sql.gz</code>.</li> <li>Delete the project: <code>ddev delete &lt;project&gt;</code>. (This takes a snapshot by default for safety.)</li> <li>Remove the <code>.ddev/traefik/config</code> directory, <code>rm -r .ddev/traefik/config</code>, since it may have name-based configuration.</li> <li>Rename the project: <code>ddev config --project-name=&lt;new_name&gt;</code>.</li> <li>Start the new project with <code>ddev start</code>.</li> <li>Import the database dump from step one: <code>ddev import-db --file=/path/to/db.sql.gz</code>.</li> </ol>","boost":2},{"location":"users/usage/faq/#how-can-i-move-a-project-to-another-directory","title":"How can I move a project to another directory?","text":"<p>Run <code>ddev stop --unlist</code>, then move the directory, then run <code>ddev start</code> in the new directory.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-move-a-project-to-another-workstation","title":"How can I move a project to another workstation?","text":"<p>Take a snapshot, move the project files, and restore the snapshot in a new project on the target workstation:</p> <ol> <li><code>ddev start &amp;&amp; ddev snapshot</code>.</li> <li><code>ddev stop --unlist</code>.</li> <li>Move the project directory to another computer any way you want.</li> <li>On the new computer, run <code>ddev start &amp;&amp; ddev snapshot restore --latest</code>.</li> <li>Optionally, on the old computer, run <code>ddev delete --omit-snapshot</code> to remove its copy of the database.</li> </ol>","boost":2},{"location":"users/usage/faq/#how-can-i-move-a-project-from-traditional-windows-to-wsl2","title":"How can I move a project from traditional Windows to WSL2?","text":"<p>This is exactly the same as moving a project from one computer to another described above. Make sure you move the project into a native filesystem in WSL2, most likely <code>/home</code>.</p>","boost":2},{"location":"users/usage/faq/#why-does-ddev-want-to-edit-etchosts","title":"Why does DDEV want to edit <code>/etc/hosts</code>?","text":"<p>If you see \u201cThe hostname  is not currently resolvable\u201d and you can successfully <code>ping &lt;hostname&gt;</code>, it may be that DNS resolution is slow. <p>DDEV doesn\u2019t have control over your computer\u2019s name resolution, so it doesn\u2019t have any way to influence how your browser gets an IP address from a hostname. It knows you have to be connected to the internet to do that, and uses a test DNS lookup of <code>&lt;somethingrandom&gt;.ddev.site</code> as a way to guess whether you\u2019re connected to the internet. If it\u2019s unable to do a name lookup, or if the hostname associated with your project is not <code>*.ddev.site</code>, it will try to create entries in <code>/etc/hosts</code>, since it\u2019s assuming you can\u2019t look up your project\u2019s hostname(s) via DNS. If your internet (and name resolution) is actually working, but DNS is slow, run <code>ddev config global --internet-detection-timeout-ms=3000</code> to set the timeout to 3 seconds (or higher). See this GitHub issue for more. (If DNS rebinding is disallowed on your network/router, this won\u2019t be solvable without network/router changes. Help in comment 1 and comment 2.) For more detailed troubleshooting information, please see the troubleshooting section.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-configure-a-project-with-the-defaults-without-hitting-return-a-bunch-of-times","title":"How can I configure a project with the defaults without hitting RETURN a bunch of times?","text":"<p>Use <code>ddev config --auto</code> to set the docroot and project type based on the discovered code. If anything in <code>.ddev/config.yaml</code> is wrong, you can edit that directly or use <code>ddev config</code> commands to update settings.</p> <p>You can also use <code>ddev config --update</code> if the code is already in place and it will autodetect the project type and other needed settings.</p>","boost":2},{"location":"users/usage/faq/#i-want-to-use-the-same-code-with-various-project-names","title":"I want to use the same code with various project names","text":"<p>If you remove the <code>name</code> line from your project\u2019s <code>.ddev/config.yaml</code>, then the project will take the name of the directory it is in.</p> <p>This allows you to have multiple check-outs of the same project, each with different names.</p> <p>It can also allow team members to have the same project run using different hostnames and URLs.</p>","boost":2},{"location":"users/usage/faq/#getting-involved","title":"Getting Involved","text":"","boost":2},{"location":"users/usage/faq/#how-do-i-get-support","title":"How do I get support?","text":"<p>See the support options, including Discord, Stack Overflow and the issue queue.</p>","boost":2},{"location":"users/usage/faq/#how-can-i-contribute-to-ddev","title":"How can I contribute to DDEV?","text":"<p>We love and welcome contributions of knowledge, support, docs, and code:</p> <ul> <li>Submit an issue or pull request to the main repository.</li> <li>Add your external resource to awesome-ddev.</li> <li>Help others in Discord and on Stack Overflow.</li> <li>Contribute financially via GitHub Sponsors.</li> <li>Get involved with DDEV governance and the Advisory Group.</li> </ul>","boost":2},{"location":"users/usage/faq/#how-do-financial-contributions-support-ddev","title":"How do financial contributions support DDEV?","text":"<p>Thanks for asking! Contributions made via GitHub Sponsors go to the DDEV Foundation and are used for infrastructure and supporting development.</p>","boost":2},{"location":"users/usage/managing-projects/","title":"Managing projects","text":""},{"location":"users/usage/managing-projects/#configuration-files","title":"Configuration Files","text":"<p>The <code>ddev config</code> and <code>ddev start</code> commands attempt to create a CMS-specific settings file pre-populated with DDEV credentials. If you don\u2019t want DDEV to do this, set the <code>disable_settings_management</code> config option to <code>true</code>.</p> <p>For Craft CMS DDEV settings are added to the <code>.env</code> file.</p> <p>For Drupal and Backdrop, DDEV settings are written to a DDEV-managed file, <code>settings.ddev.php</code>. The <code>ddev config</code> command will ensure these settings are included in your <code>settings.php</code> through the following steps:</p> <ul> <li>Write DDEV settings to <code>settings.ddev.php</code>.</li> <li>If no <code>settings.php</code> file exists, create one that includes <code>settings.ddev.php</code>.</li> <li>If a <code>settings.php</code> file already exists, ensure that it includes <code>settings.ddev.php</code>, modifying <code>settings.php</code> to write the include if necessary.</li> </ul> <p>For Magento 1, DDEV settings go into <code>app/etc/local.xml</code>.</p> <p>In Magento 2, DDEV settings go into <code>app/etc/env.php</code>.</p> <p>For TYPO3, DDEV settings are written to <code>config/system/additional.php</code>. If <code>additional.php</code> exists and is not managed by DDEV, it will not be modified.</p> <p>For WordPress, DDEV settings are written to a DDEV-managed file, <code>wp-config-ddev.php</code>. The <code>ddev config</code> command will attempt to write settings through the following steps:</p> <ul> <li>Write DDEV settings to <code>wp-config-ddev.php</code>.</li> <li>If no <code>wp-config.php</code> exists, create one that include <code>wp-config-ddev.php</code>.</li> <li>If a DDEV-managed <code>wp-config.php</code> exists, create one that includes <code>wp-config.php</code>.</li> <li>If a user-managed <code>wp-config.php</code> exists, instruct the user on how to modify it to include DDEV settings.</li> </ul> <p>You\u2019ll know DDEV is managing a settings file when you see a comment containing <code>#ddev-generated</code> like the one below. Remove the comment and DDEV will not attempt to overwrite it. If you\u2019re letting DDEV create its settings file, we recommended leaving this comment so DDEV can continue to manage it, and make any needed changes in another settings file.</p> <pre><code>/**\n #ddev-generated: Automatically generated Drupal settings.php file.\n ddev manages this file and may delete or overwrite the file unless this comment is removed.\n */\n</code></pre> <p>If you\u2019re providing the <code>settings.php</code> or <code>wp-config.php</code> and DDEV is creating <code>settings.ddev.php</code> (or <code>wp-config-local.php</code>, <code>AdditionalConfig.php</code>, or similar), the main settings file must explicitly include the appropriate DDEV-generated settings file. Any changes you need should be included somewhere that loads after DDEV\u2019s settings file, for example in Drupal\u2019s <code>settings.php</code> after <code>settings.ddev.php</code> is included. (See Adding Configuration below).</p>"},{"location":"users/usage/managing-projects/#adding-configuration","title":"Adding Configuration","text":"<p>Drupal and Backdrop: In <code>settings.php</code>, enable loading <code>settings.local.php</code> after <code>settings.ddev.php</code> is included\u2014creating a new one if it doesn\u2019t already exist\u2014and make changes there. Wrap with <code>if (getenv('IS_DDEV_PROJECT') == 'true')</code> as needed.</p> <p>WordPress: Load a <code>wp-config-local.php</code> after <code>wp-config-ddev.php</code>, and make changes there. Wrap with <code>if (getenv('IS_DDEV_PROJECT') == 'true')</code> as needed.</p>"},{"location":"users/usage/managing-projects/#listing-project-information","title":"Listing Project Information","text":"<p>Run <code>ddev list</code> or <code>ddev list --active-only</code> current projects.</p> <pre><code>\u279c  ddev list\n NAME            STATUS        LOCATION                    URL                           TYPE\n d10             stopped       ~/workspace/d10                                           drupal10\n drup            running (ok)  ~/workspace/drup            https://drup.ddev.site        drupal\n my-cakephp-app  stopped       ~/workspace/my-cakephp-app                                cakephp\n Router          healthy       ~/.ddev                     http://127.0.0.1:10999        traefik\n</code></pre> <pre><code>\u279c  ddev list --active-only\n NAME        STATUS        LOCATION                URL                           TYPE\n drup        running (ok)  ~/workspace/drup        https://drup.ddev.site        drupal\n Router      healthy       ~/.ddev                 http://127.0.0.1:10999        traefik\n</code></pre> <p>You can also see more detailed information about a project by running <code>ddev describe</code> from its working directory. You can also run <code>ddev describe [project-name]</code> from any location to see the detailed information for a running project.</p> <pre><code>$ ddev describe drup\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project: drup ~/workspace/drup https://drup.ddev.site                            \u2502\n\u2502 Docker platform: orbstack                                                        \u2502\n\u2502 Router: traefik                                                                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 SERVICE  \u2502 STAT \u2502 URL/PORT                                  \u2502 INFO               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 web      \u2502 OK   \u2502 https://drup.ddev.site                    \u2502 drupal PHP8.3      \u2502\n\u2502          \u2502      \u2502 InDocker: web:8025,443,80                 \u2502 nginx-fpm          \u2502\n\u2502          \u2502      \u2502 Host: 127.0.0.1:33016,33017               \u2502 docroot:'web'      \u2502\n\u2502          \u2502      \u2502                                           \u2502 Perf mode: mutagen \u2502\n\u2502          \u2502      \u2502                                           \u2502 NodeJS:20          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 db       \u2502 OK   \u2502 InDocker: db:3306                         \u2502 mariadb:10.11      \u2502\n\u2502          \u2502      \u2502 Host: 127.0.0.1:33018                     \u2502 User/Pass: 'db/db' \u2502\n\u2502          \u2502      \u2502                                           \u2502 or 'root/root'     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Mailpit  \u2502      \u2502 Mailpit: https://drup.ddev.site:8026      \u2502                    \u2502\n\u2502          \u2502      \u2502 `ddev mailpit`                            \u2502                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 All URLs \u2502      \u2502 https://drup.ddev.site,                   \u2502                    \u2502\n\u2502          \u2502      \u2502 https://127.0.0.1:33016,                  \u2502                    \u2502\n\u2502          \u2502      \u2502 http://drup.ddev.site,                    \u2502                    \u2502\n\u2502          \u2502      \u2502 http://127.0.0.1:33017                    \u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"users/usage/managing-projects/#removing-projects","title":"Removing Projects","text":"<p>There are two ways to remove a project from DDEV\u2019s listing.</p> <p>The first, the <code>ddev delete</code> command, is destructive. It removes the project from DDEV\u2019s list, deletes its database, and removes the hostname entry from the hosts file:</p> <p><code>ddev delete &lt;projectname&gt;</code> or <code>ddev delete --omit-snapshot &lt;projectname&gt;</code></p> <p>If you don\u2019t want the project to show up in <code>ddev list</code> anymore, use <code>ddev stop</code>\u2014which is nondestructive\u2014to unlist the project until the next time you run <code>ddev start</code> or <code>ddev config</code>:</p> <pre><code>ddev stop --unlist &lt;projectname&gt;\n</code></pre>"},{"location":"users/usage/managing-projects/#importing-assets-for-an-existing-project","title":"Importing Assets for An Existing Project","text":"<p>An important aspect of local web development is the ability to have a precise local recreation of the project you\u2019re working on, including up-to-date database contents and static assets like uploaded images and files. DDEV provides two commands to help with importing assets to your local environment.</p>"},{"location":"users/usage/managing-projects/#importing-a-database","title":"Importing a Database","text":"<p>The <code>ddev import-db</code> command imports the database for a project. Running this command will prompt you to specify the location of your database import. By default <code>ddev import-db</code> empties the default <code>db</code> database, then loads the provided dump file. Most people use it with command flags, like <code>ddev import-db --file=.tarballs/db.sql.gz</code>, but it can also prompt for the location of the dump if you only use <code>ddev import-db</code>:</p> <pre><code>ddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/db.sql\nImporting database...\nSuccessfully imported database for drupal8\n</code></pre>"},{"location":"users/usage/managing-projects/#supported-database-import-file-types","title":"Supported Database Import File Types","text":"<p>Database imports can be any of the following file types:</p> <ul> <li>Raw SQL Dump (<code>.sql</code>)</li> <li>Gzipped SQL Dump (<code>.sql.gz</code>)</li> <li>Xz\u2019d SQL Dump (<code>.sql.xz</code>)</li> <li>(Gzipped) Tarball Archive (<code>.tar</code>, <code>.tar.gz</code>, <code>.tgz</code>)</li> <li>ZIP Archive (<code>.zip</code>)</li> <li>stdin</li> </ul> <p>If a Tarball Archive or ZIP Archive is provided for the import, you\u2019ll be prompted to specify a path within the archive to use for the import asset. The specified path should provide a raw SQL dump (<code>.sql</code>). In the following example, the database we want to import is named <code>data.sql</code> and resides at the top level of the archive:</p> <pre><code>ddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/site-backup.tar.gz\nYou provided an archive. Do you want to extract from a specific path in your archive? You may leave this blank if you wish to use the full archive contents\nArchive extraction path:\ndata.sql\nImporting database...\nA settings file already exists for your application, so ddev did not generate one.\nRun 'ddev describe' to find the database credentials for this application.\nSuccessfully imported database for drupal8\n</code></pre>"},{"location":"users/usage/managing-projects/#non-interactive-usage","title":"Non-Interactive Usage","text":"<p>If you want to use the <code>import-db</code> command without answering prompts, you can use the <code>--file</code> flag to provide the path to the import asset. If you\u2019re importing an archive and wish to specify the path within the archive to extract, you can use the <code>--extract-path</code> flag in conjunction with the <code>--file</code> flag. Examples:</p> <pre><code>ddev import-db --file=/tmp/mydb.sql.gz\ngzip -dc /tmp/mydb.sql.gz | ddev import-db\nddev import-db &lt;mydb.sql\n</code></pre>"},{"location":"users/usage/managing-projects/#database-import-notes","title":"Database Import Notes","text":"<ul> <li>Importing from a dump file via stdin will not show progress because there\u2019s no way the import can know how far along through the import it has progressed.</li> <li>Use <code>ddev import-db --target-db &lt;some_database&gt;</code> to import to a non-default database (other than the default <code>db</code> database). This will create the database if it doesn\u2019t already exist.</li> <li>Use <code>ddev import-db --no-drop</code> to import without first emptying the database.</li> <li>If a database already exists and the import does not specify dropping tables, the contents of the imported dumpfile will be added to the database. Most full database dumps do a table drop and create before loading, but if yours does not, you can drop all tables with <code>ddev stop --remove-data</code> before importing.</li> <li>If imports are stalling or failing, make sure you have plenty of unused space (see #3360). DDEV has no problems importing large (2G+) databases, but importing requires lots of space. DDEV will show a warning on startup if unused space is getting low.</li> </ul>"},{"location":"users/usage/managing-projects/#inter-project-communication","title":"Inter-Project Communication","text":""},{"location":"users/usage/managing-projects/#access-another-projects-database","title":"Access another project\u2019s database","text":"<p>To connect the <code>web</code> container to the <code>db</code> container of a different project, use <code>ddev-&lt;projectname&gt;-db</code> as the hostname.</p> <p>Example: two projects, <code>backend</code> and <code>frontend</code>.</p> <p>In the <code>frontend</code> project:</p> <pre><code>ddev exec mysql -h ddev-backend-db\n</code></pre> <p>Database host reset after restart</p> <p>DDEV manages certain CMS settings. If you change the database host in <code>.env</code>, it may reset to <code>db</code> after <code>ddev restart</code>.</p> <p>Disable this behavior by setting <code>disable_settings_management</code> to <code>true</code> or running <code>ddev config --disable-settings-management</code>.</p>"},{"location":"users/usage/managing-projects/#access-another-project-via-https","title":"Access another project via HTTP/S","text":"<p>Example: two projects, <code>backend</code> and <code>frontend</code>.</p> <p>From v1.24.9+, DDEV supports direct HTTP/S calls between projects:</p> <pre><code># From frontend web container to backend web container\nddev exec curl https://backend.ddev.site\n\n# Or using internal Docker hostname\nddev exec curl https://ddev-backend-web\n</code></pre> <p>Using HTTPS from a non-web container</p> <p>HTTP works without extra setup. For HTTPS, the calling container must trust the <code>ddev-webserver</code> certificate authority (CA).</p> <pre><code>$ ddev exec -s some-service curl https://backend.ddev.site\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\nMore details: https://curl.se/docs/sslcerts.html\n</code></pre> <p>See Third-party services may need to trust <code>ddev-webserver</code>.</p>"},{"location":"users/usage/managing-projects/#access-another-service-in-the-same-or-different-project","title":"Access another service in the same or different project","text":"<ul> <li>Same project: containers reach each other by service name. No project name prefix is required.</li> <li>Different project: containers reach each other with <code>ddev-&lt;projectname&gt;-&lt;service&gt;</code>.</li> </ul> <p>Example in a single project with <code>web</code> and <code>opensearch</code> services:</p> <pre><code># From web container to opensearch\nddev exec curl http://opensearch:9200\n\n# From opensearch container to web\nddev exec -s opensearch curl http://web\n</code></pre> <p>Example with two projects, <code>frontend</code> and <code>backend</code> (<code>backend</code> has <code>opensearch</code> service):</p> <pre><code># From frontend web container to backend opensearch\nddev exec curl http://ddev-backend-opensearch:9200\n</code></pre>"},{"location":"users/usage/managing-projects/#access-services-on-the-host-machine","title":"Access services on the host machine","text":"<p>To connect from a container to a service on the host, use <code>host.docker.internal</code> as the hostname.</p> <pre><code># Test connection to host service on port 8000\nddev exec telnet host.docker.internal 8000\n\n# Call API on host\nddev exec curl http://host.docker.internal:8000/some/api/endpoint\n</code></pre> <p>Host service binding</p> <p>Services on the host must listen on all interfaces (<code>0.0.0.0</code>), not only <code>127.0.0.1</code> (<code>localhost</code>).</p>"},{"location":"users/usage/networking/","title":"Special Network Configurations","text":"<p>The networking configurations described here are not typical</p> <p>Don\u2019t spend time with this page unless you know you have a global TLS trust or proxy configuration issue.</p> <p>There are a few networking situations which occasionally cause trouble for some users, especially in corporate environments. These typically fall into two categories:</p> <ol> <li>TLS interception (e.g., Zscaler, GlobalProtect) causes SSL verification errors in <code>docker pull</code> or inside containers.</li> <li>Proxy-only internet access, which blocks Docker or container tools unless proxy settings are configured.</li> </ol> <p>In these situations, multiple layers may require configuration:</p> <ul> <li>Docker Engine: Trust external registries</li> <li>Docker CLI: Use system or explicit proxy settings</li> <li>Containers (e.g., DDEV web): Trust HTTPS inside the container</li> <li>Package Managers (e.g., apt): If used inside containers, may also need proxy/CA configuration</li> </ul>"},{"location":"users/usage/networking/#corporate-packet-inspection-vpns-including-zscaler-and-global-protect","title":"Corporate Packet-inspection VPNs (including Zscaler and Global Protect)","text":"<p>Your IT Department or Vendor May Have Easier Ways to Solve These Problems</p> <p>In many cases, your IT department or VPN vendor may be able to whitelist certain internet resources, and you may not have to do extensive configuration. Check with them (if possible) before you start making configuration changes.</p> <p>Packet-inspecting VPNs like Zscaler, GlobalProtect, and similar products intercept HTTPS traffic using a corporate-controlled TLS Certificate Authority (CA). These systems act as a \u201cman-in-the-middle\u201d proxy, decrypting and re-encrypting HTTPS traffic. As a result, systems and applications that are not explicitly configured to trust the corporate CA will experience SSL/TLS verification errors.</p> <p>This creates two separate problems in Docker-based workflows:</p> Layer Problem Solution Docker Engine <code>docker pull</code> fails with certificate errors when connecting to Docker registries like <code>hub.docker.com</code> Configure Docker Engine to trust the corporate CA Inside Containers Tools like <code>curl</code> or <code>composer</code> inside containers fail to connect to the internet Install the corporate CA in the container image"},{"location":"users/usage/networking/#docker-engine-ssl-trust-for-docker-pull","title":"\ud83e\udde9 Docker Engine SSL Trust (for <code>docker pull</code>)","text":"<p>The Docker Provider itself must trust the corporate CA to pull images from remote registries. The method of adding this trust varies by platform and Docker engine.</p> <p>Often, though, the easiest way to solve this particular problem is for your IT department or VPN vendor to whitelist your registry (usually <code>registry-1.docker.io</code>) so you don\u2019t have to deal with this problem in the first place. If you can\u2019t do that, a variety of solutions are provided below.</p>"},{"location":"users/usage/networking/#macos","title":"macOS","text":"<ul> <li>Docker Desktop, Orbstack, and Rancher Desktop automatically use the macOS system keychain, so you likely don\u2019t need to configure SSL trust.</li> <li>Colima: Colima copies <code>~/.docker/certs.d</code> into the VM at startup. To trust a CA, place it in <code>~/.docker/certs.d/</code> before starting Colima.</li> <li>Lima: Copy the CA certificate into <code>/etc/docker/certs.d/</code> using <code>limactl shell default</code>.</li> </ul>"},{"location":"users/usage/networking/#windows","title":"Windows","text":"<p>Install the trusted certificate in the system:</p> <ol> <li>Search \u201cSettings\u201d for \u201cManage Computer Certificates\u201d, which runs <code>certlm</code>.</li> <li>Navigate to \u201cCertificates - Local Computer\u201d -&gt; \u201cTrusted Root Certification\u201d -&gt; \u201cCertificates\u201d.</li> <li> <p>Right-click -&gt; \u201cAll tasks\u201d -&gt; \u201cImport\u201d to import the <code>crt</code> file.</p> </li> <li> <p>Docker Desktop: Uses the Windows system certificate store. If the CA is trusted by the system, Docker will trust it too.</p> </li> <li>WSL2 with Docker Desktop: Behaves like Docker Desktop (Windows trust store).</li> <li>WSL2 with <code>docker-ce</code>: Requires manual installation of the CA cert as with native Linux.</li> </ol>"},{"location":"users/usage/networking/#linux","title":"Linux","text":"<p>For native Linux or WSL2 with <code>docker-ce</code>:</p> <pre><code>sudo mkdir -p /etc/docker/certs.d/\nsudo cp mycorp-ca.crt /etc/docker/certs.d/\nsudo systemctl restart docker\n</code></pre>"},{"location":"users/usage/networking/#test-docker-engine-trust","title":"\u2705 Test Docker Engine Trust","text":"<p>To test:</p> <pre><code>docker pull alpine\n# \u2705 Should succeed if CA is trusted\n# \u274c If not trusted: x509: certificate signed by unknown authority\n</code></pre> <p>If it works without SSL errors, the CA is trusted properly.</p> <p>See Docker Engine certificate configuration for more background.</p>"},{"location":"users/usage/networking/#container-level-ssl-trust-for-curl-composer-nodejs-etc","title":"\ud83d\udce6 Container-Level SSL Trust (for <code>curl</code>, <code>composer</code>, <code>Node.js</code>, etc.)","text":"<p>Applications running inside containers do not inherit trust from the host system. If the container makes outbound HTTPS connections, you must install the corporate CA inside the container image.</p> <p>The standard approach:</p> <ol> <li>Export the corporate CA certificate (<code>.crt</code>) as described in the section below. Use the name of your <code>crt</code> file, not <code>mycorp-ca.crt</code>.</li> <li>Place the <code>.crt</code> file in both your <code>.ddev/web-build</code> and <code>.ddev/db-build</code> directories.</li> <li> <p>Add a <code>.ddev/web-build/pre.Dockerfile.vpn</code> and <code>.ddev/db-build/pre.Dockerfile.vpn</code> like this:</p> <pre><code>COPY mycorp-ca.crt /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n</code></pre> </li> <li> <p>If you\u2019re using Node.js/npm make it trust both the DDEV <code>mkcert</code> CA and your corporate CA by combining the two into a single file and then making the environment variable <code>NODE_EXTRA_CA_CERTS</code> point to that file. Add a post-start hook to concatenate the required files into the needed <code>/usr/local/share/ca-certificates/node_ca_certs.pem</code>. For example, in a <code>.ddev/config.vpn.yaml</code> add <code>post-start</code> hook:</p> <pre><code>web_environment:\n  - NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/node_ca_certs.pem\nhooks:\n  post-start:\n    - exec: \"cat /mnt/ddev-global-cache/mkcert/rootCA.pem /usr/local/share/ca-certificates/mycorp-ca.crt &gt; /usr/local/share/ca-certificates/node_ca_certs.pem\"\n</code></pre> </li> <li> <p>Run:</p> <pre><code>ddev restart\nddev exec curl -I https://www.google.com\n# \u2705 Expect: HTTP/2 200\n# \u274c If not trusted: curl: (60) SSL certificate problem\nddev npm install --verbose\n# \u2705 Expect: Successful install\n# \u274c If not trusted: attempt 2 failed with SELF_SIGNED_CERT_IN_CHAIN\nddev yarn install\n# \u2705 Expect: Successful install\n# \u274c If not trusted: code: 'SELF_SIGNED_CERT_IN_CHAIN'\n</code></pre> </li> </ol> <p>This method works across all OS platforms and all Docker providers, because you\u2019re explicitly modifying the container\u2019s certificate store.</p> <p>Clear or recreate buildx contexts</p> <p>During the testing process, we found that an old <code>docker buildx</code> context can make all of the <code>ddev start</code> builds fail in this situation. We had to remove buildx contexts (<code>docker buildx ls</code> and <code>docker buildx rm &lt;context&gt;</code> may help, or removing the <code>~/.docker/buildx</code> directory.)</p>"},{"location":"users/usage/networking/#where-to-get-the-corporate-ca-certificate","title":"\ud83d\udd0d Where to Get the Corporate CA Certificate","text":""},{"location":"users/usage/networking/#option-1-ask-your-it-department","title":"Option 1: Ask Your IT Department","text":"<p>Request the \u201cTLS root certificate\u201d or \u201cSSL inspection CA\u201d used by your company\u2019s VPN or proxy.</p>"},{"location":"users/usage/networking/#option-2-extract-from-your-own-system","title":"Option 2: Extract from Your Own System","text":"<ul> <li>macOS: Use Keychain Access to export the cert from the \u201cSystem\u201d keychain.</li> <li>Windows: Use <code>certmgr.msc</code> and export the cert from \u201cTrusted Root Certification Authorities\u201d.</li> <li>Linux: Locate and copy certs from <code>/etc/ssl/certs/</code> or use Firefox + <code>certutil</code>.</li> </ul> <p>You can also visit a site like <code>https://www.google.com</code> in Chrome or Firefox, inspect the certificate chain, and export the root CA manually (example method).</p>"},{"location":"users/usage/networking/#converting-exported-pem-or-cer-files-to-crt","title":"Converting Exported PEM or CER Files to CRT","text":"<p>When you export a CA certificate from your system (e.g., Keychain Access on macOS or certmgr on Windows), the file may be saved with a <code>.pem</code> or <code>.cer</code> extension. These are usually the same format as <code>.crt</code>: a base64-encoded X.509 certificate.</p> <p>For Docker or Linux tools that expect a <code>.crt</code> file, you can simply rename the exported file:</p> <pre><code>mv your-cert.pem your-cert.crt\n# or\nmv your-cert.cer your-cert.crt\n</code></pre> <p>To confirm it is the correct format, the file should begin with:</p> <pre><code>-----BEGIN CERTIFICATE-----\n</code></pre> <p>If your file contains this header, renaming it to <code>.crt</code> is sufficient for use with Docker and container trust configurations.</p>"},{"location":"users/usage/networking/#corporate-packet-inspection-vpn-resources","title":"Corporate Packet-inspection VPN Resources","text":"<ul> <li>Adding Self-signed Registry Certs to Docker &amp; Docker for Mac</li> <li>Docker Docs: How Do I Add TLS Certificates</li> </ul>"},{"location":"users/usage/networking/#vpn-trust-summary-by-provider","title":"VPN Trust Summary by Provider","text":"Provider Engine Trust Needed? Auto-Inherits Host Trust? Notes Docker Desktop No \u2705 Uses macOS/Windows system keychain Orbstack No \u2705 Fully integrated with macOS keychain Colima Yes \ud83d\udeab Requires pre-start copy of certs Rancher Desktop Yes (dockerd) Partial Depends on Lima config and backend WSL2 + docker-ce Yes \ud83d\udeab Must configure trust inside WSL"},{"location":"users/usage/networking/#corporate-or-internet-provider-proxy","title":"Corporate or Internet Provider Proxy","text":"<p>Some network environments, including some corporate networks, require a \u201cproxy\u201d system be used to access the outside network. In these environments, most systems do not have direct access to the public internet, but instead must use a configured proxy host to access the public internet. A proxy is a system that receives HTTP and HTTPS traffic and then sends and receives traffic on behalf of the client that requests it.</p> <p>In most environments, the proxy will be configured at a system level. For example, on macOS, it can be configured at <code>Settings -&gt; Wi-Fi -&gt; Connection -&gt; Details -&gt; Proxies</code>. On Ubuntu it\u2019s at <code>Settings -&gt; Network -&gt; Network Proxy</code>.</p> <p>In each of these situations the configuration required is essentially this:</p> <ul> <li>HTTP Proxy or \u201cWeb Proxy (HTTP)\u201d</li> <li>HTTPS Proxy or \u201cSecure web proxy (HTTPS)\u201d</li> <li>\u201cIgnore Hosts\u201d or \u201cBypass proxy settings for these hosts\u201d</li> </ul> <p>Given a proxy with the hostname <code>yourproxy.intranet</code> with the IP address <code>192.168.1.254</code> and a port of <code>8888</code>, you would usually configure the HTTP and HTTPS Proxies as <code>yourproxy.intranet</code> with port <code>8888</code>. But it\u2019s usually important to tell your system not to proxy some hostnames and IP addresses, including <code>localhost</code>, <code>*.ddev.site</code>, <code>127.0.0.1</code>, and <code>::1</code>. These exclusions ensure that local development domains (such as <code>*.ddev.site</code>) and local network addresses (<code>127.0.0.1</code>, <code>::1</code>) are not mistakenly routed through the proxy, which could disrupt DDEV\u2019s functionality.</p> <p>System configuration in many systems results in environment variables like these examples:</p> <ul> <li><code>HTTP_PROXY=http://yourproxy.intranet:8888</code></li> <li><code>HTTPS_PROXY=http://yourproxy.intranet:8888</code></li> <li><code>NO_PROXY=localhost,127.0.0.1,::1,*.ddev.site</code></li> </ul> <p>If they are not set automatically, they can be set manually in your <code>.bash_profile</code> or similar configuration file.</p>"},{"location":"users/usage/networking/#configuring-docker-daemon-for-proxy","title":"Configuring Docker Daemon for Proxy","text":"<p>See the Docker documentation to configure the Docker daemon for access to the Docker registry (for actions like <code>docker pull</code>).</p> <p>For example, <code>/etc/docker/daemon.json</code> might be:</p> <pre><code>{\n  \"proxies\": {\n    \"http-proxy\": \"http://squid.host-only:3128\",\n    \"https-proxy\": \"http://squid.host-only:3128\",\n    \"no-proxy\": \"localhost,127.0.0.0/8\"\n  }\n}\n</code></pre> <p>After configuration,</p> <pre><code>sudo systemctl restart docker\n</code></pre> <p>When this is working, you should be able to successfully <code>docker pull alpine</code>.</p>"},{"location":"users/usage/networking/#configuring-docker-client-for-proxy","title":"Configuring Docker Client for Proxy","text":"<p>See the Docker documentation for how to configure the Docker client to pass proxy variables during container build (<code>ddev start</code>) and runtime (<code>ddev exec</code>).</p> <p>For example, <code>~/.docker/config.json</code> might be:</p> <pre><code>{\n  \"proxies\": {\n    \"default\": {\n      \"httpProxy\": \"http://squid.host-only:3128\",\n      \"httpsProxy\": \"http://squid.host-only:3128\",\n      \"noProxy\": \"localhost,127.0.0.0/8\"\n    }\n  }\n}\n</code></pre> <p>After configuration, restart the DDEV project if it is already running.</p>"},{"location":"users/usage/networking/#proxy-resources","title":"Proxy Resources","text":"<ul> <li>Configuring Rancher Desktop Proxy</li> <li>Colima proxy setup</li> <li>Linux Docker Daemon Proxy Configuration</li> <li>Linux Docker Client Proxy Configuration</li> <li>Colima Proxy Configuration</li> </ul>"},{"location":"users/usage/networking/#restrictive-dns-servers-especially-fritzbox-routers","title":"Restrictive DNS servers, especially Fritzbox routers","text":"<p>The normal use of DDEV involves project URLs (and hostnames) like <code>*.ddev.site</code>. So a project with the name <code>mytypo3</code> will have the default hostname <code>mytypo3.ddev.site</code> and the default URL <code>https://mytypo3.ddev.site</code>. The way this works is that <code>*.ddev.site</code> is a Domain Name System (DNS) entry which always resolves to <code>127.0.0.1</code>, or <code>localhost</code>.</p> <p>There are a few DNS servers, mostly local Fritzbox routers, which do not allow a DNS lookup to result in <code>127.0.0.1</code>. In this situation, DDEV will ask you to use superuser (<code>sudo</code>) privileges to add the hostname to the system <code>hosts</code> file, often <code>/etc/hosts</code> or <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code>. This is not the preferred behavior, as DDEV does not want to edit your system files.</p> <p>Instead, if DDEV is asking you to do this and add hostnames, it\u2019s best to solve the underlying problem by adding configuration to the DNS server (often Fritzbox router) or by using a less-restrictive DNS server like the Cloudflare <code>1.1.1.1</code> public DNS server.</p> <p>These options are explained in the Troubleshooting - DNS Rebinding section of the documentation.</p>"},{"location":"users/usage/offline/","title":"Using DDEV Offline","text":"<p>Prepare all projects and pull Docker images before going offline</p> <p>All necessary Docker images must be downloaded and built prior to working offline.</p> <p>Run the following commands:</p> <pre><code># Download all images for all projects\nddev utility download-images --all\n\n# Start all projects to ensure images are built\nddev start --all\n\n# Stop all projects\nddev poweroff\n</code></pre> <p>DDEV attempts to work smoothly offline, and you shouldn\u2019t have to do anything to make it work.</p> <p>However, it cannot pull needed Docker images when offline if a new Docker image is required, so you\u2019ll want to make sure that you try a <code>ddev start</code> before going offline to make sure everything has been pulled.</p> <p>If you have a project running when you\u2019re online (using DNS for name resolution) and you then go offline, do a <code>ddev restart</code> to get the hostname added into <code>/etc/hosts</code> for name resolution.</p> <p>You have some general options as well:</p> <p>In <code>.ddev/config.yaml</code>, <code>use_dns_when_possible: false</code> will make DDEV never try to use DNS for resolution, instead adding hostnames to <code>/etc/hosts</code>. You can also use <code>ddev config --use-dns-when-possible=false</code> to set this configuration option.</p> <p>You can also set up a local DNS server like dnsmasq (Linux and macOS, <code>brew install dnsmasq</code>) or (unbound or many others on Windows) in your own host environment that serves the <code>project_tld</code> that you choose, and DNS resolution will work fine. You\u2019ll likely want a wildcard A record pointing to <code>127.0.0.1</code> on most DDEV installations. If you use dnsmasq, you must configure it to allow DNS rebinding.</p> <p>To understand what\u2019s going on with name resolution and your browser and offline use, we recommend Hostnames and Wildcards and DDEV Oh My! on ddev.com.</p> <p>Administrative Privileges Required</p> <p>If you <code>ddev start</code> when offline, DDEV will try to add <code>&lt;projectname&gt;.ddev.site</code> to your <code>/etc/hosts</code> file. You must have administrative privileges to edit the hosts file on any operating system.</p> <p>Oddities of using <code>buildx</code> <code>docker-container</code> driver</p> <p>This is an unusual situation, mostly encountered by DDEV developers who have been pushing images, but you may not be able to work offline if your <code>docker buildx inspect</code> shows the <code>docker-container</code> driver, and you\u2019ll need to switch to a builder that has the <code>docker</code> driver. <code>docker buildx ls</code> will show available drivers, or you can switch to one with <code>docker buildx create --name docker-driver --driver docker --use</code>. This is reported in docker buildx issue.</p>"},{"location":"users/usage/troubleshooting/","title":"Troubleshooting","text":"<p>Things might go wrong! In addition to this page, consider checking Stack Overflow and the DDEV issue queue and other support options, as well as Docker troubleshooting suggestions and Mutagen troubleshooting suggestions.</p>"},{"location":"users/usage/troubleshooting/#general-troubleshooting-strategies","title":"General Troubleshooting Strategies","text":"<ul> <li>Please use the current stable version of DDEV and of your Docker provider before going too far or asking for support.</li> <li>Run <code>ddev utility diagnose</code> to get a quick assessment of your DDEV installation and current project. This provides concise, actionable diagnostics for common issues.</li> <li>Start by running <code>ddev poweroff</code> to make sure all containers can start fresh.</li> <li>Temporarily disable firewalls, VPNs, tunnels, network proxies, and virus checkers while you\u2019re troubleshooting.</li> <li>Temporarily disable any proxies you\u2019ve established in Docker\u2019s settings.</li> <li>Check to see if you\u2019re out of disk space. On macOS, make sure that your Docker provider has adequate disk space allocated. (DDEV will normally warn you about problems in this situation.)</li> <li>On macOS, if you have a particular heavyweight project or are encountering <code>kill</code> statements in <code>ddev logs</code>, increase your memory allocation in your Docker provider. (Most projects are fine with 5-6GB allocated.)</li> <li>On macOS your Docker provider limits the amount of disk space available to Docker. Make sure that you increase it if you\u2019re seeing disk space problems.</li> <li>Please make sure that your project is in a subdirectory of your home directory and has normal ownership and privileges. For example, <code>ls -ld .</code> in your project directory should show you as owner of the directory and with write privileges.</li> <li>Use <code>ddev utility dockercheck</code> and <code>ddev utility test</code> to help sort out Docker problems.</li> <li>Make sure you do not have disk space problems on your computer. This can be especially tricky on WSL2, where you need to check both the main Windows disk space and WSL2 disk space as well.</li> <li>On macOS, check to make sure your Docker provider is not out of disk space. In Settings (or Preferences) \u2192 Resources \u2192 Disk image size there should be ample space left; try not to let usage exceed 80% because the reported number can be unreliable. If it says zero used, something is wrong.</li> <li>If you have customizations like PHP overrides, nginx or Apache overrides, MySQL/PostgreSQL overrides, custom services, or <code>config.yaml</code> changes, please back them out while troubleshooting. It\u2019s important to have the simplest possible environment while troubleshooting.</li> <li>Restart Docker. Consider a Docker factory reset in serious cases, which will destroy any databases you\u2019ve loaded. See Docker Troubleshooting for more.</li> <li> <p>Try the simplest possible DDEV project (like <code>ddev utility test</code> does):</p> <pre><code>ddev poweroff\nmkdir ~/tmp/testddev\ncd ~/tmp/testddev\nddev config --auto\nprintf \"&lt;?php\\nphpinfo();\\n\" &gt; index.php\nddev start\n</code></pre> <p>If that starts up fine, there may be an issue specifically with the project you\u2019re trying to start.</p> </li> </ul> <p>Using DDEV with Other Development Environments</p> <p>DDEV uses your system\u2019s port 80 and 443 by default when projects are running. If you\u2019re using another local development environment (like Lando or Docksal or a native setup), you can either stop the other environment or configure DDEV to use different ports. See troubleshooting for more detailed problem-solving. It\u2019s easiest to stop the other environment when you want to use DDEV, and stop DDEV when you want to use the other environment.</p>"},{"location":"users/usage/troubleshooting/#debug-environment-variables","title":"Debug Environment Variables","text":"<p>Two environment variables meant for DDEV development may also be useful for broader troubleshooting: <code>DDEV_DEBUG</code> and <code>DDEV_VERBOSE</code>. When enabled, they\u2019ll output more information when DDEV is executing a command. <code>DDEV_VERBOSE</code> can be particularly helpful debugging Dockerfile problems because it outputs complete information about the Dockerfile build stage within the <code>ddev start</code> command.</p> <p>You can set either one in your current session by running <code>export DDEV_DEBUG=true</code> and <code>export DDEV_VERBOSE=true</code>.</p>"},{"location":"users/usage/troubleshooting/#front-end-development-tools","title":"Front-End Development Tools","text":""},{"location":"users/usage/troubleshooting/#vite-issues","title":"Vite Issues","text":"<p>If you\u2019re experiencing issues with Vite development servers (like \u201cBad Gateway\u201d errors, CORS problems, or HMR not working), see the comprehensive Vite Integration troubleshooting section which covers:</p> <ul> <li>Configuration of <code>web_extra_exposed_ports</code></li> <li>CORS and origin settings</li> <li>Port conflicts and HMR issues</li> <li>Asset loading problems</li> </ul> <p></p>"},{"location":"users/usage/troubleshooting/#web-server-ports-already-occupied","title":"Web Server Ports Already Occupied","text":"<p>On <code>ddev start</code> you may see a message like this:</p> <pre><code>Port 443 is busy, using 33001 instead, see https://ddev.com/s/port-conflict\n</code></pre> <p>This means that DDEV has detected that it can\u2019t use the expected port (<code>443</code>) in this example, because another application is using it. If this is OK, you don\u2019t need to take any action. Most users want to use the default ports though (<code>80</code> and <code>443</code>) so you may want to figure out what the conflict is and solve it (usually by stopping the competing application).</p> <p>If you want to figure out what is using the default ports, use the techniques listed below to stop the competing application or to change the default ports.</p> <p>If you do get messages like:</p> <p>ERROR: for ddev-router Cannot start service ddev-router: Ports are not available: listen tcp 127.0.0.1:XX: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p> <p>or</p> <p>Error response from daemon: Ports are not available: exposing port TCP 127.0.0.1:8025 -&gt; 0.0.0.0:0: listen tcp 127.0.0.1:8025: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.</p> <p>it means that some other process is using a needed port, and use a number of techniques to sort this out, although this is rarely necessary now the DDEV can use alternate ports.</p> <ol> <li>Stop all Docker containers that might be using the port by running <code>ddev poweroff &amp;&amp; docker rm -f $(docker ps -aq)</code>, then restart Docker.</li> <li>If you\u2019re using another local development environment that uses these ports (MAMP, WAMP, Lando, etc.), consider stopping it.</li> <li>Fix port conflicts by configuring DDEV globally to use different ports.</li> <li>Fix port conflicts by stopping the competing application.</li> </ol>"},{"location":"users/usage/troubleshooting/#method-1-stop-the-conflicting-application","title":"Method 1: Stop the conflicting application","text":"<p>Consider <code>lando poweroff</code> for Lando, or <code>fin system stop</code> for Docksal, or stop MAMP using GUI interface or <code>stop.sh</code>.</p>"},{"location":"users/usage/troubleshooting/#method-2-fix-port-conflicts-by-configuring-your-project-to-use-different-ports","title":"Method 2: Fix port conflicts by configuring your project to use different ports","text":"<p>To configure DDEV to use non-conflicting ports, remove router port configuration from the project and set it globally to different values. This will work for most people:</p> <pre><code>ddev config global --router-http-port=8080 --router-https-port=8443\nddev config --router-http-port=\"\" --router-https-port=\"\"\nddev restart\n</code></pre> <p>This changes all projects\u2019 HTTP URLs to <code>http://yoursite.ddev.site:8080</code> and the HTTPS URLs to <code>https://yoursite.ddev.site:8443</code>.</p>"},{"location":"users/usage/troubleshooting/#method-3-fix-port-conflicts-by-stopping-the-competing-application","title":"Method 3: Fix port conflicts by stopping the competing application","text":"<p>Alternatively, stop the other application.</p> <p>Probably the most common conflicting application is Apache running locally. It can often be stopped gracefully (but temporarily) with:</p> <pre><code>sudo apachectl stop\n</code></pre> <p>or</p> <pre><code>sudo systemctl stop apache2 &amp;&amp; sudo systemctl disable apache2\n</code></pre> <p>Common tools that use port 80 and port 443:</p> <p>Most people will want to use ports 80 and 443, the default HTTP and HTTPS ports for their projects, and these work fine whenever some other process is not using them. All of the DDEV projects on a given computer can use ports 80 and 443 at the same time. However, if you are not getting the default ports, here are some of the other common processes that could be using ports 80/443 and methods to stop them.</p> <ul> <li>macOS content filtering: Under \u201cScreen Time\u201d \u2192 \u201cChoose Screen Time content and privacy settings\u201d, turn off \u201cContent and Privacy\u201d and then reboot. This has been a common issue with macOS Sonoma.</li> <li>macOS or Linux Homebrew: Look for active processes by running <code>brew services</code> and temporarily running <code>brew services stop</code> individually to see if it has any impact on the conflict.</li> <li>MAMP (macOS): Stop MAMP.</li> <li>Apache: Temporarily stop with <code>sudo apachectl stop</code>, permanent stop depends on your environment. On Debian/Ubuntu: <code>sudo systemctl disable apache2 &amp;&amp; sudo systemctl stop apache2</code></li> <li>nginx (macOS Homebrew): <code>sudo brew services stop nginx</code> or <code>sudo launchctl stop homebrew.mxcl.nginx</code>.</li> <li>nginx (Ubuntu): <code>sudo systemctl stop nginx</code> or <code>sudo service nginx stop</code>.</li> <li>VPNKit (macOS): You likely have a Docker container bound to port 80. Do you have containers up for Lando or another Docker-based development environment? If so, stop the other environment.</li> <li>Lando: If you\u2019ve previously used Lando, try running <code>lando poweroff</code>.</li> <li>IIS on Windows (can affect WSL2). You\u2019ll have to disable it in the Windows settings.</li> </ul> <p>To dig deeper, you can use a number of tools to find out what process is listening.</p> <p>On macOS and Linux, try the <code>lsof</code> tool on ports 80 or 443 or whatever port you\u2019re having trouble with:</p> <pre><code>$ sudo lsof -i :443 -sTCP:LISTEN\nCOMMAND  PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   1608 www-data   46u  IPv4  13913      0t0  TCP *:http (LISTEN)\nnginx   5234     root   46u  IPv4  13913      0t0  TCP *:http (LISTEN)\n</code></pre> <p>You can also use the <code>netstat -anv -p tcp</code> command to examine processes running on specific ports:</p> <pre><code>$ sudo netstat -anv -p tcp | egrep 'Proto|(\\*\\.(80|443))'\nProto Recv-Q Send-Q  Local Address          Foreign Address        (state)      rhiwat  shiwat    pid   epid state  options           gencnt    flags   flags1 usscnt rtncnt fltrs\ntcp4       0      0  *.80                   *.*                    LISTEN       131072  131072  10521      0 00100 00000006 000000000000965d 00000000 00000900      1      0 000001\ntcp4       0      0  *.443                  *.*                    LISTEN       131072  131072  10521      0 00100 00000006 000000000000965c 00000000 00000900      1      0 000001```\n</code></pre> <p>The <code>pid</code> column shows the process ID of the process listening on the port. In this case, it\u2019s <code>10521</code>. You can use <code>ps</code> to find out what process that is:</p> <pre><code>$ ps -p 10521\n$ ps -fp 10521\nUID   PID  PPID   C STIME   TTY           TIME CMD\n501 10521     1   0 12:35PM ??         0:05.16 /Applications/OrbStack.app/Contents/MacOS/../Frameworks/OrbStack Helper.app/Contents/MacOS/OrbStack Helper vmgr -build-id 339077377 -handoff\n</code></pre> <p>On Windows CMD, use sysinternals tcpview or try using <code>netstat</code> and <code>tasklist</code> to find the process ID:</p> <pre><code>&gt; netstat -aon | findstr \":80.*LISTENING\"\n  TCP    127.0.0.1:80           0.0.0.0:0              LISTENING       5760\n  TCP    127.0.0.1:8025         0.0.0.0:0              LISTENING       5760\n  TCP    127.0.0.1:8036         0.0.0.0:0              LISTENING       5760\n\n&gt; tasklist | findstr \"5760\"\ncom.docker.backend.exe        5760 Services                   0      9,536 K\n</code></pre> <p>The resulting output displays which command is running and its PID. Choose the appropriate method to stop the other server.</p> <p>You may also be able to find what\u2019s using a port using <code>curl</code>. On Linux, macOS, or in Git Bash on Windows, <code>curl -I localhost</code> or <code>curl -I -k https://localhost:443</code>. The result may give you a hint about which application is at fault.</p> <p>We welcome your suggestions based on other issues you\u2019ve run into and your troubleshooting technique.</p>"},{"location":"users/usage/troubleshooting/#debugging-port-issues-on-wsl2","title":"Debugging Port Issues on WSL2","text":"<p>On WSL2 it\u2019s harder to debug this because the port may be occupied either on the traditional Windows side, or within your WSL2 distro. This means you may have to debug it in both places, perhaps using both the Windows techniques shown above and the Linux techniques shown above. The ports are shared between Windows and WSL2, so they can be broken on either side.</p>"},{"location":"users/usage/troubleshooting/#database-container-fails-to-start","title":"Database Container Fails to Start","text":"<p>Use <code>ddev logs -s db</code> to see what\u2019s wrong.</p> <p>The most common cause of the database container not coming up is changing the database type or version in the project configuration, so the database server daemon is unable to start using an existing configuration for a different type or version.</p> <p>To solve this:</p> <ul> <li>Change the configuration in <code>.ddev/config.yaml</code> back to the original configuration.</li> <li>Export the database with <code>ddev export-db</code>.</li> <li>Delete the project with <code>ddev delete</code>, or stop the project and remove the database volume using <code>docker volume rm &lt;project&gt;-mariadb</code> or <code>docker volume rm &lt;project&gt;-postgres</code>.</li> <li>Update <code>.ddev/config.yaml</code> to use the new database type or version.</li> <li>Start the project and import the database from your export.</li> </ul>"},{"location":"users/usage/troubleshooting/#web-service-unhealthy-or-web-service-starting-or-exited","title":"\u201cweb service unhealthy\u201d or \u201cweb service starting\u201d or Exited","text":"<p>Use <code>ddev logs</code> to see what\u2019s wrong.</p> <p>The most common cause of the web container being unhealthy is a user-defined <code>.ddev/nginx-full/nginx-site.conf</code> or <code>.ddev/apache/apache-site.conf</code>. Please rename these to <code>&lt;xxx_site.conf&gt;</code> during testing. To figure out what\u2019s wrong with it after you\u2019ve identified that as the problem, use <code>ddev logs</code> and review the error.</p> <p>Changes to <code>.ddev/nginx-site.conf</code> and <code>.ddev/apache/apache-site.conf</code> take effect only when you do a <code>ddev restart</code> or the equivalent.</p>"},{"location":"users/usage/troubleshooting/#no-input-file-specified-404-or-forbidden-403","title":"No Input File Specified (404) or Forbidden (403)","text":"<p>If you get a 404 with \u201cNo input file specified\u201d (nginx) or a 403 with \u201cForbidden\u201d (Apache) when you visit your project, it usually means that no <code>index.php</code> or <code>index.html</code> is being found in the docroot. This can result from:</p> <ul> <li>Misconfigured docroot: If the docroot isn\u2019t where the web server thinks it is, then the web server won\u2019t find <code>index.php</code>. Look at your <code>.ddev/config.yaml</code> to verify it has a docroot containing <code>index.php</code>. It should be a relative path.</li> <li>Missing <code>index.php</code>: There may not be an <code>index.php</code> or <code>index.html</code> in your project.</li> </ul>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-and-logs-contain-failed-28-no-space-left-on-device-docker-file-space","title":"<code>ddev start</code> Fails and Logs Contain \u201cfailed (28: No space left on device)\u201d - Docker File Space","text":"<p>If <code>ddev start</code> fails, it\u2019s most often because the <code>web</code> or <code>db</code> container fails to start. In this case, the error message from <code>ddev start</code> says something like \u201cFailed to start : db container failed: log=, err=container exited, please use \u2018ddev logs -s db\u2019 to find out why it failed\u201d. You can<code>ddev logs -s db</code> to find out what happened. <p>If you see any variant of \u201cno space left on device\u201d in the logs when using Docker Desktop, it means you have to increase or clean up Docker\u2019s file space. Increase the \u201cDisk image size\u201d setting under \u201cResources\u201d in Docker\u2019s Preferences:</p> <p></p> <p>If you see \u201cno space left on device\u201d on Linux, it most likely means your filesystem is full.</p>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-with-container-failed-to-become-ready","title":"<code>ddev start</code> Fails with \u201ccontainer failed to become ready\u201d","text":"<p>A container fails to become ready when its health check is failing. This can happen to any of the containers, and you can usually find the issue with a <code>docker inspect</code> command.</p> <p>Tip</p> <p>You may need to install jq for these examples (<code>brew install jq</code>), or remove the <code>| jq</code> from the command and read the raw JSON output.</p> <p>For the <code>web</code> container:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-&lt;projectname&gt;-web | jq\n</code></pre> <p>For <code>ddev-router</code>:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-router\n</code></pre> <p>For <code>ddev-ssh-agent</code>:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-ssh-agent\n</code></pre> <p>Don\u2019t forget to check logs using <code>ddev logs</code> for the <code>web</code> container, and <code>ddev logs -s db</code> for the <code>db</code> container!</p> <p>For <code>ddev-router</code> and <code>ddev-ssh-agent</code>: <code>docker logs ddev-router</code> and <code>docker logs ddev-ssh-agent</code>.</p>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-with-failed-to-start-project-name-no-such-container-ddev-router","title":"<code>ddev start</code> Fails with \u201cFailed to start [project name]: No such container: ddev-router\u201d","text":"<p>Deleting the images and re-pulling them generally solves this problem.</p> <p>Try running the following commands from the host machine:</p> <pre><code>ddev poweroff\ndocker rm -f $(docker ps -aq)\ndocker rmi -f $(docker images -q)\n</code></pre> <p>You should then be able to start your DDEV machine.</p>"},{"location":"users/usage/troubleshooting/#ddev-version-shows-an-old-version","title":"<code>ddev --version</code> shows an old version","text":"<p>If you have installed or upgraded DDEV to the latest version, but when you check the actual version with <code>ddev --version</code>, it shows an older version, please refer to Why do I have an old DDEV?</p>"},{"location":"users/usage/troubleshooting/#trouble-building-dockerfiles","title":"Trouble Building Dockerfiles","text":"<p>The additional <code>.ddev/web-build/Dockerfile</code> capability in DDEV is wonderful, but it can be hard to figure out what to put in there.</p> <p>The best approach for any significant Dockerfile is to <code>ddev ssh</code> and <code>sudo -s</code> and then one at a time, do the things that you plan to do with a <code>RUN</code> command in the Dockerfile.</p> <p>For example, if your Dockerfile were</p> <pre><code>RUN npm install --global forever\n</code></pre> <p>You could test it with <code>ddev ssh</code>, <code>sudo -s</code>, and then <code>npm install --global forever</code>.</p> <p>The error messages you get will be more informative than messages that come when the Dockerfile is processed.</p> <p>You can also see the output from the full Docker build using either</p> <pre><code>ddev utility rebuild\n</code></pre> <p>or</p> <pre><code>~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml --progress=plain build --no-cache\n</code></pre>"},{"location":"users/usage/troubleshooting/#docker-build-fails-apt-get-update-perhaps-ssl-certificate-problem-self-signed-certificate","title":"Docker build fails <code>apt-get update</code>, perhaps \u201cSSL certificate problem: self-signed certificate\u201d","text":"<p>The Docker build environment (where all projects have a little bit happening) is very sensitive to problems with <code>apt-get update</code> or with TLS certificate authentication. If you ware seeing problems with <code>apt-get update</code> failing, some of these strategies may help:</p> <ul> <li>WSL2: On WSL2 it\u2019s a known issue that the WSL2 environment time can get out of sync with the real time. This is an ongoing problem with WSL2, and can be fixed with various workarounds. One good workaround is to install <code>ntpdate</code> and <code>sudo ntpdate pool.ntp.org</code> to sync the time. The time in WSL2 can get out of sync due to laptop sleeping or other causes. A reboot also fixes it.</li> <li>VPN: If you are on a packet-inspection VPN, it often causes problems with validation of certificates on internet sites. In that situation you\u2019ll need to get the CA updates required and install them with a custom Dockerfile, as described on Stack Overflow.</li> <li>Other Docker Build: The Dockerfile build environment is different from the host-side build and different from what you get with <code>ddev ssh</code>. If you\u2019re having trouble with it it may be caused by name resolution or IP connectivity problems, most often caused by a firewall or VPN. Turn off your firewall temporarily and VPN. A good debugging technique would be to do a simple <code>.ddev/web-build/Dockerfile</code> that does <code>RUN curl -I https://www.google.com</code> and then use <code>ddev utility rebuild</code> to see the result. If it gets a 200 result, then your name resolution and internet connectivity are working in the Docker build environment.</li> </ul>"},{"location":"users/usage/troubleshooting/#ddev-starts-but-browser-cant-access-url","title":"DDEV Starts but Browser Can\u2019t Access URL","text":"<p>You may see one of these messages in your browser:</p> <ul> <li><code>403</code> Forbidden</li> <li>[url] server IP address could not be found</li> <li>We can\u2019t connect to the server at [url]</li> </ul> <p>If you get the <code>403 Forbidden</code> it\u2019s almost always because your docroot is set wrong. You should have something like <code>docroot: web</code> or <code>docroot: \"\"</code> or <code>docroot: docroot</code> with the relative path to the directory where your <code>index.php</code> lives in the project.</p> <p>Name resolution: Most people use <code>*.ddev.site</code> URLs, which work great most of the time but require internet access.</p> <p><code>*.ddev.site</code> is a wildcard DNS entry that always returns the IP address 127.0.0.1 (localhost). If you\u2019re not connected to the internet, however, or if various other name resolution issues fail, this name resolution won\u2019t work.</p> <p>While DDEV can create a web server and a Docker network infrastructure for a project, it doesn\u2019t have control of your computer\u2019s name resolution, so its backup technique to make a hostname resolvable by the browser is to add an entry to the hosts file (<code>/etc/hosts</code> on Linux and macOS, <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code> on traditional Windows).</p> <ul> <li>If you\u2019re not connected to the internet, your browser will not be able to look up <code>*.ddev.site</code> hostnames. DDEV works fine offline, but for your browser to look up names they\u2019ll have to be resolved in a different way.</li> <li>DDEV assumes that hostnames can be resolved within 3 seconds. That assumption is not valid on all networks or computers, so you can increase the amount of time it waits for resolution. Increasing to 5 seconds, for example: <code>ddev config global --internet-detection-timeout-ms=5000</code>.</li> <li>If DDEV detects that it can\u2019t look up one of the hostnames assigned to your project for that or other reasons, it will try to add that to the hosts file on your computer, which requires administrative privileges (sudo or Windows UAC).<ul> <li>This technique may not work on Windows WSL2, see below.</li> </ul> </li> </ul>"},{"location":"users/usage/troubleshooting/#dns-rebinding-prohibited-mostly-on-fritzbox-routers","title":"DNS Rebinding Prohibited (Mostly on Fritzbox Routers)","text":"<p>You may see one of several messages:</p> <ul> <li>Cannot resolve</li> <li>unknown host</li> <li>No address associated with hostname</li> </ul> <p>Some DNS servers prevent the use of DNS records that resolve to <code>localhost</code> (127.0.0.1) because in uncontrolled environments this may be used as a form of attack called DNS Rebinding. Since <code>*.ddev.site</code> resolves to 127.0.0.1, they may refuse to resolve, and your browser may be unable to look up a hostname, and give you messages like \u201c server IP address could not be found\u201d or \u201cWe can\u2019t connect to the server at \u201d. <p>You verify this is your problem by running <code>ping -c 1 dkkd.ddev.site</code>. If you get \u201cNo address associated with hostname\u201d or something of that type, your computer is unable to look up <code>*.ddev.site</code>.</p> <p>In this case, you can take any one of the following approaches:</p> <ol> <li>Reconfigure your router to allow DNS Rebinding. Many Fritzbox routers have added default DNS Rebinding disallowal, and they can be reconfigured to allow it. See issue. If you have the local dnsmasq DNS server it may also be configured to disallow DNS rebinding, but it\u2019s a simple change to a configuration directive to allow it.</li> <li>Most computers can use more relaxed DNS resolution if they are not on corporate intranets that have non-internet DNS. So for example, the computer can be set to use 8.8.8.8 (Google) or 1.1.1.1 (Cloudflare) for DNS name resolution, see this article.</li> <li>If you have control of the router, you can usually change its DHCP settings to choose a public, relaxed DNS server as in #2.</li> <li>You can live with DDEV trying to edit the <code>/etc/hosts</code> file, which it only has to do when a new name is added to a project.</li> </ol> <p>An extensive discussion of this class of problem is on ddev.com.</p>"},{"location":"users/usage/troubleshooting/#windows-wsl2-network-issues","title":"Windows WSL2 Network Issues","text":"<ul> <li>Some recent WSL2 versions have had very slow or completely failed network access inside the container or during the Docker build process. A <code>wsl --shutdown</code> or a reboot seems to clear these up.</li> <li>If you\u2019re using a browser on Windows, accessing a project in WSL2, you can end up with confusing results when your project is listening on a port inside WSL2 while a Windows process is listening on that same port. The way to sort this out is to stop your project inside WSL2, verify that nothing is listening on the port there, and then study the port on the Windows side by visiting it with a browser or using other tools as described above.</li> </ul>"},{"location":"users/usage/troubleshooting/#limitations-on-symbolic-links-symlinks","title":"Limitations on Symbolic Links (symlinks)","text":"<p>Symbolic links are widely used but have specific limitations in many environments beyond DDEV. Here are some of the ways those may affect you:</p> <ul> <li>Crossing mount boundaries: Symlinks may not generally cross between network mounts. In other words, if you have a relative symlink in the root of your project directory on the host that points to <code>../somefile.txt</code>, that symlink will not be valid inside the container where <code>../</code> is a completely different filesystem (and is typically not mounted).</li> <li>Symlinks to absolute paths: If you have an absolute symlink to something like <code>/Users/xxx/somefile.txt</code> on the host, it will not be resolvable inside the container because <code>/Users</code> is not mounted there. Some tools, especially on Magento 2, may create symlinks to rooted paths, with targets like <code>/var/www/html/path/to/something</code>. These basically can\u2019t make it to the host and may create errors.</li> <li>Windows restrictions on symlinks: Inside the Docker container on Windows, you may not be able to create a symlink that goes outside the container.</li> <li>Mutagen restrictions on Windows symlinks: On macOS and Linux (including WSL2) the default <code>.ddev/mutagen/mutagen.yml</code> chooses the <code>posix-raw</code> type of symlink handling. (See Mutagen docs). This basically means that any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. However, Mutagen does not support posix-raw on traditional Windows, so DDEV uses the <code>portable</code> symlink mode. So on Windows with Mutagen, symlinks have to be strictly limited to relative links that are inside the Mutagen section of the project.</li> </ul>"},{"location":"users/usage/troubleshooting/#delete-and-re-download-docker-images","title":"Delete and Re-Download Docker Images","text":"<p>In a few unusual cases, the actual downloaded Docker images can somehow get corrupted. Deleting the images will force them to be re-downloaded or rebuilt. This does no harm, as everything is rebuilt, but running <code>ddev start</code> will take longer while it downloads needed resources:</p> <pre><code>ddev poweroff\ndocker rm -f $(docker ps -aq) # Stop any other random containers that may be running\ndocker rmi -f $(docker images -q) # You might have to repeat this to get rid of all images\n</code></pre> <p></p>"},{"location":"users/usage/troubleshooting/#your-docker-install-has-only-available-disk-space","title":"\u201cYour Docker install has only \u2026 available disk space\u201d","text":"<p>Weird and bad things happen when Docker or your host system run out of disk space. Here are some ways to solve the problem if you get the warning \u201cYour Docker install has only \u2026 available disk space\u201d:</p> <ul> <li>Everybody: Often a <code>ddev delete images</code> and <code>docker builder prune</code> (or <code>docker buildx prune</code>) will free up plenty of space. Consider deleting all images with <code>docker rmi -f $(docker images -q)</code>; this does no damage, but the images will have to be re-downloaded.</li> <li>macOS and traditional Windows: <code>ddev mutagen reset</code> in each project will free up space.</li> <li>Docker Desktop for Mac allocates a specific amount of docker-related space, and you can increase it. Settings -&gt; Resources -&gt; Disk usage limit.</li> <li>Colima, Lima, Rancher Desktop: Before changing anything, save away your databases with <code>ddev snapshot -a</code>. Then follow instructions in each of those projects to increase allocated disk space. If you have your databases saved, you can delete your current instance and recreate with new disk constraints, see Docker Installation.</li> <li>OrbStack and Linux including WSL2 with Docker CE: You are probably out of disk space on the disk where Docker stores images and volumes.</li> </ul>"},{"location":"users/usage/uninstall/","title":"Uninstalling DDEV","text":"<p>A DDEV installation consists of:</p> <ul> <li>The self-contained <code>ddev</code> binary.</li> <li>Each project\u2019s <code>.ddev</code> directory.</li> <li>The global <code>~/.ddev</code> directory where various global items are stored. (This directory can be moved to another location.)</li> <li>The global <code>~/.ddev_mutagen_data_directory</code> directory where Mutagen sync data may be stored.</li> <li>The associated Docker images, containers and volumes DDEV created.</li> <li>Any entries in <code>/etc/hosts</code>.</li> </ul> <p>Please use <code>ddev snapshot</code> or <code>ddev export-db</code> to make backups of your databases before deleting projects or uninstalling.</p> <p>You can use <code>ddev clean</code> to uninstall the vast majority of things DDEV has touched. For example, <code>ddev clean &lt;project&gt;</code> or <code>ddev clean --all</code>.</p> <p>To uninstall one project, run <code>ddev delete &lt;project&gt;</code>. This removes any hostnames in <code>/etc/hosts</code> and removes your database. If you don\u2019t want it to make a database backup/snapshot on the way down, include the <code>--omit-snapshot</code> option: <code>ddev delete --omit-snapshot &lt;project&gt;</code>.</p> <p>To remove all DDEV-owned <code>/etc/hosts</code> entries: <code>ddev hostname --remove-inactive</code>.</p> <p>To remove the global <code>.ddev</code> directory: <code>rm -r ~/.ddev</code>.</p> <p>To remove the global <code>.ddev_mutagen_data_directory</code> directory: <code>ddev poweroff &amp;&amp; rm -r ~/.ddev_mutagen_data_directory</code>.</p> <p>If you installed Docker only for DDEV and want to uninstall it with all containers and images, uninstall it for your version of Docker.</p> <p>Otherwise:</p> <ul> <li>Remove Docker images from before the current DDEV release with <code>ddev delete images</code>.</li> <li>Remove all DDEV Docker containers that might still exist: <code>docker rm $(docker ps -a | awk '/ddev/ { print $1 }')</code>.</li> <li>Remove all DDEV Docker images that might exist: <code>docker rmi $(docker images | awk '/ddev/ {print $3}')</code>.</li> <li>Remove all Docker images of any type (does no harm; they\u2019ll be re-downloaded): <code>docker rmi -f $(docker images -q)</code>.</li> <li>Remove any Docker volumes: <code>docker volume rm $(docker volume ls | awk '/ddev|-mariadb/ { print $2 }')</code>.</li> </ul> <p>To remove the <code>ddev</code> binary:</p> <ul> <li>Find the binary location with <code>which -a ddev</code>, you may have several binaries installed in different ways. The output will give you a general idea of how you installed it.</li> <li>On macOS or Linux with Homebrew, <code>brew uninstall ddev</code>.</li> <li>For Linux or other simple installs, remove the binary. Example: <code>sudo rm /usr/local/bin/ddev</code>. For Linux installed via apt, <code>sudo apt-get remove ddev</code>.</li> <li>On Windows, if you used the DDEV Windows installer, use the uninstall on the Start Menu or in the \u201cAdd or Remove Programs\u201d section of Windows Settings.</li> </ul>"},{"location":"users/usage/vite/","title":"Vite Integration","text":"<p>Vite is a popular front-end build tool that provides fast development server with Hot Module Replacement (HMR) and optimized production builds. DDEV supports Vite development workflows for various frameworks including Laravel, Vue.js, React, Svelte, and more.</p>"},{"location":"users/usage/vite/#quick-setup","title":"Quick Setup","text":"<p>To use Vite with DDEV, you need to:</p> <ol> <li> <p>Configure DDEV to expose Vite\u2019s port in <code>.ddev/config.yaml</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: vite\n    container_port: 5173\n    http_port: 5172\n    https_port: 5173\n</code></pre> </li> <li> <p>Configure Vite in your <code>vite.config.js</code>:</p> <pre><code>import { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // Your settings\n  // ...\n\n  // Adjust Vites dev server to work with DDEV\n  // https://vitejs.dev/config/server-options.html\n  server: {\n    // Respond to all network requests\n    host: \"0.0.0.0\",\n    port: 5173,\n    strictPort: true,\n    // Defines the origin of the generated asset URLs during development,\n    // this must be set to the Vite dev server URL and selected port.\n    origin: `${process.env.DDEV_PRIMARY_URL_WITHOUT_PORT}:5173`,\n    // Configure CORS securely for the Vite dev server to allow requests\n    // from *.ddev.site domains, supports additional hostnames (via regex).\n    // If you use another `project_tld`, adjust this value accordingly.\n    cors: {\n      origin: /https?:\\/\\/([A-Za-z0-9\\-\\.]+)?(\\.ddev\\.site)(?::\\d+)?$/,\n    },\n  },\n})\n</code></pre> </li> <li> <p>Restart DDEV to apply configuration changes:</p> <pre><code>ddev restart\n</code></pre> </li> <li> <p>Start Vite development server:</p> <pre><code>ddev npm run dev\n# or\nddev yarn dev\n</code></pre> </li> </ol> <p>Your Vite development server will be available at <code>https://yourproject.ddev.site:5173</code>.</p> <p>HTTPS Configuration</p> <p>This guide assumes your project runs on <code>https://</code>. If you are unable to access the HTTPS version of your project, refer to the Configuring Browsers.</p> <p>Custom TLD</p> <p>If you use a custom <code>project_tld</code> other than <code>ddev.site</code>, adjust the CORS configuration accordingly in your <code>vite.config.js</code>, or use this snippet:</p> <pre><code>export default defineConfig({\n  server: {\n    cors: {\n      origin: new RegExp(\n        `https?:\\/\\/(${process.env.DDEV_HOSTNAME.split(\",\")\n          .map((h) =&gt; h.replace(\"*\", \"[^.]+\"))\n          .join(\"|\")})(?::\\\\d+)?$`\n      )\n    },\n  },\n});\n</code></pre>"},{"location":"users/usage/vite/#example-projects","title":"Example Projects","text":"<p>Example implementations demonstrating Vite integration with DDEV:</p> <ul> <li>Working with Vite in DDEV - Basic PHP project with step-by-step setup guide</li> <li>vite-php-setup - General PHP + Vite integration (adapt <code>VITE_HOST</code> for DDEV)</li> </ul> <p>For additional integration patterns and framework-specific examples:</p> <ul> <li>Vite Backend Integration Guide - Official Vite documentation for backend frameworks</li> <li>Vite Awesome List - Community-maintained list of integrations</li> </ul>"},{"location":"users/usage/vite/#craft-cms","title":"Craft CMS","text":"<p>The Vite plugin by <code>nystudio107</code> provides official DDEV support with detailed configuration instructions for <code>vite.config.js</code> and <code>config/vite.php</code>.</p> <p>Port Configuration</p> <p>When using <code>web_extra_exposed_ports</code> in <code>.ddev/config.yaml</code>, the <code>.ddev/docker-compose.*.yaml</code> file for port exposure is not required.</p> <p>Example implementations:</p> <ul> <li>Craft CMS with Vite integration</li> <li>Craft CMS Starter</li> <li>How we use DDEV, Vite and Tailwind with Craft CMS</li> </ul>"},{"location":"users/usage/vite/#drupal","title":"Drupal","text":"<p>Several tools and modules are available for integrating Vite with Drupal:</p> <ul> <li>Vite module - Uses Vite\u2019s manifest.json to map Drupal library files to compiled versions in <code>/dist</code> or to the Vite development server</li> <li>UnoCSS Starter theme - Drupal theme with Vite integration and DDEV setup instructions</li> <li>Foxy - Alternative asset bundling solution for Drupal</li> </ul> <p>Community resources:</p> <ul> <li>UnoCSS Starter Theme Documentation</li> <li>Proof of concept for Vite bundling in Drupal</li> </ul> <p>The Drupal community is actively developing Vite integration solutions for bundling assets across multiple modules and themes.</p>"},{"location":"users/usage/vite/#laravel","title":"Laravel","text":"<p>Laravel adopted Vite as the default asset bundler in v9.19, replacing Laravel Mix.</p> <p>Configure DDEV to expose Vite\u2019s port in <code>.ddev/config.yaml</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: vite\n    container_port: 5173\n    http_port: 5172\n    https_port: 5173\n</code></pre> <p>Configure Vite in your <code>vite.config.js</code>:</p> <pre><code>import { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    laravel({\n      input: [\n        'resources/css/app.css',\n        'resources/js/app.js',\n      ],\n      refresh: true,\n    }),\n  ],\n  server: {\n    host: \"0.0.0.0\",\n    port: 5173,\n    strictPort: true,\n    origin: `${process.env.DDEV_PRIMARY_URL_WITHOUT_PORT}:5173`,\n    cors: {\n      origin: /https?:\\/\\/([A-Za-z0-9\\-\\.]+)?(\\.ddev\\.site)(?::\\d+)?$/,\n    },\n  },\n});\n</code></pre> <p>Start the Vite development server:</p> <pre><code>ddev npm run dev\n</code></pre> <p>Example implementation:</p> <ul> <li>ddev-laravel-vite - Laravel with Vite integration</li> </ul> <p>Laravel-Specific Integration</p> <p>Laravel\u2019s Vite integration uses a <code>public/hot</code> file to manage development server state through its npm integration.</p>"},{"location":"users/usage/vite/#nodejs","title":"Node.js","text":"<p>DDEV supports Node.js-only projects by proxying requests to the correct ports within the web container. This configuration enables running Node.js applications like Keystone CMS or SvelteKit entirely within DDEV.</p> <p>This approach supports various architectures:</p> <ul> <li>Monorepo setup: Run a PHP backend with a Node.js frontend on separate subdomains within a single DDEV project</li> <li>Headless CMS: Ideal for decoupled architectures combining traditional backends with modern JavaScript frameworks</li> <li>Multi-project setup: Use separate DDEV projects for frontend and backend with inter-project communication</li> </ul> <p>Additional resources:</p> <ul> <li>Node.js Development with DDEV - Comprehensive guide to Node.js project configuration</li> <li>How to Run Headless Drupal and Next.js on DDEV - Headless CMS implementation guide</li> <li>ddev-laravel-breeze-sveltekit - Monorepo example with Laravel and SvelteKit</li> </ul>"},{"location":"users/usage/vite/#typo3","title":"TYPO3","text":"<p>Several tools are available for integrating Vite with TYPO3:</p> <ul> <li>typo3-vite-demo - Vite demo project</li> <li>vite-asset-collector - TYPO3 extension for Vite integration</li> <li>vite-plugin-typo3 - Vite plugin for TYPO3</li> <li>ddev-vite-sidecar - DDEV add-on for zero-config Vite integration</li> </ul> <p>The vite-asset-collector extension provides detailed DDEV installation instructions. For questions or support, join the Vite channel on TYPO3 Slack.</p>"},{"location":"users/usage/vite/#wordpress","title":"WordPress","text":"<p>Several libraries are available for integrating Vite with WordPress:</p> <ul> <li>php-wordpress-vite-assets - PHP library for loading Vite assets in WordPress</li> <li>vite-for-wp - WordPress integration for Vite</li> <li>wp-vite-manifest - Vite manifest loader for WordPress</li> </ul> <p>Example implementations:</p> <ul> <li>ddev-wp-vite-demo - Demo theme using php-wordpress-vite-assets</li> <li>wp-vite-manifest usage guide - Integration guide for themes and plugins</li> <li>Integrating Vite and DDEV into WordPress</li> </ul>"},{"location":"users/usage/vite/#github-codespaces","title":"GitHub Codespaces","text":"<p>DDEV supports Vite in GitHub Codespaces with alternative port configuration. Example implementations:</p> <ul> <li>Laravel with Vite in Codespaces</li> <li>Craft CMS with Vite in Codespaces</li> </ul> <p>Alternative Port Configuration Required</p> <p>The DDEV router is unavailable in Codespaces. Instead of using <code>web_extra_exposed_ports</code> in <code>.ddev/config.yaml</code>, create a <code>.ddev/docker-compose.vite-workaround.yaml</code> file:</p> <pre><code>services:\n  web:\n    ports:\n      - 5173:5173\n</code></pre> <p>For additional Codespaces configuration details, see the DDEV Codespaces documentation.</p>"},{"location":"users/usage/vite/#auto-starting-vite","title":"Auto-starting Vite","text":"<p>You can configure DDEV to automatically start Vite when the project starts using hooks:</p> <p>Add to <code>.ddev/config.yaml</code>:</p> <pre><code>hooks:\n  post-start:\n    - exec: \"npm run dev\"\n</code></pre> <p>Or use a more robust daemon configuration (logs available via <code>ddev logs -s web</code>):</p> <pre><code>web_extra_daemons:\n  - name: \"vite\"\n    command: bash -c 'npm install &amp;&amp; npm run dev -- --host'\n    directory: /var/www/html\n</code></pre> <p>For a real-world daemon implementation example, see the ddev.com repository configuration.</p>"},{"location":"users/usage/vite/#production-builds","title":"Production Builds","text":"<p>For production builds, ensure your <code>vite.config.js</code> includes proper manifest generation:</p> <pre><code>export default defineConfig({\n  build: {\n    manifest: true,\n    rollupOptions: {\n      input: {\n        main: 'path/to/your/main.js',\n      }\n    }\n  },\n  // ... other configuration\n})\n</code></pre> <p>Build for production:</p> <pre><code>ddev npm run build\n</code></pre>"},{"location":"users/usage/vite/#ddev-add-ons","title":"DDEV Add-ons","text":"<p>Several community add-ons simplify Vite integration:</p> <ul> <li>ddev-vite-sidecar - Zero-config Vite integration exposing the development server as a <code>https://vite.*</code> subdomain, eliminating the need to expose ports to the host system</li> <li>ddev-vitest - Helper commands for projects using Vitest, a Vite-native testing framework</li> <li>ddev-viteserve - First DDEV Vite add-on (no longer maintained, but pioneered the integration)</li> </ul> <p>Additional Vite-related add-ons are available in the DDEV Add-on Registry.</p>"},{"location":"users/usage/vite/#troubleshooting","title":"Troubleshooting","text":""},{"location":"users/usage/vite/#bad-gateway-errors","title":"Bad Gateway Errors","text":"<p>Problem: Getting \u201c502 Bad Gateway\u201d when accessing Vite URL.</p> <p>Solutions:</p> <ol> <li> <p>Check port configuration: Ensure <code>web_extra_exposed_ports</code> is correctly configured in <code>.ddev/config.yaml</code>.</p> </li> <li> <p>Verify Vite is running: Check if Vite development server is actually running:</p> <pre><code>ddev logs -s web\n</code></pre> </li> <li> <p>Restart DDEV: After changing configuration:</p> <pre><code>ddev restart\n</code></pre> </li> </ol>"},{"location":"users/usage/vite/#cors-issues","title":"CORS Issues","text":"<p>Problem: Browser console shows CORS errors.</p> <p>Solutions:</p> <ol> <li> <p>Update CORS configuration in <code>vite.config.js</code>:</p> <pre><code>export default defineConfig({\n  server: {\n    cors: {\n      origin: /https?:\\/\\/([A-Za-z0-9\\-\\.]+)?(\\.ddev\\.site)(?::\\d+)?$/,\n    },\n  },\n});\n</code></pre> </li> <li> <p>Check origin setting:</p> <pre><code>export default defineConfig({\n  server: {\n    origin: `${process.env.DDEV_PRIMARY_URL_WITHOUT_PORT}:5173`,\n  },\n});\n</code></pre> </li> </ol>"},{"location":"users/usage/vite/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: \u201cPort 5173 is already in use\u201d error.</p> <p>Solutions:</p> <ol> <li> <p>Use different port: Change the port in both DDEV and Vite configurations:</p> <pre><code># .ddev/config.yaml\nweb_extra_exposed_ports:\n  - name: vite\n    container_port: 5174\n    http_port: 5172\n    https_port: 5174\n</code></pre> <pre><code>// vite.config.js\nexport default defineConfig({\n  server: {\n    port: 5174,\n  },\n});\n</code></pre> </li> <li> <p>Kill existing process:</p> <pre><code>ddev exec \"pkill -f vite\"\n</code></pre> </li> </ol>"},{"location":"users/usage/vite/#assets-not-loading","title":"Assets Not Loading","text":"<p>Problem: CSS/JS assets not loading properly.</p> <p>Solutions:</p> <ol> <li> <p>Verify base path in production builds matches your web server configuration.</p> </li> <li> <p>Check manifest.json is being generated and loaded correctly.</p> </li> <li> <p>Ensure proper asset URLs in your templates/framework integration.</p> </li> </ol>"},{"location":"users/usage/vite/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use specific Node.js versions: Specify <code>nodejs_version</code> in your DDEV configuration for consistency across team members.</p> </li> <li> <p>Include Vite in your project dependencies: Don\u2019t rely on global Vite installations.</p> </li> <li> <p>Configure proper <code>.gitignore</code>: Exclude build artifacts:</p> <pre><code>/dist/\n/build/\nnode_modules/\n</code></pre> </li> <li> <p>Document your setup: Include Vite configuration instructions in your project\u2019s readme.</p> </li> <li> <p>Use environment variables: Leverage <code>process.env.DDEV_PRIMARY_URL_WITHOUT_PORT</code> for dynamic configuration.</p> </li> </ol>"}]}