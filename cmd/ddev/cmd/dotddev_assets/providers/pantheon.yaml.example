#ddev-generated
# Example Pantheon.io provider configuration.
# This example is Drupal/drush oriented,
# but can be adapted for other CMSs supported by Pantheon

# To use this configuration:
# 1. Check out the project code from your pantheon project
# 2. Verify that drush is installed in your project, `ddev composer require drush/drush`
# 3. Make sure your public ssh key is configured in Pantheon (Account->SSH Keys)
# 4. Create a Pantheon.io machine token (Account->Machine Tokens).
# 5. Add add an entry to web_environment in ~/.ddev/global_config.yaml with the token:
# web_environment:
# - TERMINUS_MACHINE_TOKEN=xxxxxxxx
# 6. Copy pantheon.yaml.example to pantheon.yaml.
# 7. `ddev auth ssh`
# 8. Update project (which includes the environment, like "d8ddevpantheon.dev". The project can usually be the project name, but in case of ambiguity may need to be the official project hashed id.
# 9. `ddev restart`
# 10. Use `ddev pull pantheon` to pull the project database and files.
# 11. You can optionally use `ddev push pantheon` but it's a very dangerous thing to do and not recommended as part of your workflow

# Debugging: Use `ddev exec terminus auth:whoami` to see what terminus knows about
# `ddev exec terminus site:list` will show available sites

environment_variables:
  project: d8ddevpantheon.dev

auth_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ssh-add -l >/dev/null || ( echo "Please 'ddev auth ssh' before running this command." && exit 1 )
    if ! command -v drush >/dev/null ; then echo "Please make sure your project contains drush, ddev composer require drush/drush" && exit 1; fi
    if [ -z "${TERMINUS_MACHINE_TOKEN:-}" ]; then echo "Please make sure you have set TERMINUS_MACHINE_TOKEN in ~/.ddev/global_config.yaml" && exit 1; fi
    terminus auth:login --machine-token="${TERMINUS_MACHINE_TOKEN}" >/dev/null 2>&1
    terminus aliases 2>/dev/null

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible
    drush @${project} sql-dump --gzip >/var/www/html/.ddev/.downloads/db.sql.gz

files_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls ${DDEV_FILES_DIR} >/dev/null # This just refreshes stale NFS if possible
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    drush rsync -y @${project}:%files/ /var/www/html/.ddev/.downloads/files/

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
db_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    terminus remote:drush ${project} -- sql-drop -y
    gzip -dc db.sql.gz | terminus remote:drush ${project} -- sql-cli

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
files_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls ${DDEV_FILES_DIR} >/dev/null # This just refreshes stale NFS if possible
    drush rsync -y @self:%files @${project}:%files

