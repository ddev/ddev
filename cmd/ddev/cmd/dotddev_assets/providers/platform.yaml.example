#ddev-generated
# Example Platform.sh provider configuration.

# To use this configuration,
# 1. Create a platform.sh token (Account->API Tokens).
# 2. Add add an entry to web_environment in ~/.ddev/global_config.yaml with the token:
# web_environment:
# - PLATFORMSH_CLI_TOKEN=xxxxxxxx
# 3. Copy platform.yaml.example to platform.yaml.
# 4. Update project_id and environment_name below.
# 5. `ddev restart`
# 5. Use `ddev pull platform` to pull the project database and files.

# Debugging: Use `ddev exec platform` to see what platform.sh knows about
# your configuration and whether it's working correctly.

environment_variables:
  project_id: w5vxexample
  environment_name: master

auth_command:
  command: |
    if [ -z "${PLATFORMSH_CLI_TOKEN:-}" ]; then echo "Please make sure you have set PLATFORMSH_CLI_TOKEN in ~/.ddev/global_config.yaml" && exit 1; fi

db_pull_command:
  command: |
    platform db:dump --yes --gzip --file=/var/www/html/.ddev/.downloads/db.sql.gz --project="${project_id}" --environment="${environment_name}"

files_pull_command:
  command: |
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible
    platform mount:download --yes --quiet --project="${project_id}" --environment="${environment_name}" --mount=web/sites/default/files --target=/var/www/html/.ddev/.downloads/files
