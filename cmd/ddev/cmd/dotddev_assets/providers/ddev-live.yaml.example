#ddev-generated
# Example DDEV-Live provider configuration.

# #If you have a DDEV-Live account with an active site, you can follow this quick start guide to spin up a DDEV-Live site locally. If you don't already have a DDEV-Live account, a free short-term trial is [available on signup](https://dash.ddev.com/).
# #
# #1. Get your DDEV-Live API token on the [DDEV Dashboar](https://dash.ddev.com/settings/integration).
# #2. Using either `ddev-live` on the host or in the web container, authenticate and create a database backup, `ddev-live create backup database <sitename>`. You can do this again any time you need a fresh version from the upstream site.
# #3. Create a files backup using `ddev-live create backup files <sitename>`. This doesn't need to be done again until you have upstream files that have changed that you need.
# #4. Check out the git repository of the site.
# #5. Use `ddev config` to configure it.
# #6. Copy .ddev/providers/ddev-live.yaml.example to .ddev/providers/ddev-live.yaml
# #7. Edit ddev-live.yaml to set the environment_variables to ones that match your site.
# #8. Add add an entry to web_environment in ~/.ddev/global_config.yaml with the token:
# #
# #   ```yaml
# #   web_environment:
# #   - DDEV_LIVE_API_TOKEN=xxxxxxxx
# #   ```
# #9. `ddev restart`
# #10. Use `ddev pull ddev-live` to pull the project database and files.
# #11. Optionally use `ddev push ddev-live` to push local files and databases to DDEV-Live. Note that `ddev push` is a command that can potentially damage your production site, so this is not recommended.


environment_variables:
  project_id: yourorg/yourproject
  database_backup: yourorg/yourdbbackup

auth_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    #if ! command -v drush >/dev/null ; then echo "Please make sure your project contains drush, ddev composer require drush/drush" && exit 1; fi
    if [ -z "${DDEV_LIVE_API_TOKEN:-}" ]; then echo "Please make sure you have set DDEV_LIVE_API_TOKEN in ~/.ddev/global_config.yaml" && exit 1; fi
    ddev-live auth --token="${DDEV_LIVE_API_TOKEN}"

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    pushd /var/www/html/.ddev/.downloads >/dev/null
    filename=$(ddev-live pull database -o json ${database_backup} | jq -r .filename)
    mv ${filename} db.sql.gz

files_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    ddev-live pull files ${project_id} --dest=files/ >/dev/null 2>&1

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
db_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    restore=$(ddev-live push database ${project_id} -o json db.sql.gz | jq -r .databaseRestore)
    while true; do
        restore_status=$(ddev-live describe restore database "${project_id%/*}/$restore" -o json | jq -r .status)
        if [ "${restore_status}" = "ImportOpFinished" ]; then break; fi
        sleep 1
    done

# push is a dangerous command. If not absolutely needed it's better to delete these lines.
files_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    ls ${DDEV_FILES_DIR} >/dev/null # This just refreshes stale NFS if possible
    pushd $DDEV_FILES_DIR >/dev/null;
    restore=$(ddev-live push files ${project_id} -o json . 2>/dev/null | jq -r .filesRestore)
    while true; do
        restore_status=$(ddev-live describe restore files "${project_id%/*}/${restore}" -o json | jq -r .complete)
        if [ "${restore_status}" = "Completed" ]; then break; fi
        sleep 1
    done
