name: varnish-php-test


yaml_read_files:
  ddev_config: "config.yaml"

pre_install_actions:
  - |
    <?php
    #ddev-description: Initialize Varnish addon installation
    
    // Read DDEV project configuration
    $configPath = 'config.yaml';
    $projectName = 'unknown';
    $hostname = 'unknown';
    
    if (file_exists($configPath)) {
        $config = yaml_parse_file($configPath);
        $projectName = $config['name'] ?? 'unknown';
        $hostname = $config['primary_url'] ?? $projectName . '.ddev.site';
    }
    
    echo "PHP: Installing Varnish for project: $projectName\n";
    
    // Clean up old files
    $oldFile = '/mnt/ddev_config/docker-compose.varnish-extras.yaml';
    if (file_exists($oldFile)) {
        $content = file_get_contents($oldFile);
        if (strpos($content, '#ddev-generated') !== false) {
            unlink($oldFile);
            echo "PHP: Removed old varnish-extras file\n";
        } else {
            echo "PHP: Error - varnish-extras.yaml exists but was modified by user\n";
            exit(2);
        }
    }
    
    // Note: docker-compose.varnish.yaml and varnish/ directory are provided by project_files
    echo "PHP: Static files (docker-compose.varnish.yaml, varnish/, commands/) will be installed\n";
    ?>

post_install_actions:
  - |
    <?php
    #ddev-description: Complete Varnish configuration
    
    // Check if varnish_extras exists and handle it
    $extrasFile = 'docker-compose.varnish_extras.yaml';
    if (file_exists($extrasFile)) {
        $content = file_get_contents($extrasFile);
        if (strpos($content, '#ddev-generated') === false) {
            echo "PHP: Error - varnish_extras.yaml exists but was not generated by DDEV\n";
            exit(2);
        }
    }
    
    // Generate the varnish_extras.yaml file that modifies web container hostnames
    $configPath = 'config.yaml';
    if (file_exists($configPath)) {
        $config = yaml_parse_file($configPath);
    }
    
    // Create the extras file that reroutes web hostnames
    $extrasContent = <<<'EOF'
    #ddev-generated
    # This modifies the web container to use 'novarnish' subdomain prefix
    # so Varnish can intercept the main hostname
    services:
      web:
        environment:
          - VIRTUAL_HOST=novarnish.${DDEV_HOSTNAME}
    EOF;
    
    // Parse additional hostnames if they exist
    if (isset($config['additional_hostnames'])) {
        $extrasContent .= "\n      # Additional hostnames with novarnish prefix\n";
        foreach ($config['additional_hostnames'] as $hostname) {
            $extrasContent .= "      - VIRTUAL_HOST=novarnish.{$hostname}\n";
        }
    }
    
    file_put_contents($extrasFile, $extrasContent);
    echo "PHP: Generated docker-compose.varnish_extras.yaml\n";
    echo "PHP: Varnish installation complete!\n";
    ?>

project_files:
  - docker-compose.varnish.yaml
  - varnish
  - commands/varnish
  - config.varnish.yaml

removal_actions:
  - |
    <?php
    #ddev-description: Remove generated varnish extras file
    $extrasFile = 'docker-compose.varnish_extras.yaml';
    if (file_exists($extrasFile)) {
        $content = file_get_contents($extrasFile);
        if (strpos($content, '#ddev-generated') !== false) {
            unlink($extrasFile);
            echo "PHP: Removed varnish extras file\n";
        } else {
            echo "PHP: WARNING - varnish extras file exists but not generated by DDEV, leaving it\n";
        }
    } else {
        echo "PHP: No varnish extras file to remove\n";
    }
    
    // Create a file to confirm removal action was executed
    file_put_contents('php-removal-test.txt', "PHP removal executed for varnish addon\n");
    echo "PHP: Varnish removal action completed\n";
