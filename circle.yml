version: 2
executorType: machine
stages:
  build:
    workDir: ~/ddev
    environment:
      GOPATH: /home/circleci
      DRUD_DEBUG: "true"

    steps:
      - type: checkout

      - type: shell
        command: |
          sudo apt-get remove golang &&
          wget -q -O /tmp/golang.tgz https://storage.googleapis.com/golang/go1.7.5.linux-amd64.tar.gz &&
          cd /tmp && tar -xf golang.tgz &&
          sudo rm -rf /usr/local/go && sudo mv go /usr/local
        name: Upgrade golang

      - type: shell
        command: |
          sudo apt-get remove docker docker-engine &&
          sudo apt-get update &&
          sudo apt-get install  apt-transport-https ca-certificates  curl software-properties-common &&
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
          sudo apt-get update &&
          sudo apt-get install docker-ce=17.03.0~ce-0~ubuntu-trusty
        name: Install docker

      - type: shell
        command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        name: "docker login"

      - type: shell
        command: sudo apt-get -qq update && sudo curl -L "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
        name: docker-compose install

      - type: shell
        command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
        name: Installed tool versions

      # Create environment which respects GOPATH
      - type: shell
        command: |
          mkdir -p ~/src/github.com/drud &&
          ln -s ~/ddev ~/src/github.com/drud/ddev &&
          cd  ~/src/github.com/drud/ddev &&
          pwd
        name: Set up directory structure

      # Build ddev
      - type: shell
        command: |
          cd  ~/src/github.com/drud/ddev &&
          make GOPATH=~/ linux
        name: Build the linux ddev executable binary

      - type: shell
        command: |
          cd  ~/src/github.com/drud/ddev &&
          make GOPATH=~/ gofmt &&
          make GOPATH=/ govet
        name: Static analysis targets govet/gofmt


      # Example: Run just one test in ddev by name
#      - type: shell
#        command: |
#          cd ~/src/github.com/drud/ddev &&
#          DDEV_BINARY_FULLPATH=$PWD/bin/linux/ddev CGO_ENABLED=0 go test -v -run TestVersion ./cmd/... ./pkg/...
#        name: ddev single test


      # Run the built-in ddev tests
      - type: shell
        command: |
          cd ~/src/github.com/drud/ddev &&
          make GOPATH=~/ test
        name: ddev tests


