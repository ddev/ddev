name: DDEV tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILDKIT_PROGRESS: plain
  DOCKER_CLI_EXPERIMENTAL: enabled

jobs:

  container-build:
    name: ${{ matrix.os }} - Build container ${{ matrix.containers }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04]
        containers: [ddev-router, ddev-ssh-agent, ddev-webserver, test-ssh-agent]

    steps:
      - uses: actions/checkout@v2

      - name: Install Docker and deps
        run: ./.github/workflows/linux-setup.sh   

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15.3'

      - name: Build container ${{ matrix.containers }}
        run: |
          docker version
          set -eu -o pipefail
          mkdir containers/export
          DATE=$(date +'%Y%m%d')

          if [[ "${{ matrix.containers }}" == "ddev-dbserver-mariadb" ]]; then
            pushd containers/ddev-dbserver
            echo "--- Build container ddev-dbserver-mariadb"
            time make mariadb_containers DOCKER_ARGS="-o type=docker,dest=../export/ddev-dbserver-mariadb.tar" VERSION=githubactions-${DATE}

          elif [[ "${{ matrix.containers }}" == "ddev-dbserver-mysql" ]]; then
            pushd containers/ddev-dbserver
            echo "--- Build container ddev-dbserver-mysql"
            time make mysql_containers DOCKER_ARGS="-o type=docker,dest=../export/ddev-dbserver-mysql.tar" VERSION=githubactions-${DATE}

          else
            pushd containers/${{ matrix.containers }}
            echo "--- Build container ${{ matrix.containers }}"
            time make container DOCKER_ARGS="-o type=docker,dest=../export/${{ matrix.containers }}.tar" VERSION=githubactions-${DATE}

          fi

          popd
          set +eu

      - name: Upload artifact ${{ matrix.containers }}.tar
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.containers }}.tar
          path: containers/export/${{ matrix.containers }}.tar

  container-tests:
    needs: container-build
    name: ${{ matrix.os }} - Container tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04]

    steps:
      - uses: actions/checkout@v2

      - name: Install Docker and deps
        run: ./.github/workflows/linux-setup.sh  

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15.3'

      # Download all generated images
      - uses: actions/download-artifact@v2
        with:
          path: ddev-artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ddev-artifacts

  ddev-tests:
    # temporary, so we can focus on container tests first
    needs: container-tests
    name: ${{ matrix.os }} - make ${{ matrix.commands }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        #commands: [testcmd, testnotddevapp, testddevapp]
        commands: [testcmd]
        os: [ubuntu-18.04, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install Docker and deps
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            ./.github/workflows/linux-setup.sh
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            ./.github/workflows/macos-setup.sh
          else
            echo "Unsupported OS in matrix"
            exit 1
          fi

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15.3'

      - name: Run make ${{ matrix.commands }}
        run: |
          if [[ "${{ matrix.os }}" == macos* ]]; then
            eval "$(docker-machine env default)"
          fi
          docker version
          echo "Running tests..."
          make ${{ matrix.commands }}
