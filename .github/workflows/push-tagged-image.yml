name: Push tagged image
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Image to push'
        required: true
        default: ddev-webserver
        type: choice
        options:
          - ddev-gitpod-base
          - ddev-php-base
          - ddev-webserver
          - ddev-ssh-agent
          - ddev-traefik-router
          - ddev-xhgui
          - test-ssh-server
      tag:
        description: Tag for pushed image (v1.24.5 for example)
        required: true
        default: ""
      debug_enabled:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false
env:
  REGISTRY: docker.io
  DOCKER_ORG: ${{ vars.DOCKER_ORG }}
  TAG: "${{ github.event.inputs.tag }}"
  HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read

jobs:
  build-and-push:
    name: build ${{ matrix.arch }} ${{ github.event.inputs.image }}
    strategy:
      matrix:
        arch: [amd64, arm64]
        image: ['${{ github.event.inputs.image }}']
        exclude:
          - arch: arm64
            image: ddev-gitpod-base
          - arch: arm64
            image: test-ssh-server
          - arch: amd64
            image: all
          - arch: arm64
            image: all
          - arch: amd64
            image: ddev-dbserver
          - arch: arm64
            image: ddev-dbserver
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Load 1password secret(s)
        uses: 1password/load-secrets-action@v3
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.owner.login == github.repository_owner }}
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: "${{ secrets.PUSH_SERVICE_ACCOUNT_TOKEN }}"
          DOCKERHUB_TOKEN: "op://push-secrets/DOCKERHUB_TOKEN/credential"
      - uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      - name: Build and push image
        run: |
          set -eu
          cd containers/${{ github.event.inputs.image }}
          export BUILD_ARCHS=linux/${ARCH}
          # For single-platform images, push with final tag; for multi-platform, use arch suffix
          case "${{ github.event.inputs.image }}" in
            ddev-gitpod-base|test-ssh-server)
              make push VERSION="${{ github.event.inputs.tag }}"
              ;;
            *)
              make push VERSION="${{ github.event.inputs.tag }}-${ARCH}"
              ;;
          esac
      - name: Record image digest
        id: digest
        run: |
          set -eu
          IMG=${DOCKER_ORG}/${{ github.event.inputs.image }}:${{ github.event.inputs.tag }}-${ARCH}
          docker buildx imagetools inspect "$IMG" >/dev/null
          DG=$(docker buildx imagetools inspect "$IMG" | awk -F: '/Digest/ {print $2; exit}')
          echo "digest=$DG" >> $GITHUB_OUTPUT
          echo "$DG" > digest.txt
      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ github.event.inputs.image }}-${{ matrix.arch }}
          path: digest.txt
          retention-days: 1
  manifest:
    name: create multi-arch manifest
    needs: build-and-push
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.image != 'all' && github.event.inputs.image != 'ddev-dbserver' && github.event.inputs.image != 'ddev-gitpod-base' && github.event.inputs.image != 'test-ssh-server' }}
    steps:
      - name: Load 1password secret(s)
        uses: 1password/load-secrets-action@v3
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: "${{ secrets.PUSH_SERVICE_ACCOUNT_TOKEN }}"
          DOCKERHUB_TOKEN: "op://push-secrets/DOCKERHUB_TOKEN/credential"
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Create and push manifest (non-db)
        run: |
          set -eu
          IMAGE=${DOCKER_ORG}/${{ github.event.inputs.image }}
          TAG=${{ github.event.inputs.tag }}
          docker buildx imagetools create -t ${IMAGE}:${TAG} ${IMAGE}:${TAG}-amd64 ${IMAGE}:${TAG}-arm64
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            docker buildx imagetools create -t ${IMAGE}:latest ${IMAGE}:${TAG}-amd64 ${IMAGE}:${TAG}-arm64
          fi
          # Clean up intermediary single-arch tags from remote registry
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username":"${{ vars.DOCKERHUB_USERNAME }}","password":"${{ env.DOCKERHUB_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -s -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/${DOCKER_ORG}/${{ github.event.inputs.image }}/tags/${TAG}-amd64/" >/dev/null || true
          curl -s -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/${DOCKER_ORG}/${{ github.event.inputs.image }}/tags/${TAG}-arm64/" >/dev/null || true
