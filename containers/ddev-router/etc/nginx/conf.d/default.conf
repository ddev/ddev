# DEFAULT default.conf SOMETHING IS WRONG
# This is the "default"" default.conf and if you see this it means
# that a proper default.conf has not been generated and something
# is wrong

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Default dhparam
# ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
client_max_body_size 0;
resolver 127.0.0.11;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
server {
	server_name _; # Catch-all for any server_name that is not matched in the config
	listen 80;
	access_log /var/log/nginx/access.log vhost;
    error_page 503 @noupstream;
    location @noupstream {
        rewrite ^(.*)$ /503.html break;
        root /app;
    }
    location / {
        return 503;
    }
    ## provide a health check endpoint
    location = /healthcheck {
        access_log off;
        return 200;
    }
}
server {
 	server_name _; # Catch-all for any server_name that is not matched in the config
	listen 443;
 	access_log /var/log/nginx/access.log vhost;
     error_page 503 @noupstream;
     location @noupstream {
         rewrite ^(.*)$ /503.html break;
         root /app;
     }
     location / {
         return 503;
     }
     ## provide a health check endpoint
     location = /healthcheck {
         access_log off;
         return 200;
     }
}
