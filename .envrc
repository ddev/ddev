#!/usr/bin/env bash

# This file is used by `direnv` to install all Python and Node dependencies
# specified in the Makefile into the virtual env located in the `.gotmp/env` directory.

# Steps to set up:
# 1. Install direnv: https://direnv.net/docs/installation.html
# 2. Hook direnv into your shell: https://direnv.net/docs/hook.html
# 3. Create the global config: https://github.com/direnv/direnv/blob/master/man/direnv.toml.1.md
#    where `~/workspace/ddev/.envrc` is the path to this file.
#    (Alternatively, `.envrc` file can be loaded with `direnv allow .`)
#    $ cat ~/.config/direnv/direnv.toml
#    [global]
#    hide_env_diff = true
#    [whitelist]
#    exact = ["~/workspace/ddev/.envrc"]
# 4. After setting this up, when you `cd` into this directory, all required tools
#    will automatically be installed in `.gotmp/env` and sourced.
# 5. To update tools, run `make clean`, then `cd` out of and back into this directory.

PYTHON_ENV=.gotmp/env/python
NODE_ENV=.gotmp/env/node

if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1; then
    echo "Python is not available."
    exit 1
fi

if ! command -v go >/dev/null 2>&1; then
    echo "Go is not available."
    exit 1
fi

if [[ ! -f "${PYTHON_ENV}/bin/activate" ]]; then
    echo "Initializing python venv..."
    python -m venv "${PYTHON_ENV}" || python3 -m venv "${PYTHON_ENV}"
fi

source "${PYTHON_ENV}/bin/activate"

if [[ ! -f "${NODE_ENV}/bin/activate" ]]; then
    echo "Initializing python nodeenv..."
    pip install nodeenv
    nodeenv --node=lts --prebuilt "${NODE_ENV}"
fi

source "${NODE_ENV}/bin/activate"

if [[ ! -f "${PYTHON_ENV}/bin/mkdocs" ]]; then
    echo "Installing mkdocs..."
    pip install -r docs/mkdocs-pip-requirements
fi

# if [[ ! -f "${PYTHON_ENV}/bin/pyspelling" ]]; then
#     echo "Installing pyspelling..."
#     pip install pyspelling pymdown-extensions
# fi

if [[ ! -f "${NODE_ENV}/bin/markdownlint" ]]; then
    echo "Installing markdownlint..."
    npm install -g markdownlint-cli
fi

if [[ ! -f "${NODE_ENV}/bin/linkspector" ]]; then
    echo "Installing linkspector..."
    npm install -g @umbrelladocs/linkspector
fi

if [[ ! -f "${NODE_ENV}/bin/textlint" ]]; then
    echo "Installing textlint..."
    npm install -g textlint \
        textlint-filter-rule-comments \
        textlint-rule-no-todo \
        textlint-rule-stop-words \
        textlint-rule-terminology
fi

# prepend ddev build to PATH when entering a directory
BIN_DIR="$PWD/.gotmp/bin/$(go env GOHOSTOS)_$(go env GOHOSTARCH)"
# Prepend to PATH
export PATH="$BIN_DIR:$PATH"

#!/usr/bin/env bash

# Fast, idempotent direnv bootstrap for docs tooling
# - Creates a local Python venv and Node env once, then reuses them
# - Skips work if tools are already present
# - Avoids slow npm/pip noise and update checks

set -euo pipefail

# Steps to set up:
# 1. Install direnv: https://direnv.net/docs/installation.html
# 2. Hook direnv into your shell: https://direnv.net/docs/hook.html
# 3. (Optional) Whitelist this file in ~/.config/direnv/direnv.toml to avoid prompts
#    [global]
#    hide_env_diff = true
#    [whitelist]
#    exact = ["~/workspace/ddev/.envrc"]
# 4. After setting this up, when you `cd` into this directory, all required tools
#    will automatically be installed in `.gotmp/env` and sourced.
# 5. To update tools, run `make clean`, then `cd` out of and back into this directory.

PYTHON_ENV=.gotmp/env/python
NODE_ENV=.gotmp/env/node

# Quieter + faster package managers
export PIP_DISABLE_PIP_VERSION_CHECK=1
export PIP_ROOT_USER_ACTION=ignore
export npm_config_update_notifier=false
export npm_config_fund=false
export NPM_CONFIG_PREFIX="${NODE_ENV}"

mkdir -p .gotmp/env .gotmp/bin

# Basic pre-reqs
if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1; then
  echo "Python is not available." >&2
  exit 1
fi
if ! command -v go >/dev/null 2>&1; then
  echo "Go is not available." >&2
  exit 1
fi

# --- Python venv ---
if [[ ! -f "${PYTHON_ENV}/bin/activate" ]]; then
  echo "Initializing python venv..."
  (command -v python >/dev/null 2>&1 && python -m venv "${PYTHON_ENV}") \
    || python3 -m venv "${PYTHON_ENV}"
fi
# shellcheck disable=SC1090
source "${PYTHON_ENV}/bin/activate"

# Ensure nodeenv is available inside the venv (only install if missing)
if ! command -v nodeenv >/dev/null 2>&1; then
  python -m pip install -q nodeenv
fi

# --- Node env (managed by nodeenv) ---
# If node binary is missing (or env is corrupt), recreate it once
if [[ ! -x "${NODE_ENV}/bin/node" ]]; then
  echo "Creating nodeenv (LTS)..."
  rm -rf "${NODE_ENV}"
  nodeenv --node=lts --prebuilt "${NODE_ENV}"
fi
# Activate by PATH only (faster than sourcing an activate script)
export PATH="${NODE_ENV}/bin:${PATH}"

# --- Python tooling ---
if [[ ! -x "${PYTHON_ENV}/bin/mkdocs" ]]; then
  echo "Installing mkdocs..."
  python -m pip install -q -r docs/mkdocs-pip-requirements
fi

# --- Node CLI tooling (install once if missing) ---
if [[ ! -x "${NODE_ENV}/bin/markdownlint" ]]; then
  echo "Installing markdownlint..."
  npm install -g --silent markdownlint-cli
fi

if [[ ! -x "${NODE_ENV}/bin/linkspector" ]]; then
  echo "Installing linkspector..."
  npm install -g --silent @umbrelladocs/linkspector
fi

if [[ ! -x "${NODE_ENV}/bin/textlint" ]]; then
  echo "Installing textlint..."
  npm install -g --silent textlint \
    textlint-filter-rule-comments \
    textlint-rule-no-todo \
    textlint-rule-stop-words \
    textlint-rule-terminology
fi

# Prepend ddev build bin to PATH
BIN_DIR="$PWD/.gotmp/bin/$(go env GOHOSTOS)_$(go env GOHOSTARCH)"
export PATH="$BIN_DIR:$PATH"
