version: 2
jobs:
  golang_build:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
    - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}
    - checkout
    - run:
        command: ./.circleci/circle_vm_setup.sh
        name: NORMAL Circle VM setup - tools, docker, golang
        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - run:
        command: |
          make -s clean linux darwin windows_install
        name: Build the ddev executables
    - persist_to_workspace:
        root: ~/
        paths: go

  golang_test:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
    - attach_workspace:
        at: ~/
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: make -s test
        name: ddev tests
        no_output_timeout: "40m"

  staticrequired:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
    - attach_workspace:
        at: ~/
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: make staticrequired
        name: staticrequired

  artifacts:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
    - attach_workspace:
        at: ~/
    - run:
        command: ./.circleci/generate_artifacts.sh $ARTIFACTS
        name: tar/zip up artifacts and make hashes
        no_output_timeout: "40m"

    - store_artifacts:
        path: /artifacts
        name: Artifact storage

  nightly_build:
    machine:
      image: circleci/classic:201711-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
      - checkout

      - run:
          command: ./.circleci/circle_vm_setup.sh
          name: NIGHTLY BUILD Circle VM setup - tools, docker, golang

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Show installed tool versions

      - run:
          command: |
            make -s linux darwin windows_install
          name: Build the ddev executables normally, with normal image tags

      - run:
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS
          name: tar/zip up artifacts and make hashes
          no_output_timeout: "20m"

      - store_artifacts:
          path: /artifacts
          name: Artifact storage

      # Run the built-in ddev tests with the clean binaries just built.
      - run:
          command: make -s test gometalinter
          name: ddev tests, with normal clean ddev binaries (normal image tags)
          no_output_timeout: "20m"

      - run:
          command: |
            make -f nightly_build.mak clean  # Remove any existing binaries
            make -f nightly_build.mak -s --print-directory DOCKER_ARGS=--no-cache
          no_output_timeout: "40m"
          name: Full nightly build and test with containers


  # 'tag_build' is used to build a tag for release.
  tag_build:
    machine:
      image: circleci/classic:201711-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          command: ./.circleci/circle_vm_setup.sh
          name: TAG BUILD Circle VM setup - tools, docker, golang

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make -s clean linux darwin windows_install
          name: Build the ddev executables

      - run:
          command: bin/linux/ddev version
          name: ddev version information

      # We only build the xz version of the docker images on tag build.
      - run:
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS TRUE
          name: tar/zip up artifacts and make hashes
          no_output_timeout: "40m"

      - store_artifacts:
          path: /artifacts
          name: Artifact storage

workflows:
  version: 2
  normal_build_and_test:
    jobs:
    - golang_build
    - golang_test:
        requires:
        - golang_build
    - staticrequired:
        requires:
        - golang_build
    - artifacts:
        requires:
        - golang_build

  nightly_build:
    triggers:
      - schedule:
          cron: "0 3 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly_build
  tag_build:
    jobs:
      - tag_build:
          filters:
            tags:
              only:
                - "/.*/"
            branches:
              ignore: /.*/
