version: 2
jobs:
  # 'build' is the default build, the only one triggered automatically by github or anything else.
  build:
    machine: true
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
    steps:
      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          command: ./.circleci/circle_vm_setup.sh
          name: NORMAL Circle VM setup - tools, docker, golang

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Installed tool versions

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make clean linux darwin windows
          name: Build the ddev executables

      # Run the built-in ddev tests with the executables just built.
      - run:
          command: make test
          name: ddev tests
          no_output_timeout: "20m"

      - run: make -s staticrequired

      - run:
          command: bin/linux/ddev version
          name: ddev version information

      # Now we store the artifacts, which are the ones built by the *normal* build (not the nightly, in case of nightly)
      - store_artifacts:
          path: bin/darwin/darwin_amd64/ddev
          destination: darwin/ddev
          name: Upload ddev (darwin)
      - store_artifacts:
          path: bin/linux/ddev
          destination: linux/ddev
          name: Upload ddev (linux)
      - store_artifacts:
          path: bin/windows/windows_amd64/ddev.exe
          destination: windows/ddev.exe
          name: Upload ddev (windows)

  # nightly is triggered only with nightly_build_trigger.sh
  nightly_build:
    machine: true
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
    steps:
#      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          command: ./.circleci/circle_vm_setup.sh
          name: NIGHTLY BUILD Circle VM setup - tools, docker, golang

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Installed tool versions

      # The nightly build builds a ddev that can't be run elsewhere because the containers built in are not pushed.
      # Therefore we build this full nightly first, and then throw it away.
      - run:
          command: |
            make clean
            export VERSION=nightly.$(date +%Y%m%d%H%M%S)
            export VERSION="$(git describe --tags --always --dirty)-nightly.$(date +%Y%m%d%H%M%S)"
            echo VERSION=$VERSION
            git submodule update --init && git submodule update --remote
            make -f nightly_build.mak clean
            make -f nightly_build.mak --print-directory VERSION=$VERSION DdevVersion=$VERSION DBTag=$VERSION DBATag=$VERSION WebTag=$VERSION RouterTag=$VERSION  NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION UPSTREAM_PHP_REPO_TAG=$VERSION
            $GOPATH/src/github.com/drud/ddev/bin/linux/ddev version
          no_output_timeout: "20m"
          name: Run full nightly build

      - run:
          command: bin/linux/ddev version
          name:  nightly-build ddev version information

      # Run the built-in ddev tests with the executables just built.
      - run:
          command: make test
          name: ddev tests
          no_output_timeout: "20m"

      - run: make -s staticrequired

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make clean linux darwin windows
          name: Build the ddev executables

      # Run the built-in ddev tests with the clean binaries just built.
      - run:
          command: make test
          name: ddev tests
          no_output_timeout: "20m"

      - run:
          command: bin/linux/ddev version
          name: ddev version information (clean binaries, not nightlies)

      # Now we store the artifacts, which are the ones built by the *normal* build (not the nightly, in case of nightly)
      - store_artifacts:
          path: bin/darwin/darwin_amd64/ddev
          destination: darwin/ddev
          name: Upload ddev (darwin)
      - store_artifacts:
          path: bin/linux/ddev
          destination: linux/ddev
          name: Upload ddev (linux)
      - store_artifacts:
          path: bin/windows/windows_amd64/ddev.exe
          destination: windows/ddev.exe
          name: Upload ddev (windows)
