version: 2
jobs:
  build:
    machine: true
    working_directory: ~/src/github.com/drud/ddev
    environment:
      GOPATH: ~/
      DRUD_DEBUG: "true"

    steps:
      - run:
          command: sudo apt-get update && sudo apt-get install mysql-client
          name: Basic tool installation

      - run:
          command: |
            sudo apt-get remove golang &&
            wget -q -O /tmp/golang.tgz https://storage.googleapis.com/golang/go1.7.5.linux-amd64.tar.gz &&
            cd /tmp && tar -xf golang.tgz &&
            sudo rm -rf /usr/local/go && sudo mv go /usr/local
          name: Upgrade golang

      - run:
          command: |
            sudo apt-get remove docker docker-engine &&
            sudo apt-get update &&
            sudo apt-get install  apt-transport-https ca-certificates  curl software-properties-common &&
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
            sudo apt-get update &&
            sudo apt-get install docker-ce=17.03.0~ce-0~ubuntu-trusty
          name: Install docker

      - run:
          command: sudo apt-get -qq update && sudo curl -L "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
          name: docker-compose install

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Installed tool versions

      # Create environment which respects GOPATH
      - run:
          command: |
            mkdir -p ~/src/github.com/drud &&
            ln -s ~/ddev ~/src/github.com/drud/ddev &&
            cd  ~/src/github.com/drud/ddev &&
            pwd
          name: Set up directory structure with $GOPATH

      - checkout

      - run:
          command: |
            make GOPATH=~/ linux
          name: Build the linux ddev executable binary
          working_directory: ~/src/github.com/drud/ddev

      - run:
          command: |
            make GOPATH=~/ gofmt &&
            make GOPATH=~/ govet &&
            make GOPATH=~/ golint &&
            make GOPATH=~/ errcheck
          name: Static analysis targets gofmt/govet/golint/errcheck
          working_directory: ~/src/github.com/drud/ddev

      # Run the built-in ddev tests
      - run:
          working_directory: ~/src/github.com/drud/ddev
          command: |
            if [ ! -n "${RUN_NIGHTLY_BUILD}" ]; then
              pwd && make GOPATH=~/ test
            fi
          name: ddev tests (not nightly build)

      # Run codecoroner after tests. We care about dead code, but we still want tests to run for WIP branches.
      - run:
          command: |
            cd  ~/src/github.com/drud/ddev &&
            make GOPATH=~/ codecoroner
          name: Run codecoroner
          working_directory: ~/src/github.com/drud/ddev

      - run:
          command: |
            if [ -n "${RUN_NIGHTLY_BUILD}" ]; then
              make clean
              export VERSION=nightly.$(date +%Y%m%d%H%M%S)
              echo VERSION=$VERSION
              git submodule update --init && git submodule update --remote
              make -f nightly_build.mak clean
              make -f nightly_build.mak --print-directory VERSION=$VERSION DdevVersion=$VERSION DBTag=$VERSION WebTag=$VERSION RouterTag=$VERSION  NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION UPSTREAM_PHP_REPO_TAG=$VERSION
              ~/src/github.com/drud/ddev/bin/linux/ddev version
            fi
          name: Run full nightly build  and tests if $RUN_NIGHTLY_BUILD
          working_directory: ~/src/github.com/drud/ddev

