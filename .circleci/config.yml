version: 2
jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DRUD_NONINTERACTIVE: "true"
    steps:
    - checkout
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: NORMAL Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew

        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - run:
        command: |
          make -s clean linux darwin windows_install chocolatey EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: Build the ddev executables
    - persist_to_workspace:
        root: ~/
        paths: ddev

  lx_nginx_fpm_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DDEV_TEST_WEBSERVER_TYPE: nginx-fpm
      DRUD_NONINTERACTIVE: "true"
    steps:
    - attach_workspace:
        at: ~/
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew

        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - run:
        command: make -s test EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: ddev tests
        no_output_timeout: "40m"
    - store_test_results:
        path: /tmp/testresults

  mac_nginx_fpm_test:
    macos:
      xcode: "10.2.1"
    working_directory: ~/ddev
    environment:
      DDEV_TEST_WEBSERVER_TYPE: nginx-fpm
      DRUD_NONINTERACTIVE: "true"
      GOTEST_SHORT: "true"
    steps:
    - attach_workspace:
        at: ~/
    - restore_cache:
        keys:
        - homebrew-macos-v6
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: ./.circleci/macos_circle_vm_setup.sh
        name: macOS Circle VM setup - tools, docker, golang
        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - save_cache:
        key: homebrew-macos-v6
        paths:
        - /usr/local/Homebrew
    - run:
        command: make -s test
        name: ddev tests
        no_output_timeout: "40m"
    - store_test_results:
        path: /tmp/testresults

  mac_apache_fpm_test:
    macos:
      xcode: "10.2.1"
    working_directory: ~/ddev
    environment:
      DDEV_TEST_WEBSERVER_TYPE: apache-fpm
      DRUD_NONINTERACTIVE: "true"
      GOTEST_SHORT: "true"
    steps:
    - attach_workspace:
        at: ~/
    - restore_cache:
        keys:
        - homebrew-macos-v6
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: ./.circleci/macos_circle_vm_setup.sh
        name: macOS Circle VM setup - tools, docker, golang
        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - run:
        command: make -s test
        name: ddev tests
        no_output_timeout: "40m"
    - store_test_results:
        path: /tmp/testresults
    - save_cache:
        key: homebrew-macos-v6
        paths:
        - /usr/local/Homebrew

  mac_nfsmount_test:
    macos:
      xcode: "10.2.1"
    working_directory: ~/ddev
    environment:
      DDEV_TEST_USE_NFSMOUNT: "true"
      DRUD_NONINTERACTIVE: "true"
      GOTEST_SHORT: "true"
    steps:
    - attach_workspace:
        at: ~/
    - restore_cache:
        keys:
        - homebrew-macos-v6
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: ./.circleci/macos_circle_vm_setup.sh
        name: macOS Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-macos-v6
        paths:
        - /usr/local/Homebrew
        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    - run:
        command: make -s test
        name: ddev tests
        no_output_timeout: "40m"
    - store_test_results:
        path: /tmp/testresults

  lx_apache_fpm_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DDEV_TEST_WEBSERVER_TYPE: apache-fpm
      # Experiment with only testing TYPO3 with the apache run.
      GOTEST_SHORT: 5
      DRUD_NONINTERACTIVE: "true"
    steps:
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - attach_workspace:
        at: ~/
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew

    # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: make -s test EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: ddev tests
        no_output_timeout: "120m"
    - store_test_results:
        path: /tmp/testresults

  lx_apache_cgi_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DDEV_TEST_WEBSERVER_TYPE: apache-cgi
      # Experiment with only testing TYPO3 with the apache run.
      GOTEST_SHORT: 5
      DRUD_NONINTERACTIVE: "true"
    steps:
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - attach_workspace:
        at: ~/
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew
    - run:
        command: make -s test EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: ddev tests
        no_output_timeout: "120m"
    - store_test_results:
        path: /tmp/testresults

  lx_nfsmount_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DDEV_TEST_USE_NFSMOUNT: true
      # Test only TYPO3 with the apache run.
      GOTEST_SHORT: 5
      DRUD_NONINTERACTIVE: "true"
    steps:
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - attach_workspace:
        at: ~/
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew
        # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
    # Run the built-in ddev tests with the executables just built.
    - run:
        command: make -s test EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: ddev tests
        no_output_timeout: "120m"
    - store_test_results:
        path: /tmp/testresults

  staticrequired:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      ARTIFACTS: /artifacts
    steps:
    - checkout
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew
    - run:
        command: make staticrequired EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
        name: staticrequired

  lx_container_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    steps:
    - checkout
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - run:
        command: ./.circleci/linux_circle_vm_setup.sh
        name: Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew
    - run:
        command: |
          . ~/.bashrc
          for dir in containers/*
              do pushd $dir
              echo "--- Build container $dir"
              time make container DOCKER_ARGS=--no-cache EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
              echo "--- Test container $dir"
              time make test EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
              popd
          done
        name: linux container test

  mac_container_test:
    macos:
      xcode: "10.2.1"
    working_directory: ~/ddev
    steps:
    - checkout
    - restore_cache:
        keys:
        - homebrew-macos-v6
    - run:
        command: ./.circleci/macos_circle_vm_setup.sh
        name: macOS Circle VM setup - tools, docker, golang
    - save_cache:
        key: homebrew-macos-v6
        paths:
        - /usr/local/Homebrew
    - run:
        command: |
          for dir in containers/*
              do pushd $dir
              echo "--- Build container $dir"
              time make container DOCKER_ARGS=--no-cache
              echo "--- Test container $dir"
              time make test
              popd
          done
        name: macos container test

  artifacts:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      ARTIFACTS: /artifacts
    steps:
    - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
    - restore_cache:
        keys:
        - homebrew-linux-v5
    - attach_workspace:
        at: ~/
    - run:
        command: ./.circleci/generate_artifacts.sh $ARTIFACTS
        name: tar/zip up artifacts and make hashes
        no_output_timeout: "40m"
    - save_cache:
        key: homebrew-linux-v5
        paths:
        - /home/linuxbrew
    - store_artifacts:
        path: /artifacts
        name: Artifact storage

  # 'tag_build' automatically builds a tag .
  tag_build:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/ddev
    environment:
      DRUD_DEBUG: "true"
      ARTIFACTS: /artifacts
    steps:
      - checkout
      - run: sudo mkdir /home/linuxbrew && sudo chown $(id -u) /home/linuxbrew
      - restore_cache:
          keys:
          - homebrew-linux-v5
      - run:
          command: ./.circleci/linux_circle_vm_setup.sh
          name: TAG BUILD Circle VM setup - tools, docker, golang
      - save_cache:
          key: homebrew-linux-v5
          paths:
          - /home/linuxbrew

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make -s clean linux darwin windows_install chocolatey EXTRA_PATH=/home/linuxbrew/.linuxbrew/bin
          name: Build the ddev executables

      - run:
          command: .gotmp/bin/ddev version
          name: ddev version information

      # We only build the xz version of the docker images on tag build.
      - run:
          # Do not build the docker tarballs at simple tag build time
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS TRUE false
          name: tar/zip up artifacts and make hashes
          no_output_timeout: "40m"

      - store_artifacts:
          path: /artifacts
          name: Artifact storage

  # 'release_build' is used to push a full release; it's triggered by api call
  release_build:
    macos:
      xcode: "10.2.1"
    working_directory: ~/ddev
    environment:
      DRUD_DEBUG: "true"
      ARTIFACTS: /artifacts
    steps:
    - checkout
    - restore_cache:
        keys:
        - homebrew-macos-v6
    - run:
        command: ./.circleci/macos_circle_vm_setup.sh
        name: RELEASE BUILD Circle VM setup
    - save_cache:
        key: homebrew-macos-v6
        paths:
        - /usr/local/Homebrew

    - run:
        command: make -s clean linux darwin_signed windows_install chocolatey
        name: Build the ddev executables

    - run:
        command: .gotmp/bin/ddev version
        name: ddev version information

    # We only build the xz version of the docker images on tag build.
    - run:
        command: ./.circleci/generate_artifacts.sh $ARTIFACTS TRUE ${BUILD_IMAGE_TARBALLS:true}
        name: tar/zip up artifacts and make hashes
        no_output_timeout: "40m"

    - run:
        command: |
          if [ ! -z "${GITHUB_TOKEN}" ]; then
            version=$(make version)
            version="${version#*:}"  # Remove the VERSION: in front of make version
            echo "GITHUB_TOKEN provided, pushing release $RELEASE_TAG"
            ghr \
            -prerelease \
            -r $CIRCLE_PROJECT_REPONAME \
            -u $CIRCLE_PROJECT_USERNAME \
            -b "$(cat ./.github/RELEASE_NOTES_TEMPLATE.md)" \
            -t $GITHUB_TOKEN \
            "${version}" $ARTIFACTS
          else
            echo "GITHUB_TOKEN not provided, not pushing release $CIRCLE_TAG"
          fi
        name: Upload artifacts to GitHub release page
    - run:
        name: Upload chocolatey windows release
        command: |
          if [ ! -z "${CHOCOLATEY_API_KEY:-}" ]; then
            echo "Pushing release to chocolatey..."
            pushd .gotmp/bin/windows_amd64/chocolatey
            docker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key "${CHOCOLATEY_API_KEY}"
            popd
          else
            echo "NOT pushing release to chocolatey because no CHOCOLATEY_API_KEY was provided"
          fi
    - store_artifacts:
        path: /artifacts
        name: Artifact storage


workflows:
  version: 2
  normal_build_and_test:
    jobs:
    - build
#    - mac_container_test
    - lx_container_test
    - staticrequired
    - artifacts:
        requires:
        - build
    - lx_nginx_fpm_test:
        requires:
        - build
    - mac_nginx_fpm_test:
        requires:
        - build
#    - mac_apache_fpm_test:
#        requires:
#        - build
#    - mac_webcache_test:
#        requires:
#        - build
#    - mac_nfsmount_test:
#        requires:
#        - build
    - lx_apache_fpm_test:
        requires:
        - build
    - lx_apache_cgi_test:
        requires:
        - build
    - lx_nfsmount_test:
        requires:
        - build
    - staticrequired
    - artifacts:
        requires:
        - build

  nightly_build:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master
                - "pull/[0-9]+"
    jobs:
    - build
    - lx_container_test
    - lx_nginx_fpm_test:
        requires:
        - build
    - artifacts:
        requires:
        - build

  tag_build:
    jobs:
      - tag_build:
          filters:
            tags:
              only:
                - "/.*/"
            branches:
              ignore: /.*/
