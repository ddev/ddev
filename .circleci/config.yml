version: 2

workflows:
  version: 2
  build_and_test:
    jobs:
      - linux_build_and_test
      - macos_build_and_test
  tag_build:
    jobs:
      - tag_build:
          filters:
            tags:
              only:
                - "/.*/"
            branches:
              ignore: /.*/

jobs:
  linux_build_and_test:
    machine:
      image: circleci/classic:201708-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          command: ./.circleci/linux_circle_vm_setup.sh
          name: NORMAL linux Circle VM setup - tools, docker, golang

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Installed tool versions

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make -s clean linux darwin windows
          name: Build the ddev executables

      # Run the built-in ddev tests with the executables just built.
      - run:
          command: make -s test
          name: ddev tests
          no_output_timeout: "20m"

      - run: make -s gometalinter

      - run:
          command: bin/linux/ddev version
          name: ddev version information

      - run:
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS
          name: tar/zip up artifacts and make hashes

      - store_artifacts:
          path: /artifacts
          name: Artifact storage

  macos_build_and_test:
    macos:
      xcode: "8.3.3"
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      GOPATH: /users/distiller/go
    steps:
      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          name: NORMAL macos Circle VM setup - tools, docker, golang
          command: ./.circleci/macos_circle_vm_setup.sh
      - run:
          name: Start docker
          command: |
            # From https://stackoverflow.com/a/35979292/215713
            open -g -a Docker.app || exit 2

            # Wait for the server to start up, if applicable.
            i=0
            while ! docker system info &>/dev/null; do
              (( i++ == 0 )) && printf %s '-- Waiting for Docker to finish starting up...' || printf '.'
              sleep 1
            done
            (( i )) && printf '\n'

            echo "-- Docker is ready."
            docker version

      - run:
          name: Installed tool versions
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          name: Build the ddev executables
          command: make -s clean linux darwin windows

      # Run the built-in ddev tests with the executables just built.
      - run:
          name: ddev tests
          command: make -s test
          no_output_timeout: "20m"

      - run: make -s gometalinter

      - run:
          name: ddev version information
          command: bin/linux/ddev version

      - run:
          name: tar/zip up artifacts and make hashes
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS

      - store_artifacts:
          name: Artifact storage
          path: /artifacts

  # nightly is triggered only with nightly_build_trigger.sh
  nightly_build:
    machine:
      image: circleci/classic:201708-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
      - checkout

      - run:
          command: ./.circleci/linux_circle_vm_setup.sh
          name: NIGHTLY BUILD Circle VM setup - tools, docker, golang

      - run:
          command: echo "go version:$(go version) docker version=$(docker --version) docker-compose version=$(docker-compose --version) HOME=$HOME USER=$(whoami) PWD=$PWD"
          name: Installed tool versions

      # The nightly build builds a ddev that can't be run elsewhere because the containers built in are not pushed.
      # Therefore we build this full nightly first, and then throw it away.
      - run:
          command: |
            make clean
            export VERSION=nightly.$(date +%Y%m%d%H%M%S)
            export VERSION="$(git describe --tags --always --dirty)-nightly.$(date +%Y%m%d%H%M%S)"
            echo VERSION=$VERSION
            git submodule update --init && git submodule update --remote
            make -f nightly_build.mak clean
            make -f nightly_build.mak -s --print-directory VERSION=$VERSION DdevVersion=$VERSION DBTag=$VERSION DBATag=$VERSION WebTag=$VERSION RouterTag=$VERSION  NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION NGINX_LOCAL_UPSTREAM_FPM7_REPO_TAG=$VERSION UPSTREAM_PHP_REPO_TAG=$VERSION
          no_output_timeout: "20m"
          name: Run full nightly build

      - run:
          command: bin/linux/ddev version
          name:  nightly-build ddev version information

      # Run the built-in ddev tests with the executables just built.
      - run:
          command: make -s test
          name: ddev tests
          no_output_timeout: "20m"

      - run: make -s gometalinter

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      # Earlier process updated submodules so now we clean them up to continue.
      - run:
          command: |
            git submodule update --init &&
            make -s clean linux darwin windows
          name: Build the ddev executables

      # Run the built-in ddev tests with the clean binaries just built.
      - run:
          command: make -s test
          name: ddev tests
          no_output_timeout: "20m"

      - run:
          command: bin/linux/ddev version
          name: ddev version information (clean binaries, not nightlies)

      - run:
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS
          name: tar/zip up artifacts and make hashes

      - store_artifacts:
          path: /artifacts
          name: Artifact storage

  # 'tag_build' is used to build a tag for release.
  tag_build:
    machine:
      image: circleci/classic:201708-01
    working_directory: ~/go/src/github.com/drud/ddev
    environment:
      DRUD_DEBUG: "true"
      GOPATH: /home/circleci/go
      ARTIFACTS: /artifacts
    steps:
      - run: mkdir -p ~/go/{lib,pkg,src/github.com/drud/ddev}

      - checkout

      - run:
          command: ./.circleci/linux_circle_vm_setup.sh
          name: TAG BUILD Circle VM setup - tools, docker, golang

      # Now build using the regular ddev-only technique - this results in a fully clean set of executables.
      - run:
          command: make -s clean linux darwin windows
          name: Build the ddev executables

      - run:
          command: bin/linux/ddev version
          name: ddev version information

      - run:
          command: ./.circleci/generate_artifacts.sh $ARTIFACTS
          name: tar/zip up artifacts and make hashes

      - store_artifacts:
          path: /artifacts
          name: Artifact storage



