# ddev apache solr recipe file
#
# To use this in your own project: Copy this file to your project's .ddev folder,
# and create the folder path .ddev/solr/conf. Then, copy the solr configuration
# files for your project to .ddev/solr/conf. E.g., using Drupal Search API Solr, 
# you would copy the solr-conf/5.x/ contents into .ddev/solr/conf. The configuration
# files must be present before running `ddev start`.

version: '3.6'

services:
  solr: # This is the service name used when running ddev commands accepting the --service flag
    container_name: ddev-${DDEV_SITENAME}-solr # This is the name of the container. It is recommended to follow the same name convention used in the main docker-compose.yml file.
    image: solr:5.4
    restart: always
    ports:
      - 8983 # Solr is served from this port inside the container
    labels:
    # These labels ensure this service is discoverable by ddev
      com.ddev.site-name: ${DDEV_SITENAME}
      com.ddev.approot: $DDEV_APPROOT
      com.ddev.app-url: $DDEV_URL
    environment:
      - VIRTUAL_HOST=$DDEV_HOSTNAME # This defines the host name the service should be accessible from. This will be sitename.ddev.local
      - HTTP_EXPOSE=8983 # This defines the port the service should be accessible from at sitename.ddev.local
    volumes:
      - "./solr:/solr-conf" # This exposes a mount to the host system `.ddev/solr-conf` directory.
      - solrdata:/opt/solr/server/solr/mycores # This uses the 'data' volume defined below
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - dev
      - /solr-conf
# This links the solr service to the web service defined in the main docker-compose.yml, allowing applications running in the web service to access the solr service at sitename.ddev.local:8983
  web:
    links:
      - solr:$DDEV_HOSTNAME
volumes:
  solrdata: # This creates a Docker volume that sticks around even if you remove or rebuild the container
