#ddev-generated
# If you remove the ddev-generated line above you
# are responsible for maintaining this file. DDEV will not then
# update it, for example if you add `additional_hostnames`, etc.
# However, it is now unnecessary and imprudent to take control of
# this file, as there is now a dynamic merge mechanism. To use it
# create <project>/.ddev/traefik/dynamic_config.*.yaml files which
# will then be merged in alphanumeric order. See the readme in the
# /traefik directory for more information

http:
  routers:
    {{ $appname := .App.Name}}{{ range $s := .RoutingTable }}
    {{- if not $s.HTTPS -}}
    {{ $appname }}-{{ $s.Service.InternalServiceName }}-{{ $s.Service.InternalServicePort }}-http:
      entrypoints:
        - http-{{$s.ExternalPort}}
      {{- if not $.UseLetsEncrypt -}}{{/* Let's Encrypt only works with Host(), but we need HostRegexp() for wildcards*/}}
      rule: {{ range $i, $h := $s.ExternalHostnames }}{{if $i}}|| {{end}}HostRegexp(`^{{$h | replace "." "\\."}}$`){{end}}
      {{ else }}
      rule: Host({{ range $i, $h := $s.ExternalHostnames }}{{if $i}}, {{end}}`^{{$h | replace "." "\\."}}$`{{end}})
      {{ end }}
      service: "{{$appname}}-{{$s.Service.InternalServiceName}}-{{$s.Service.InternalServicePort}}"
      ruleSyntax: v3
      middlewares: []
      tls: false
    {{ end }}{{ end }}
    {{ range $s := .RoutingTable }}
      {{- if $s.HTTPS -}}
    {{$appname}}-{{$s.Service.InternalServiceName}}-{{$s.Service.InternalServicePort}}-https:
      entrypoints:
        - http-{{$s.ExternalPort}}
      {{- if not $.UseLetsEncrypt -}}{{/* Let's Encrypt only works with Host(), but we need HostRegexp() for wildcards*/}}
      rule: {{ range $i, $h := $s.ExternalHostnames }}{{ if $i }} || {{ end }}HostRegexp(`^{{$h | replace "." "\\."}}$`){{ end }}
      {{ else }}
      rule: Host({{ range $i, $h := $s.ExternalHostnames }}{{- if $i -}}, {{- end -}}`^{{$h | replace "." "\\."}}$`{{end}})
      {{ end }}
      service: "{{$appname}}-{{$s.Service.InternalServiceName}}-{{$s.Service.InternalServicePort}}"
      ruleSyntax: v3
      middlewares: []
      {{ if not $.UseLetsEncrypt }}
      tls: true
      {{ else }}
      tls:
        certResolver: acme-tlsChallenge
      {{ end }}{{ end }}
    {{ end }}

  middlewares:

  services:
    {{$appname := .App.Name}}
    {{- $outputServices := dict -}}
    {{ range $s := .RoutingTable }}
      {{- if not (index $outputServices (print $s.Service.ServiceName)) -}}
        {{- $outputServices = merge $outputServices (dict (print $s.Service.ServiceName) true) -}}
    {{$appname}}-{{ $s.Service.ServiceName }}:
      loadbalancer:
        servers:
          - url: http://ddev-{{$appname}}-{{$s.Service.InternalServiceName}}:{{$s.Service.InternalServicePort}}
        {{ end }}
    {{ end }}

{{/* let's encrypt doesn't work if there's already a provided cert, so omit there */}}
{{- if not .UseLetsEncrypt -}}
tls:
  certificates:
    - certFile: {{ .TargetCertsPath }}/{{ .App.Name }}.crt
      keyFile: {{ .TargetCertsPath }}/{{ .App.Name }}.key
{{- end -}}
