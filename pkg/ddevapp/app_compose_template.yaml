name: ${COMPOSE_PROJECT_NAME}
  {{ .DdevGenerated }}
services:
  {{ if not .OmitDB }}
  db:
    container_name: {{ .Plugin }}-${DDEV_SITENAME}-db
    build:
      context: '{{ .DBBuildContext }}'
      args:
        BASE_IMAGE: $DDEV_DBIMAGE
        username: '{{ .Username }}'
        uid: '{{ .UID }}'
        gid: {{ if ne .DBType "postgres" }} {{ .GID }} {{ else }} "999" {{ end }}
    image: ${DDEV_DBIMAGE}-${DDEV_SITENAME}-built
    cap_add:
      - SYS_NICE
    stop_grace_period: 60s
    working_dir: "{{ .DBWorkingDir }}"
    volumes:
      - type: "volume"
        source: "database"
        target: "{{ .DBMountDir }}"
        volume:
          nocopy: true
      {{ if .NoBindMounts }}
      - ddev-config:/mnt/ddev_config
      - snapshots:/mnt/snapshots
      {{ else }} {{/* if .NoBindMounts */}}
      - .:/mnt/ddev_config
      - ./db_snapshots:/mnt/snapshots
      {{ end }} {{/* end if .NoBindMounts */}}
      - ddev-global-cache:/mnt/ddev-global-cache
    restart: "no"

    # The postgres image is set up for user 999, we won't try to change that.
    user: {{ if ne .DBType "postgres" }} '$DDEV_UID:$DDEV_GID' {{ else }} "999:999" {{end}}
    hostname: {{ .Name }}-db
    ports:
      - "{{ .DockerIP }}:$DDEV_HOST_DB_PORT:{{ .DBPort }}"
    labels:
      com.ddev.site-name: ${DDEV_SITENAME}
      com.ddev.platform: {{ .Plugin }}
      com.ddev.app-type: {{ .AppType }}
      com.ddev.approot: $DDEV_APPROOT
    environment:
      - COLUMNS
      - DDEV_DATABASE
      - DDEV_DATABASE_FAMILY
      - DDEV_HOSTNAME
      - DDEV_PHP_VERSION
      - DDEV_PRIMARY_URL
      - DDEV_PROJECT
      - DDEV_PROJECT_TYPE
      - DDEV_ROUTER_HTTP_PORT
      - DDEV_ROUTER_HTTPS_PORT
      - DDEV_SITENAME
      - DDEV_TLD
      - DOCKER_IP={{ .DockerIP }}
      - GOARCH
      - GOOS
      - HOST_DOCKER_INTERNAL_IP={{ .HostDockerInternalIP }}
      - IS_DDEV_PROJECT=true
      - LINES
      - MYSQL_HISTFILE=/mnt/ddev-global-cache/mysqlhistory/${DDEV_SITENAME}-db/mysql_history
      - MYSQL_PWD=db
      - PGDATABASE=db
      - PGHOST=127.0.0.1
      - PGPASSWORD=db
      - PGUSER=db
      - POSTGRES_PASSWORD=db
      - POSTGRES_USER=db
      - POSTGRES_DB=db
      - TZ={{ .Timezone }}
      - USER={{ .Username }}
    command: ${DDEV_DB_CONTAINER_COMMAND}
    healthcheck:
      {{ if eq .DBType "postgres" }}
      test: ["CMD-SHELL", "/postgres_healthcheck.sh"]
      {{ end }}
      interval: 1s
      retries: 120
      start_period: "{{ .DefaultContainerTimeout }}s"
      start_interval: 1s
      timeout: 70s
  {{ end }} {{/* end if not .OmitDB */}}

  web:
    container_name: {{ .Plugin }}-${DDEV_SITENAME}-web
    build:
      context: '{{ .WebBuildContext }}'
      args:
        BASE_IMAGE: $DDEV_WEBIMAGE
        username: '{{ .Username }}'
        uid: '{{ .UID }}'
        gid: '{{ .GID }}'
        DDEV_PHP_VERSION: ${DDEV_PHP_VERSION}
    image: ${DDEV_WEBIMAGE}-${DDEV_SITENAME}-built
    command: /pre-start.sh
    {{ if .EnvFile }}
    env_file: '{{ .EnvFile }}'
    {{ end }}

    networks: ["default", "ddev_default"]
    cap_add:
      - SYS_PTRACE
    working_dir: "{{ .WebWorkingDir }}"

    {{ .WebExtraExposedPorts }}

    volumes:
      {{ if and (not .MutagenEnabled) (not .NoProjectMount) }}
      - type: {{ .MountType }}
        source: {{ .WebMount }}
        target: /var/www/html
        {{ if eq .MountType "volume" }}
        volume:
          nocopy: true
        {{ else }} {{/* if eq .MountType "volume"*/}}
        consistency: cached
        {{ end }} {{/* end if eq .MountType "volume" */}}
      {{ end }} {{/* end if and (not .MutagenEnabled) (not .NoProjectMount)*/}}
      {{ if and .MutagenEnabled (not .NoProjectMount) }}
      # For mutagen, mount a directory higher in /var/www so that we can use
      # stageMode: "neighboring"
      - type: volume
        source: project_mutagen
        target: /var/www
        volume:
          nocopy: true
      # This second mutagen mount is only to make just the volume available so it can be chowned
      # without accidentally also hitting docker mounts
      - type: volume
        source: project_mutagen
        target: /tmp/project_mutagen
        volume:
          nocopy: true
      {{- end }}

      {{- if .NoBindMounts }}
      - ddev-config:/mnt/ddev_config
      {{- else }}
      - .:/mnt/ddev_config:ro
      - ./xhprof:/usr/local/bin/xhprof:ro
        {{- if .MutagenEnabled }}
          {{- range $uploadDirMap := .UploadDirsMap}}
      - {{ $uploadDirMap }}:rw
          {{- end}} {{- /* end range .UploadDirsMap */}}
          {{- if .GitDirMount }}
      - ../.git:/var/www/html/.git:rw
          {{- end }} {{- /* end if .GitDirMount */}}
        {{- end }} {{- /* end if .MutagenEnabled */}}
      {{- end }} {{- /* end else of if .NoBindMounts */}}
      - ddev-global-cache:/mnt/ddev-global-cache
      {{- if not .OmitSSHAgent }}
      - ddev-ssh-agent_socket_dir:/home/.ssh-agent
      {{- end }}

    restart: "no"
    user: '$DDEV_UID:$DDEV_GID'
    hostname: {{ .Name }}-web

    ports:
      - "{{ .DockerIP }}:$DDEV_HOST_HTTP_PORT:80"
      - "{{ .DockerIP }}:$DDEV_HOST_HTTPS_PORT:443"
    {{ if .HostMailpitPort }}
      - "{{ .DockerIP }}:{{ .HostMailpitPort }}:8025"
    {{ end }}
    environment:
    - COLUMNS
    - DOCROOT=${DDEV_DOCROOT}
    - DDEV_COMPOSER_ROOT
    - DDEV_DATABASE
    - DDEV_DOCROOT
    - DDEV_DATABASE_FAMILY
    - DDEV_HOSTNAME
    - DDEV_MUTAGEN_ENABLED
    - DDEV_PHP_VERSION
    - DDEV_PRIMARY_URL
    - DDEV_PROJECT
    - DDEV_PROJECT_TYPE
    - DDEV_ROUTER_HTTP_PORT
    - DDEV_ROUTER_HTTPS_PORT
    - DDEV_SITENAME
    - DDEV_TLD
    - DDEV_FILES_DIR
    - DDEV_FILES_DIRS
    - DDEV_WEB_ENTRYPOINT=/mnt/ddev_config/web-entrypoint.d
    - DDEV_WEBSERVER_TYPE
    - DDEV_XDEBUG_ENABLED
    - DDEV_VERSION
    - DEPLOY_NAME=local
    {{ if not .DisableSettingsManagement }}
    - DRUSH_OPTIONS_URI=$DDEV_PRIMARY_URL
    {{ end }}
    - DRUSH_ALLOW_XDEBUG=1
    - DOCKER_IP={{ .DockerIP }}
    - GOARCH
    - GOOS
    - HOST_DOCKER_INTERNAL_IP={{ .HostDockerInternalIP }}
    # HTTP_EXPOSE allows for ports accepting HTTP traffic to be accessible from <site>.ddev.site:<port>
    # To expose a container port to a different host port, define the port as hostPort:containerPort
    - HTTP_EXPOSE=${DDEV_ROUTER_HTTP_PORT}:80,${DDEV_MAILPIT_PORT}:{{ .MailpitPort }}{{ .WebExtraHTTPPorts }}
    # You can optionally expose an HTTPS port option for any ports defined in HTTP_EXPOSE.
    # To expose an HTTPS port, define the port as securePort:containerPort.
    - HTTPS_EXPOSE=${DDEV_ROUTER_HTTPS_PORT}:80,${DDEV_MAILPIT_HTTPS_PORT}:{{ .MailpitPort }}{{ .WebExtraHTTPSPorts }}
    - IS_DDEV_PROJECT=true
    - LINES
    - MYSQL_HISTFILE=/mnt/ddev-global-cache/mysqlhistory/${DDEV_SITENAME}-web/mysql_history
    - MYSQL_PWD=db
    - NODE_EXTRA_CA_CERTS=/mnt/ddev-global-cache/mkcert/rootCA.pem
    - npm_config_cache=/mnt/ddev-global-cache/npm
    - PGDATABASE=db
    - PGHOST=db
    - PGPASSWORD=db
    - PGUSER=db
    - PHP_IDE_CONFIG=serverName=${DDEV_SITENAME}.${DDEV_TLD}
    - SSH_AUTH_SOCK=/home/.ssh-agent/socket
    - TZ={{ .Timezone }}
    - USER={{ .Username }}
    - VIRTUAL_HOST=${DDEV_HOSTNAME}
    {{ range $env := .WebEnvironment }}- "{{ $env }}"
    {{ end }}
    labels:
      com.ddev.site-name: ${DDEV_SITENAME}
      com.ddev.platform: {{ .Plugin }}
      com.ddev.app-type: {{ .AppType }}
      com.ddev.approot: $DDEV_APPROOT

      {{ if .HostDockerInternalIP }}
    extra_hosts: [ "host.docker.internal:{{ .HostDockerInternalIP }}" ]
      {{ else if .UseHostDockerInternalExtraHosts }}
    extra_hosts:
      - "host.docker.internal:host-gateway"
      {{ end }}

      {{ if not .OmitRouter }}
    external_links:
      {{ range $hostname := .Hostnames }}- "ddev-router:{{ $hostname }}"
      {{ end }}
      {{ end }}
    healthcheck:
      interval: 1s
      retries: 120
      start_period: "{{ .DefaultContainerTimeout }}s"
      start_interval: 1s
      timeout: 70s

networks:
  ddev_default:
    name: ddev_default
    external: true
  default:
    name: ${COMPOSE_PROJECT_NAME}_default
    external: true
    {{ if .IsGitpod }}{{/* see https://github.com/ddev/ddev/issues/3766 */}}
    driver_opts:
      com.docker.network.driver.mtu: 1440
    {{ end }}

volumes:
  {{if and (not .OmitDB) (ne .DBType "postgres") }}
  database:
    name: "{{ .MariaDBVolumeName}}"
    external: true
  {{ end }} {{/* end if and (not .OmitDB) (ne .DBType postgres) */}}

  {{if and (not .OmitDB) ( eq .DBType "postgres") }}
  database:
    name: "{{ .PostgresVolumeName }}"
    external: true
  {{ end }} {{/* end if and (not .OmitDB) ( ne .DBType postgres) */}}

  {{ if not .OmitSSHAgent }}
  ddev-ssh-agent_socket_dir:
    external: true
  {{ end }}{{/* end if not .OmitSSHAgent */}}
  ddev-global-cache:
    name: ddev-global-cache
    external: true
  {{ if .NoBindMounts }}
  ddev-config:
    name: ${DDEV_SITENAME}-ddev-config
    external: true
  snapshots:
    name: ddev-${DDEV_SITENAME}-snapshots
    external: true
  {{ end }}{{/* end if .NoBindMounts */}}
  {{ if and .NFSMountEnabled (not .NoProjectMount) }}
  nfsmount:
    name: "{{ .NFSMountVolumeName }}"
    driver: local
    driver_opts:
      type: nfs
      o: "addr={{ .NFSServerAddr }},hard,nolock,rw,wsize=32768,rsize=32768"
      device: ':{{ .NFSSource }}'
  {{ end }}{{/* end if and .NFSMountEnabled (not .NoProjectMount) */}}
  {{ if and .MutagenEnabled (not .NoProjectMount) }}
  project_mutagen:
    name: {{ .MutagenVolumeName }}
    external: true

  {{ end }}{{/* end if and .MutagenEnabled (not .NoProjectMount) */}}
