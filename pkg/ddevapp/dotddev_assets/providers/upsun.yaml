#ddev-generated
# Upsun provider configuration. This works out of the box, but can be edited to add
# your own preferences. If you edit it, remove the `ddev-generated` line from the top so
# that it won't be overwritten.
#
# NOTE: Historically this recipe required you to set PLATFORM_PROJECT and PLATFORM_ENVIRONMENT
# in your project environment. In most cases those values can be derived automatically:
# - PLATFORM_PROJECT: derived from .upsun/local/project.yaml (id field)
# - PLATFORM_ENVIRONMENT: derived from your current git branch
#
# You only need to explicitly set those environment variables (e.g. in .ddev/config.yaml,
# .ddev/config.<name>.yaml, or via `ddev config --web-environment-add=...`) when automatic
# derivation is not appropriate for your workflow or the files are not present.
#
# To use this configuration,

# 1. Check out the site from Upsun and then configure it with `ddev config`. You'll want to use `ddev start` and make sure the basic functionality is working.
# 2. Obtain and configure an API token.
#    a. Login to the Upsun Dashboard and go to My Profile->API Tokens to create an API token for DDEV to use.
#    b. Add the API token to the `web_environment` section in your global ddev configuration at ~/.ddev/global_config.yaml:
#    ```yaml
#    web_environment:
#        - UPSUN_CLI_TOKEN=abcdeyourtoken
#    ```
#    You can also do this with `ddev config global --web-environment-add="UPSUN_CLI_TOKEN=abcdeyourtoken"`.
#
#    To use multiple API tokens for different projects, add them to your per-project configuration
#    using the .ddev/config.local.yaml or .ddev/.env file instead. These files are gitignored by default.
#    ```yaml
#    web_environment:
#        - UPSUN_CLI_TOKEN=abcdeyourtoken
#    ```
#
# 3. Optionally add PLATFORM_PROJECT, PLATFORM_ENVIRONMENT,
#    and PLATFORM_APP ( if your environment contains more than one app) variables to your
#    project `.ddev/config.yaml` or a `.ddev/config.local.yaml`. You do not need to add these
#    if your branch is the same as your environment and the project is specified in .upsun/local/project.yaml.
#    ```yaml
#    web_environment:
#        - PLATFORM_PROJECT=nf4amudfn23biyourproject
#        - PLATFORM_ENVIRONMENT=main
#        - PLATFORM_APP=app
#    ```
#    You can also do this with `ddev config --web-environment-add="PLATFORM_PROJECT=nf4amudfn23biyourproject,PLATFORM_ENVIRONMENT=main,PLATFORM_APP=app"`.
#
# 4. `ddev restart`
# 5. Run `ddev pull upsun`. After you agree to the prompt, the current upstream database and files will be downloaded.
# 6. Optionally use `ddev push upsun` to push local files and database to Upsun. Note that `ddev push` is a command that can potentially damage your production site, so this is not recommended.

# If you have more than one database on your Upsun project,
# you will likely to choose which one you want to use
# as the primary database ('db').
# Do this by setting PLATFORM_PRIMARY_RELATIONSHIP, for example, `ddev config --web-environment-add=PLATFORM_PRIMARY_RELATIONSHIP=main`
# or run `ddev pull upsun` with the environment variable, for example
# `ddev pull upsun -y --environment=PLATFORM_PRIMARY_RELATIONSHIP=main`

# Debugging: Use `ddev exec upsun` to see what Upsun knows about
# your configuration and whether it's working correctly.

auth_command:
  command: |
    set -eu -o pipefail
    # set -x   # You can enable bash debugging output by uncommenting
    # Try explicit env, then UPSUN_* fallback, then derive from .upsun/local/project.yaml and git branch.
    export PLATFORM_PROJECT="${PLATFORM_PROJECT:-${UPSUN_PROJECT:-}}"
    if [ -z "${PLATFORM_PROJECT:-}" ] && [ -f .upsun/local/project.yaml ]; then
      PLATFORM_PROJECT="$(yq -r '.id' .upsun/local/project.yaml 2>/dev/null || true)"
      export PLATFORM_PROJECT
    fi

    export PLATFORM_ENVIRONMENT="${PLATFORM_ENVIRONMENT:-${UPSUN_ENVIRONMENT:-}}"
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
      export PLATFORM_ENVIRONMENT="$(git branch --show-current)"
    fi

    if [ -z "${UPSUN_CLI_TOKEN:-}" ]; then echo "Please make sure you have set UPSUN_CLI_TOKEN." && exit 1; fi
    if [ -z "${PLATFORM_PROJECT:-}" ]; then
      echo "Please make sure you have set PLATFORM_PROJECT." && exit 1
    else
      echo "Using PLATFORM_PROJECT=${PLATFORM_PROJECT:-}"
    fi
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
      echo "Please make sure you have set PLATFORM_ENVIRONMENT." && exit 1
    else
      echo "Using PLATFORM_ENVIRONMENT=${PLATFORM_ENVIRONMENT:-}"
    fi
    if [ "$(upsun environment:info status -e ${PLATFORM_ENVIRONMENT})" != "active" ]; then
      upsun environment:resume -e ${PLATFORM_ENVIRONMENT} -y
    fi

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export PLATFORM_PROJECT="${PLATFORM_PROJECT:-${UPSUN_PROJECT:-}}"
    if [ -z "${PLATFORM_PROJECT:-}" ] && [ -f .upsun/local/project.yaml ]; then
      PLATFORM_PROJECT="$(yq -r '.id' .upsun/local/project.yaml 2>/dev/null || true)"
      export PLATFORM_PROJECT
    fi

    export PLATFORM_ENVIRONMENT="${PLATFORM_ENVIRONMENT:-${UPSUN_ENVIRONMENT:-}}"
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
      PLATFORM_ENVIRONMENT="$(git branch --show-current)"
      export PLATFORM_ENVIRONMENT
    fi

    export UPSUN_CLI_NO_INTERACTION=1
    # /tmp/db_relationships.yaml is the full yaml output of the database relationships
    db_relationships_file=/tmp/db_relationships.yaml
    PLATFORM_RELATIONSHIPS="" upsun relationships -y  -e "${PLATFORM_ENVIRONMENT}" ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} | yq 'with_entries(select(.[][].type == "mariadb:*" or .[][].type == "*mysql:*" or .[][].type == "postgresql:*")) ' >${db_relationships_file}
    db_relationships=($(yq ' keys | .[] ' ${db_relationships_file}))
    db_names=($(yq '.[][].path' ${db_relationships_file}))
    db_count=${#db_relationships[@]}
    # echo "db_relationships=${db_relationships} sizeof db_relationships=${#db_relationships[@]} db_names=${db_names} db_count=${db_count} PLATFORM_PRIMARY_RELATIONSHIP=${PLATFORM_PRIMARY_RELATIONSHIP}"
    # If we have only one database, import it into local database named 'db'
    if [ ${#db_names[@]} -eq 1 ]; then db_names[0]="db"; fi

    for (( i=0; i<${#db_relationships[@]}; i++ )); do
      db_name=${db_names[$i]}
      rel=${db_relationships[$i]}
      # if PLATFORM_PRIMARY_RELATIONSHIP is set, then when doing that one, import it into local database 'db'
      if [ "${rel}" = "${PLATFORM_PRIMARY_RELATIONSHIP:-notset}" ] ; then
        echo "PLATFORM_PRIMARY_RELATIONSHIP=${PLATFORM_PRIMARY_RELATIONSHIP:-} so using it as database 'db' instead of the upstream '${db_name}'"
        db_name="db"
      fi

      upsun db:dump --yes ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} --relationship=${rel} --gzip --file=/var/www/html/.ddev/.downloads/${db_name}.sql.gz --project="${PLATFORM_PROJECT}" --environment="${PLATFORM_ENVIRONMENT}"
    done
    echo "Downloaded db dumps for databases '${db_names[@]}'"

files_import_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export PLATFORM_PROJECT="${PLATFORM_PROJECT:-${UPSUN_PROJECT:-}}"
    if [ -z "${PLATFORM_PROJECT:-}" ] && [ -f .upsun/local/project.yaml ]; then
      PLATFORM_PROJECT="$(yq -r '.id' .upsun/local/project.yaml 2>/dev/null || true)"
      export PLATFORM_PROJECT
    fi

    export PLATFORM_ENVIRONMENT="${PLATFORM_ENVIRONMENT:-${UPSUN_ENVIRONMENT:-}}"
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
        PLATFORM_ENVIRONMENT="$(git branch --show-current)"
        export PLATFORM_ENVIRONMENT
    fi

    export UPSUN_CLI_NO_INTERACTION=1
    upsun mount:download --all --yes --quiet --project="${PLATFORM_PROJECT}" --environment="${PLATFORM_ENVIRONMENT}" ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} --target=/var/www/html


# push is very useful for non-production environments, but can be
# very dangerous to production environments. If it is dangerous to your
# workflow you can remove the lines below and remove the `#ddev-generated` in this file
db_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export PLATFORM_PROJECT="${PLATFORM_PROJECT:-${UPSUN_PROJECT:-}}"
    if [ -z "${PLATFORM_PROJECT:-}" ] && [ -f .upsun/local/project.yaml ]; then
      PLATFORM_PROJECT="$(yq -r '.id' .upsun/local/project.yaml 2>/dev/null || true)"
      export PLATFORM_PROJECT
    fi

    export PLATFORM_ENVIRONMENT="${PLATFORM_ENVIRONMENT:-${UPSUN_ENVIRONMENT:-}}"
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
      PLATFORM_ENVIRONMENT="$(git branch --show-current)"
      export PLATFORM_ENVIRONMENT
    fi

    export UPSUN_CLI_NO_INTERACTION=1
    pushd /var/www/html/.ddev/.downloads >/dev/null
    if [ "${PLATFORM_PRIMARY_RELATIONSHIP:-}" != "" ] ; then
      rel="--relationship ${PLATFORM_PRIMARY_RELATIONSHIP}"
    fi
    gzip -dc db.sql.gz | upsun db:sql --project="${PLATFORM_PROJECT}" ${rel:-} --environment="${PLATFORM_ENVIRONMENT}" ${PLATFORM_APP:+"--app=${PLATFORM_APP}"}

# push is very useful for non-production environments, but can be
# very dangerous to production environments. If it is dangerous to your
# workflow you can remove the lines below and remove the `#ddev-generated` in this file
# TODO: This is a naive, Drupal-centric push, which needs adjustment for the mount to be pushed.
files_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export PLATFORM_PROJECT="${PLATFORM_PROJECT:-${UPSUN_PROJECT:-}}"
    if [ -z "${PLATFORM_PROJECT:-}" ] && [ -f .upsun/local/project.yaml ]; then
      PLATFORM_PROJECT="$(yq -r '.id' .upsun/local/project.yaml 2>/dev/null || true)"
      export PLATFORM_PROJECT
    fi

    export PLATFORM_ENVIRONMENT="${PLATFORM_ENVIRONMENT:-${UPSUN_ENVIRONMENT:-}}"
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then
        export PLATFORM_ENVIRONMENT="$(git branch --show-current)"
    fi

    export UPSUN_CLI_NO_INTERACTION=1
    upsun mount:upload --yes --quiet --project="${PLATFORM_PROJECT}" --environment="${PLATFORM_ENVIRONMENT}" ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} --source="${DDEV_FILES_DIR}" --mount=web/sites/default/files
