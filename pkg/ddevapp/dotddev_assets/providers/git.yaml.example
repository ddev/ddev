#ddev-generated
# Example git provider configuration.

# To use this configuration,

# 1. Create a git repository that contains a database dump and a files tarball. It can be private or public, but for most people they will be private.
# 2. Configure access to the repository so that it can be accessed from where you need it. For example, on gitpod, you'll need to enable access to GitHub or Gitlab. On a regular local dev environment, you'll need to be able to access github via https or ssh.
# 3. Update the environment_variables below to point to the git repository that contains your database dump and files.

environment_variables:
  project_url: https://github.com/rfay/ddev-d9-artifacts
  branch: main
  target: ~/tmp/ddev-d9-artifacts

auth_command:
  service: host
  command: |
    if [ ! -d ${target}/.git ] ; then
        git clone ${project_url} --branch=${branch} ${target}
    else
        cd ${target} && git fetch && git checkout origin/${branch}
    fi

db_pull_command:
  service: host
  command: |
    set -eu -o pipefail
    set -x
    ln -s ${target}/db.sql.gz .ddev/.downloads/db.sql.gz

files_pull_command:
  service: host
  command: |
    set -eu -o pipefail
    set -x
    rmdir .ddev/.downloads/files && ln -s ${target}/files .ddev/.downloads/files
